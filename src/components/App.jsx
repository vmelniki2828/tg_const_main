import React, { useState, useRef } from 'react';
import FlowEditor from './FlowEditor';
import BotsList from './BotsList';

function App() {
  const [selectedBotId, setSelectedBotId] = useState(null);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState(null);
  const flowEditorRef = useRef();

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –±–æ—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  const handleSelectBot = (botId) => {
    setSelectedBotId(botId);
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞
  const handleSaveBot = async () => {
    if (!selectedBotId) return;

    try {
      setIsLoading(true);
      setError(null);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      const editorState = flowEditorRef.current?.getState();
      console.log('Saving editor state:', editorState);
      
      const response = await fetch(`http://localhost:3001/api/bots/${selectedBotId}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          editorState,
        }),
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞: ${errorData.error || response.statusText}`);
      }

      const result = await response.json();
      console.log('Save response:', result);
      alert('–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!');
    } catch (err) {
      console.error('Error saving bot:', err);
      setError(err.message);
    } finally {
      setIsLoading(false);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –±–æ—Ç–∞
  const handleConnectBot = async () => {
    if (!selectedBotId) return;

    try {
      setIsLoading(true);
      setError(null);

      // –°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      const editorState = flowEditorRef.current?.getState();
      console.log('Saving editor state before activation:', editorState);
      
      const saveResponse = await fetch(`http://localhost:3001/api/bots/${selectedBotId}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          editorState,
        }),
      });

      if (!saveResponse.ok) {
        const errorData = await saveResponse.json();
        throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞: ${errorData.error || saveResponse.statusText}`);
      }

      const saveResult = await saveResponse.json();
      console.log('Save response:', saveResult);

      // –ó–∞—Ç–µ–º –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –±–æ—Ç–∞
      console.log('Activating bot...');
      const activateResponse = await fetch(`http://localhost:3001/api/bots/${selectedBotId}/activate`, {
        method: 'POST',
      });

      if (!activateResponse.ok) {
        const errorData = await activateResponse.json();
        throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞: ${errorData.error || activateResponse.statusText}`);
      }

      const activateResult = await activateResponse.json();
      console.log('Activate response:', activateResult);
      alert('–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω!');
    } catch (err) {
      console.error('Error connecting bot:', err);
      setError(err.message);
    } finally {
      setIsLoading(false);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É
  const handleBackToList = () => {
    if (isLoading) return;
    setSelectedBotId(null);
  };

  // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –±–æ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä
  if (selectedBotId) {
    return (
      <div className="app-container">
        <div className="editor-controls">
          <button onClick={handleBackToList} className="editor-button">
            ‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É
          </button>
          <button 
            onClick={() => flowEditorRef.current?.createBlock()}
            className="editor-button"
          >
            ‚ûï –°–æ–∑–¥–∞—Ç—å –±–ª–æ–∫
          </button>
          <button 
            onClick={handleSaveBot}
            disabled={isLoading}
            className="editor-button"
          >
            {isLoading ? '‚è≥ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : 'üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å'}
          </button>
          <button 
            onClick={handleConnectBot}
            disabled={isLoading}
            className="editor-button"
          >
            {isLoading ? '‚è≥ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...' : 'üöÄ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ –ø–æ–¥–∫–ª—é—á–∏—Ç—å'}
          </button>
        </div>

        {error && (
          <div className="error-message">
            ‚ùå {error}
          </div>
        )}

        <FlowEditor ref={flowEditorRef} botId={selectedBotId} />
      </div>
    );
  }

  // –ò–Ω–∞—á–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –±–æ—Ç–æ–≤
  return <BotsList onSelectBot={handleSelectBot} />;
}

export default App;
