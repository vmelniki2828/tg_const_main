import React, { useState, useEffect } from 'react';
import './QuizStats.css';
import config from '../config';

const QuizStats = ({ blocks, onClose }) => {
  const [stats, setStats] = useState({});
  const [promoCodesStats, setPromoCodesStats] = useState({});
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [selectedQuiz, setSelectedQuiz] = useState(null);
  const [collapsedSections, setCollapsedSections] = useState({
    promoCodesList: false, // false = —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ, true = —Å–≤–µ—Ä–Ω—É—Ç–æ
    userAttempts: false
  });
  const [searchTerm, setSearchTerm] = useState('');
  const [sortBy, setSortBy] = useState('date'); // date, name, score, success
  const [selectedUser, setSelectedUser] = useState(null);

  useEffect(() => {
    fetchStats();
  }, []);

  const fetchStats = async () => {
    try {
      setError(null); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø—Ä–∏ –Ω–æ–≤–æ–π –ø–æ–ø—ã—Ç–∫–µ
      console.log('üìä –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–≤–∏–∑–æ–≤...');
      const response = await fetch(`${config.API_BASE_URL}/api/quiz-stats`);
      
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      
      const data = await response.json();
      console.log('üìä –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', data);
      console.log('üìä –ö–ª—é—á–∏ –∫–≤–∏–∑–æ–≤:', Object.keys(data));
      
      // –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–∂–¥–æ–º –∫–≤–∏–∑–µ
      Object.keys(data).forEach(quizId => {
        const quizStats = data[quizId];
        console.log(`üìä –ö–≤–∏–∑ ${quizId}:`);
        console.log(`   - –ü–æ–ø—ã—Ç–æ–∫: ${quizStats.totalAttempts}`);
        console.log(`   - –£—Å–ø–µ—à–Ω—ã—Ö: ${quizStats.successfulCompletions}`);
        console.log(`   - –ù–µ—É–¥–∞—á–Ω—ã—Ö: ${quizStats.failedAttempts}`);
        console.log(`   - –ü–æ–ø—ã—Ç–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${quizStats.userAttempts?.length || 0}`);
      });
      
      setStats(data);
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –¥–ª—è –≤—Å–µ—Ö –∫–≤–∏–∑–æ–≤
      const quizBlocks = blocks.filter(block => block.type === 'quiz');
      const promoCodesData = {};
      
      for (const quiz of quizBlocks) {
        try {
          const promoResponse = await fetch(`${config.API_BASE_URL}/api/quiz-promocodes/${quiz.id}`);
          if (promoResponse.ok) {
            const promoData = await promoResponse.json();
            promoCodesData[quiz.id] = promoData;
          }
        } catch (error) {
          console.error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –¥–ª—è –∫–≤–∏–∑–∞ ${quiz.id}:`, error);
          promoCodesData[quiz.id] = {
            hasPromoCodes: false,
            totalPromoCodes: 0,
            availablePromoCodes: 0,
            usedPromoCodes: 0,
            promoCodesList: []
          };
        }
      }
      
      setPromoCodesStats(promoCodesData);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
      setError(error.message);
      setStats({}); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ
    } finally {
      setLoading(false);
    }
  };

  const getQuizBlocks = () => {
    return blocks.filter(block => block.type === 'quiz');
  };

  const formatDate = (timestamp) => {
    return new Date(timestamp).toLocaleString('ru-RU');
  };

  const getQuizStats = (quizId) => {
    return stats[quizId] || {
      totalAttempts: 0,
      successfulCompletions: 0,
      failedAttempts: 0,
      averageScore: 0,
      userAttempts: []
    };
  };

  const calculateSuccessRate = (quizStats) => {
    if (quizStats.totalAttempts === 0) return 0;
    return ((quizStats.successfulCompletions / quizStats.totalAttempts) * 100).toFixed(1);
  };

  const toggleSection = (sectionName) => {
    setCollapsedSections(prev => ({
      ...prev,
      [sectionName]: !prev[sectionName]
    }));
  };

  const filterAndSortAttempts = (attempts) => {
    if (!attempts) return [];
    
    let filtered = attempts;
    
    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–æ–∏—Å–∫—É
    if (searchTerm) {
      const term = searchTerm.toLowerCase();
      filtered = filtered.filter(attempt => 
        (attempt.userName && attempt.userName.toLowerCase().includes(term)) ||
        (attempt.userLastName && attempt.userLastName.toLowerCase().includes(term)) ||
        (attempt.username && attempt.username.toLowerCase().includes(term)) ||
        attempt.userId.toString().includes(term)
      );
    }
    
    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
    switch (sortBy) {
      case 'name':
        filtered.sort((a, b) => (a.userName || '').localeCompare(b.userName || ''));
        break;
      case 'score':
        filtered.sort((a, b) => (b.score || 0) - (a.score || 0));
        break;
      case 'success':
        filtered.sort((a, b) => b.success - a.success);
        break;
      case 'date':
      default:
        filtered.sort((a, b) => b.timestamp - a.timestamp);
        break;
    }
    
    return filtered;
  };

  const showUserDetails = (attempt) => {
    setSelectedUser(attempt);
  };

  const closeUserDetails = () => {
    setSelectedUser(null);
  };

  const exportStatsToFile = async () => {
    try {
      const response = await fetch(`${config.API_BASE_URL}/api/export-quiz-stats`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          stats,
          promoCodesStats,
          blocks: getQuizBlocks()
        })
      });

      if (!response.ok) {
        throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
      }

      const blob = await response.blob();
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `quiz-stats-${new Date().toISOString().split('T')[0]}.csv`;
      document.body.appendChild(a);
      a.click();
      window.URL.revokeObjectURL(url);
      document.body.removeChild(a);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: ' + error.message);
    }
  };

  if (loading) {
    return (
      <div className="quiz-stats-overlay">
        <div className="quiz-stats-modal">
          <div className="loading">–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...</div>
        </div>
      </div>
    );
  }

  const quizBlocks = getQuizBlocks();

  return (
    <>
      <div className="quiz-stats-overlay">
      <div className="quiz-stats-modal">
        <div className="quiz-stats-header">
          <h2>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–≤–∏–∑–æ–≤</h2>
          <div className="header-controls">
            <button className="export-btn" onClick={exportStatsToFile} title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ CSV —Ñ–∞–π–ª">
              üìä –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV
            </button>
            <button className="close-btn" onClick={onClose}>‚úï</button>
          </div>
        </div>

        {error ? (
          <div className="error-message">
            <p>‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {error}</p>
            <p>–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 3001</p>
            <button onClick={fetchStats} className="retry-btn">
              üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
            </button>
          </div>
        ) : quizBlocks.length === 0 ? (
          <div className="no-quizzes">
            <p>–ö–≤–∏–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–æ–∑–¥–∞–π—Ç–µ –∫–≤–∏–∑ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.</p>
          </div>
        ) : (
          <div className="quiz-stats-content">
            {!selectedQuiz ? (
              // –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–≤–∏–∑–æ–≤
              <div className="quizzes-list">
                <h3>–í—ã–±–µ—Ä–∏—Ç–µ –∫–≤–∏–∑ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:</h3>
                {quizBlocks.map(quiz => {
                  const quizStats = getQuizStats(quiz.id);
                  const successRate = calculateSuccessRate(quizStats);
                  
                  return (
                    <div 
                      key={quiz.id} 
                      className="quiz-item"
                      onClick={() => setSelectedQuiz(quiz)}
                    >
                      <div className="quiz-info">
                        <h4>{quiz.message || `–ö–≤–∏–∑ ${quiz.id}`}</h4>
                        <p>–í–æ–ø—Ä–æ—Å–æ–≤: {quiz.questions?.length || 0}</p>
                      </div>
                      <div className="quiz-stats-summary">
                        <div className="stat-item">
                          <span className="stat-label">–ü–æ–ø—ã—Ç–æ–∫:</span>
                          <span className="stat-value">{quizStats.totalAttempts}</span>
                        </div>
                        <div className="stat-item">
                          <span className="stat-label">–£—Å–ø–µ—à–Ω–æ:</span>
                          <span className="stat-value success">{quizStats.successfulCompletions}</span>
                        </div>
                        <div className="stat-item">
                          <span className="stat-label">–£—Å–ø–µ—à–Ω–æ—Å—Ç—å:</span>
                          <span className="stat-value">{successRate}%</span>
                        </div>
                      </div>
                    </div>
                  );
                })}
              </div>
            ) : (
              // –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–≤–∏–∑–∞
              <div className="quiz-detail-stats">
                <div className="quiz-detail-header">
                  <button className="back-btn" onClick={() => setSelectedQuiz(null)}>
                    ‚Üê –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É
                  </button>
                  <h3>{selectedQuiz.message || `–ö–≤–∏–∑ ${selectedQuiz.id}`}</h3>
                </div>

                {(() => {
                  const quizStats = getQuizStats(selectedQuiz.id);
                  const successRate = calculateSuccessRate(quizStats);

                  return (
                    <div className="quiz-detail-content">
                      <div className="stats-overview">
                        <div className="stat-card">
                          <div className="stat-number">{quizStats.totalAttempts}</div>
                          <div className="stat-label">–í—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫</div>
                        </div>
                        <div className="stat-card success">
                          <div className="stat-number">{quizStats.successfulCompletions}</div>
                          <div className="stat-label">–£—Å–ø–µ—à–Ω—ã—Ö</div>
                        </div>
                        <div className="stat-card failed">
                          <div className="stat-number">{quizStats.failedAttempts}</div>
                          <div className="stat-label">–ù–µ—É–¥–∞—á–Ω—ã—Ö</div>
                        </div>
                        <div className="stat-card">
                          <div className="stat-number">{successRate}%</div>
                          <div className="stat-label">–£—Å–ø–µ—à–Ω–æ—Å—Ç—å</div>
                        </div>
                      </div>

                      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ */}
                      {(() => {
                        const promoStats = promoCodesStats[selectedQuiz.id];
                        return (
                          <div className="promo-codes-stats">
                            <h4>üéÅ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤:</h4>
                            {promoStats && promoStats.hasPromoCodes ? (
                              <div className="promo-stats-overview">
                                <div className="promo-stat-card">
                                  <div className="stat-number">{promoStats.totalPromoCodes}</div>
                                  <div className="stat-label">–í—Å–µ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤</div>
                                </div>
                                <div className="promo-stat-card available">
                                  <div className="stat-number">{promoStats.availablePromoCodes}</div>
                                  <div className="stat-label">–î–æ—Å—Ç—É–ø–Ω–æ</div>
                                </div>
                                <div className="promo-stat-card used">
                                  <div className="stat-number">{promoStats.usedPromoCodes}</div>
                                  <div className="stat-label">–í—ã–¥–∞–Ω–æ</div>
                                </div>
                              </div>
                            ) : (
                              <p className="no-promocodes">–ü—Ä–æ–º–æ–∫–æ–¥—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –¥–ª—è —ç—Ç–æ–≥–æ –∫–≤–∏–∑–∞</p>
                            )}
                          </div>
                        );
                      })()}

                      {/* –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ */}
                      {(() => {
                        const promoStats = promoCodesStats[selectedQuiz.id];
                        return (
                          <div className="promo-codes-list">
                            <div className="section-header" onClick={() => toggleSection('promoCodesList')}>
                              <h4>üìã –°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤:</h4>
                              <button className="collapse-btn">
                                {collapsedSections.promoCodesList ? '‚ñº' : '‚ñ≤'}
                              </button>
                            </div>
                            {!collapsedSections.promoCodesList && (
                              <>
                                {promoStats && promoStats.hasPromoCodes && promoStats.promoCodesList.length > 0 ? (
                                  <div className="promocodes-grid">
                                    {promoStats.promoCodesList.map((promoCode, index) => (
                                      <div key={index} className={`promocode-item ${promoCode.activated ? 'used' : 'available'}`}>
                                        <div className="promocode-code">
                                          <strong>{promoCode.code}</strong>
                                        </div>
                                        <div className="promocode-status">
                                          {promoCode.activated ? (
                                            <span className="status-used">
                                              ‚úÖ –í—ã–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {promoCode.activatedBy || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
                                            </span>
                                          ) : (
                                            <span className="status-available">
                                              ‚è≥ –î–æ—Å—Ç—É–ø–µ–Ω
                                            </span>
                                          )}
                                        </div>
                                      </div>
                                    ))}
                                  </div>
                                ) : (
                                  <p className="no-promocodes">–ù–µ—Ç –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è</p>
                                )}
                              </>
                            )}
                          </div>
                        );
                      })()}

                      <div className="user-attempts">
                        <div className="section-header" onClick={() => toggleSection('userAttempts')}>
                          <h4>–ü–æ–ø—ã—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</h4>
                          <button className="collapse-btn">
                            {collapsedSections.userAttempts ? '‚ñº' : '‚ñ≤'}
                          </button>
                        </div>
                        {!collapsedSections.userAttempts && (
                          <>
                            <div className="attempts-controls">
                              <div className="search-box">
                                <input
                                  type="text"
                                  placeholder="–ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏, username –∏–ª–∏ ID..."
                                  value={searchTerm}
                                  onChange={(e) => setSearchTerm(e.target.value)}
                                  className="search-input"
                                />
                                <span className="search-icon">üîç</span>
                              </div>
                              <div className="sort-controls">
                                <label>–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞:</label>
                                <select 
                                  value={sortBy} 
                                  onChange={(e) => setSortBy(e.target.value)}
                                  className="sort-select"
                                >
                                  <option value="date">–ü–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ)</option>
                                  <option value="name">–ü–æ –∏–º–µ–Ω–∏</option>
                                  <option value="score">–ü–æ –±–∞–ª–ª–∞–º</option>
                                  <option value="success">–ü–æ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏</option>
                                </select>
                              </div>
                            </div>
                            {(() => {
                              console.log('üìä –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–æ–ø—ã—Ç–∫–∏ –¥–ª—è –∫–≤–∏–∑–∞:', selectedQuiz.id);
                              console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–≤–∏–∑–∞:', quizStats);
                              console.log('üìä –ü–æ–ø—ã—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', quizStats.userAttempts);
                              
                              if (!quizStats.userAttempts || quizStats.userAttempts.length === 0) {
                                console.log('üìä –ù–µ—Ç –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è');
                                return <p className="no-attempts">–ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è</p>;
                              } else {
                                const filteredAttempts = filterAndSortAttempts(quizStats.userAttempts);
                                console.log(`üìä –û—Ç–æ–±—Ä–∞–∂–∞–µ–º ${filteredAttempts.length} –ø–æ–ø—ã—Ç–æ–∫ (–∏–∑ ${quizStats.userAttempts.length})`);
                                
                                if (filteredAttempts.length === 0) {
                                  return <p className="no-attempts">–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</p>;
                                }
                                
                                return (
                                  <div className="attempts-list">
                                    <div className="attempts-summary">
                                      <div className="summary-item">
                                        <span className="summary-label">–í—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫:</span>
                                        <span className="summary-value">{quizStats.userAttempts.length}</span>
                                      </div>
                                      <div className="summary-item">
                                        <span className="summary-label">–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</span>
                                        <span className="summary-value">
                                          {new Set(quizStats.userAttempts.map(a => a.userId)).size}
                                        </span>
                                      </div>
                                      <div className="summary-item">
                                        <span className="summary-label">–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª:</span>
                                        <span className="summary-value">
                                          {(quizStats.userAttempts.reduce((sum, a) => sum + (a.score || 0), 0) / quizStats.userAttempts.length).toFixed(1)}
                                        </span>
                                      </div>
                                    </div>
                                    
                                    <div className="attempts-table">
                                      <div className="table-header">
                                        <div className="header-cell">üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</div>
                                        <div className="header-cell">üìä –†–µ–∑—É–ª—å—Ç–∞—Ç</div>
                                        <div className="header-cell">üìÖ –î–∞—Ç–∞</div>
                                        <div className="header-cell">‚è±Ô∏è –í—Ä–µ–º—è</div>
                                        <div className="header-cell">üéÅ –ü—Ä–æ–º–æ–∫–æ–¥</div>
                                      </div>
                                      
                                                                             {filteredAttempts.map((attempt, index) => (
                                         <div 
                                           key={index} 
                                           className={`table-row ${attempt.success ? 'success' : 'failed'}`}
                                           onClick={() => showUserDetails(attempt)}
                                           style={{ cursor: 'pointer' }}
                                         >
                                            <div className="table-cell user-info">
                                              <div className="user-name">
                                                {attempt.userName || `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${attempt.userId}`}
                                              </div>
                                              {attempt.userLastName && (
                                                <div className="user-lastname">{attempt.userLastName}</div>
                                              )}
                                              {attempt.username && (
                                                <div className="user-username">@{attempt.username}</div>
                                              )}
                                              <div className="user-id">ID: {attempt.userId}</div>
                                            </div>
                                            
                                            <div className="table-cell result-info">
                                              <div className={`result-status ${attempt.success ? 'success' : 'failed'}`}>
                                                {attempt.success ? '‚úÖ –£—Å–ø–µ—à–Ω–æ' : '‚ùå –ù–µ—É–¥–∞—á–Ω–æ'}
                                              </div>
                                              {attempt.score !== undefined && (
                                                <div className="result-score">
                                                  {attempt.score}/{selectedQuiz.questions?.length || 0} –±–∞–ª–ª–æ–≤
                                                </div>
                                              )}
                                              {attempt.successRate && (
                                                <div className="result-rate">
                                                  {attempt.successRate.toFixed(1)}% —É—Å–ø–µ—à–Ω–æ—Å—Ç—å
                                                </div>
                                              )}
                                            </div>
                                            
                                            <div className="table-cell date-info">
                                              <div className="attempt-date">
                                                {formatDate(attempt.timestamp)}
                                              </div>
                                            </div>
                                            
                                            <div className="table-cell duration-info">
                                              {attempt.duration ? (
                                                <div className="attempt-duration">
                                                  {Math.round(attempt.duration / 1000)}—Å
                                                </div>
                                              ) : (
                                                <div className="no-duration">-</div>
                                              )}
                                            </div>
                                            
                                            <div className="table-cell promocode-info">
                                              {attempt.promoCode ? (
                                                <div className="promocode-received">
                                                  üéÅ {attempt.promoCode}
                                                </div>
                                              ) : (
                                                <div className="no-promocode">-</div>
                                              )}
                                            </div>
                                          </div>
                                        ))}
                                    </div>
                                  </div>
                                );
                              }
                            })()}
                          </>
                        )}
                      </div>
                    </div>
                  );
                })()}
              </div>
            )}
          </div>
        )}
      </div>
      
      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ */}
      {selectedUser && (
        <div className="user-details-modal">
          <div className="user-details-content">
            <div className="user-details-header">
              <h3>–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ</h3>
              <button className="close-btn" onClick={closeUserDetails}>‚úï</button>
            </div>
            
            <div className="user-details-body">
              <div className="user-info-section">
                <h4>üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ</h4>
                <div className="info-grid">
                  <div className="info-item">
                    <span className="info-label">ID:</span>
                    <span className="info-value">{selectedUser.userId}</span>
                  </div>
                  <div className="info-item">
                    <span className="info-label">–ò–º—è:</span>
                    <span className="info-value">{selectedUser.userName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</span>
                  </div>
                  {selectedUser.userLastName && (
                    <div className="info-item">
                      <span className="info-label">–§–∞–º–∏–ª–∏—è:</span>
                      <span className="info-value">{selectedUser.userLastName}</span>
                    </div>
                  )}
                  {selectedUser.username && (
                    <div className="info-item">
                      <span className="info-label">Username:</span>
                      <span className="info-value">@{selectedUser.username}</span>
                    </div>
                  )}
                </div>
              </div>
              
              <div className="quiz-result-section">
                <h4>üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∫–≤–∏–∑–∞</h4>
                <div className="result-grid">
                  <div className="result-item">
                    <span className="result-label">–°—Ç–∞—Ç—É—Å:</span>
                    <span className={`result-value ${selectedUser.success ? 'success' : 'failed'}`}>
                      {selectedUser.success ? '‚úÖ –£—Å–ø–µ—à–Ω–æ' : '‚ùå –ù–µ—É–¥–∞—á–Ω–æ'}
                    </span>
                  </div>
                  <div className="result-item">
                    <span className="result-label">–ë–∞–ª–ª—ã:</span>
                    <span className="result-value">
                      {selectedUser.score}/{selectedQuiz.questions?.length || 0}
                    </span>
                  </div>
                  {selectedUser.successRate && (
                    <div className="result-item">
                      <span className="result-label">–£—Å–ø–µ—à–Ω–æ—Å—Ç—å:</span>
                      <span className="result-value">{selectedUser.successRate.toFixed(1)}%</span>
                    </div>
                  )}
                  <div className="result-item">
                    <span className="result-label">–í—Ä–µ–º—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è:</span>
                    <span className="result-value">
                      {selectedUser.duration ? `${Math.round(selectedUser.duration / 1000)} —Å–µ–∫—É–Ω–¥` : '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
                    </span>
                  </div>
                  <div className="result-item">
                    <span className="result-label">–î–∞—Ç–∞ –ø–æ–ø—ã—Ç–∫–∏:</span>
                    <span className="result-value">{formatDate(selectedUser.timestamp)}</span>
                  </div>
                  {selectedUser.promoCode && (
                    <div className="result-item">
                      <span className="result-label">–ü–æ–ª—É—á–µ–Ω–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥:</span>
                      <span className="result-value promocode">üéÅ {selectedUser.promoCode}</span>
                    </div>
                  )}
                </div>
              </div>
              
              {selectedUser.answers && selectedUser.answers.length > 0 && (
                <div className="answers-section">
                  <h4>üìù –û—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</h4>
                  <div className="answers-list">
                    {selectedUser.answers.map((answer, index) => (
                      <div key={index} className={`answer-item ${answer.isCorrect ? 'correct' : 'incorrect'}`}>
                        <div className="answer-header">
                          <span className="question-number">–í–æ–ø—Ä–æ—Å {index + 1}</span>
                          <span className={`answer-status ${answer.isCorrect ? 'correct' : 'incorrect'}`}>
                            {answer.isCorrect ? '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ' : '‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ'}
                          </span>
                        </div>
                        <div className="answer-text">
                          <strong>–û—Ç–≤–µ—Ç:</strong> {answer.selectedAnswer}
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              )}
            </div>
          </div>
        </div>
      )}
      </div>
    </>
  );
};

export default QuizStats; 