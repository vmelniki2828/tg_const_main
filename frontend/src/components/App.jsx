import React, { useState, useRef, useEffect } from 'react';
import FlowEditor from './FlowEditor';
import BotsList from './BotsList';
import QuizStats from './QuizStats';
import config from '../config';

function App() {
  const [selectedBotId, setSelectedBotId] = useState(null);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState(null);
  const [botStatus, setBotStatus] = useState(null);
  const [showStats, setShowStats] = useState(false);
  const flowEditorRef = useRef();

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞
  const fetchBotStatus = async () => {
    if (!selectedBotId) return;

    try {
      const response = await fetch(`${config.API_BASE_URL}/api/bots/${selectedBotId}/status`);
      if (!response.ok) {
        throw new Error('Failed to fetch bot status');
      }
      const data = await response.json();
      setBotStatus(data.isRunning);
    } catch (err) {
      console.error('Error fetching bot status:', err);
    }
  };

  // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ
  useEffect(() => {
    if (!selectedBotId) return;
    fetchBotStatus();
  }, [selectedBotId]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –±–æ—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  const handleSelectBot = (botId) => {
    setSelectedBotId(botId);
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –±–æ—Ç–∞
  const handleConnectBot = async () => {
    if (!selectedBotId) return;

    try {
      setIsLoading(true);
      setError(null);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      const flowData = flowEditorRef.current?.getFlowData();
      const editorState = {
        blocks: flowData.blocks,
        connections: flowData.connections,
        pan: flowData.pan,
        scale: flowData.scale
      };
      console.log('Saving editor state before activation:', editorState);
      
      const saveResponse = await fetch(`${config.API_BASE_URL}/api/bots/${selectedBotId}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          editorState,
          // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å name –∏ token, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        }),
      });

      if (!saveResponse.ok) {
        const errorData = await saveResponse.json();
        throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞: ${errorData.error || saveResponse.statusText}`);
      }

      // –ó–∞—Ç–µ–º –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –±–æ—Ç–∞
      console.log('Activating bot...');
      const activateResponse = await fetch(`${config.API_BASE_URL}/api/bots/${selectedBotId}/activate`, {
        method: 'POST',
      });

      if (!activateResponse.ok) {
        const errorData = await activateResponse.json();
        throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞: ${errorData.error || activateResponse.statusText}`);
      }

      // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "–ó–∞–ø—É—â–µ–Ω"
      setBotStatus(true);
      alert('–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!');
    } catch (err) {
      console.error('Error connecting bot:', err);
      setError(err.message);
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å —Å–µ—Ä–≤–µ—Ä–∞
      fetchBotStatus();
    } finally {
      setIsLoading(false);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞
  const handleStopBot = async () => {
    if (!selectedBotId) return;

    try {
      setIsLoading(true);
      setError(null);

      const response = await fetch(`${config.API_BASE_URL}/api/bots/${selectedBotId}/deactivate`, {
        method: 'POST',
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞: ${errorData.error || response.statusText}`);
      }

      // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
      setBotStatus(false);
      alert('–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!');
    } catch (err) {
      console.error('Error stopping bot:', err);
      setError(err.message);
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å —Å–µ—Ä–≤–µ—Ä–∞
      fetchBotStatus();
    } finally {
      setIsLoading(false);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É
  const handleBackToList = () => {
    if (isLoading) return;
    setSelectedBotId(null);
  };

  // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –±–æ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä
  if (selectedBotId) {
    return (
      <div className="app-container">
        <div className="editor-controls">
          <button onClick={handleBackToList} className="editor-button">
            ‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É
          </button>
          <button 
            onClick={() => flowEditorRef.current?.createBlock()}
            className="editor-button"
          >
            ‚ûï –°–æ–∑–¥–∞—Ç—å –±–ª–æ–∫
          </button>
          <button 
            onClick={() => flowEditorRef.current?.createQuizBlock()}
            className="editor-button quiz-button"
          >
            üéØ –°–æ–∑–¥–∞—Ç—å –∫–≤–∏–∑
          </button>
          <button 
            onClick={() => setShowStats(true)}
            className="editor-button stats-button"
          >
            üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–≤–∏–∑–æ–≤
          </button>
          <div className="bot-status">
            –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞: {botStatus ? 'üü¢ –ó–∞–ø—É—â–µ–Ω' : 'üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}
          </div>
          {!botStatus ? (
            <button 
              onClick={handleConnectBot}
              disabled={isLoading}
              className="editor-button start-button"
            >
              {isLoading ? '‚è≥ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...' : 'üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å'}
            </button>
          ) : (
            <button 
              onClick={handleStopBot}
              disabled={isLoading}
              className="editor-button stop-button"
            >
              {isLoading ? '‚è≥ –û—Å—Ç–∞–Ω–æ–≤–∫–∞...' : 'üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å'}
            </button>
          )}
        </div>

        {error && (
          <div className="error-message">
            ‚ùå {error}
          </div>
        )}

        <FlowEditor ref={flowEditorRef} botId={selectedBotId} />
        
        {showStats && (
          <QuizStats 
            blocks={flowEditorRef.current?.getState()?.blocks || []}
            botId={selectedBotId}
            onClose={() => setShowStats(false)}
          />
        )}
      </div>
    );
  }

  // –ò–Ω–∞—á–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –±–æ—Ç–æ–≤
  return <BotsList onSelectBot={handleSelectBot} />;
}

export default App;
