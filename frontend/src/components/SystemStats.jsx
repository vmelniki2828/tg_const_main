import React, { useState, useEffect } from 'react';
import config from '../config';

function SystemStats({ onClose }) {
  const [stats, setStats] = useState(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    loadStats();
  }, []);

  const loadStats = async () => {
    try {
      setIsLoading(true);
      setError(null);
      
      const response = await fetch(`${config.API_BASE_URL}/api/system-stats`);
      if (!response.ok) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã');
      }
      
      const data = await response.json();
      setStats(data);
    } catch (err) {
      console.error('Error loading system stats:', err);
      setError(err.message);
    } finally {
      setIsLoading(false);
    }
  };

  if (isLoading && !stats) {
    return (
      <div className="modal-overlay">
        <div className="modal-content">
          <div className="loading">–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...</div>
        </div>
      </div>
    );
  }

  return (
    <div className="modal-overlay">
      <div className="modal-content system-stats-modal">
        <div className="modal-header">
          <h2>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã</h2>
          <button onClick={onClose} className="close-button">√ó</button>
        </div>
        
        {error && (
          <div className="error-message">
            ‚ùå {error}
          </div>
        )}
        
        {stats && (
          <div className="stats-content">
            <div className="stats-section">
              <h3>ü§ñ –ë–æ—Ç—ã</h3>
              <div className="stats-grid">
                <div className="stat-item">
                  <span className="stat-label">–í—Å–µ–≥–æ –±–æ—Ç–æ–≤:</span>
                  <span className="stat-value">{stats.bots.total}</span>
                </div>
                <div className="stat-item">
                  <span className="stat-label">–ê–∫—Ç–∏–≤–Ω—ã—Ö:</span>
                  <span className="stat-value">{stats.bots.active}</span>
                </div>
                <div className="stat-item">
                  <span className="stat-label">–ó–∞–ø—É—â–µ–Ω–Ω—ã—Ö:</span>
                  <span className="stat-value">{stats.bots.running}</span>
                </div>
              </div>
            </div>
            
            <div className="stats-section">
              <h3>üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</h3>
              <div className="stats-grid">
                <div className="stat-item">
                  <span className="stat-label">–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</span>
                  <span className="stat-value">{stats.users.total}</span>
                </div>
              </div>
            </div>
            
            <div className="stats-section">
              <h3>üéØ –ö–≤–∏–∑—ã</h3>
              <div className="stats-grid">
                <div className="stat-item">
                  <span className="stat-label">–í—Å–µ–≥–æ –∫–≤–∏–∑–æ–≤:</span>
                  <span className="stat-value">{stats.quizzes.total}</span>
                </div>
              </div>
            </div>
            
            <div className="stats-footer">
              <small>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {new Date(stats.timestamp).toLocaleString('ru-RU')}</small>
              <button onClick={loadStats} className="refresh-button" disabled={isLoading}>
                {isLoading ? '‚è≥ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...' : 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å'}
              </button>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}

export default SystemStats;