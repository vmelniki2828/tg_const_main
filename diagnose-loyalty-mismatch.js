#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π –º–µ–∂–¥—É –Ω–∞–≥—Ä–∞–¥–∞–º–∏ –∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node diagnose-loyalty-mismatch.js <botId>
 */

const axios = require('axios');

async function diagnoseLoyaltyMismatch(botId) {
  try {
    console.log(`üîç –ù–∞—á–∏–Ω–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π –¥–ª—è –±–æ—Ç–∞ ${botId}`);
    
    const response = await axios.post(`http://localhost:3001/api/diagnose-loyalty-mismatch/${botId}`);
    
    console.log('‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
    console.log(`   - –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏: ${response.data.statistics.totalLoyaltyRecords}`);
    console.log(`   - –ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π: ${response.data.statistics.mismatchesFound}`);
    console.log(`   - –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π: ${response.data.statistics.fixesApplied}`);
    
    if (response.data.mismatches.length > 0) {
      console.log('\nüîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è:');
      response.data.mismatches.forEach((mismatch, index) => {
        console.log(`\n${index + 1}. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${mismatch.userId}`);
        console.log(`   - –ü–µ—Ä–∏–æ–¥: ${mismatch.period}`);
        console.log(`   - –ü—Ä–æ–±–ª–µ–º–∞: ${mismatch.issue}`);
        console.log(`   - –û–ø–∏—Å–∞–Ω–∏–µ: ${mismatch.description}`);
      });
    }
    
    if (response.data.fixes.length > 0) {
      console.log('\n‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:');
      response.data.fixes.forEach((fix, index) => {
        console.log(`\n${index + 1}. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${fix.userId}`);
        console.log(`   - –ü–µ—Ä–∏–æ–¥: ${fix.period}`);
        console.log(`   - –î–µ–π—Å—Ç–≤–∏–µ: ${fix.action}`);
        console.log(`   - –ü—Ä–æ–º–æ–∫–æ–¥: ${fix.promoCode}`);
        console.log(`   - –û–ø–∏—Å–∞–Ω–∏–µ: ${fix.description}`);
      });
    }
    
    if (response.data.mismatches.length === 0 && response.data.fixes.length === 0) {
      console.log('\nüéâ –û—Ç–ª–∏—á–Ω–æ! –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π:', error.message);
    if (error.response) {
      console.error('üìÑ –î–µ—Ç–∞–ª–∏ –æ—Ç–≤–µ—Ç–∞:', error.response.data);
    }
  }
}

// –ü–æ–ª—É—á–∞–µ–º botId –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const botId = process.argv[2];

if (!botId) {
  console.error('‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–∫–∞–∑–∞–Ω botId');
  console.log('üìñ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node diagnose-loyalty-mismatch.js <botId>');
  console.log('üìñ –ü—Ä–∏–º–µ—Ä: node diagnose-loyalty-mismatch.js 1757891140598');
  process.exit(1);
}

console.log(`üöÄ –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π –¥–ª—è –±–æ—Ç–∞: ${botId}`);
diagnoseLoyaltyMismatch(botId);
