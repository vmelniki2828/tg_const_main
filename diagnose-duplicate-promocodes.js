#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node diagnose-duplicate-promocodes.js <botId>
 */

const axios = require('axios');

async function diagnoseDuplicatePromoCodes(botId) {
  try {
    console.log(`üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –¥–ª—è –±–æ—Ç–∞ ${botId}`);
    
    const response = await axios.get(`http://localhost:3001/api/diagnose-duplicate-promocodes/${botId}`);
    
    console.log('‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
    console.log(`   - –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤: ${response.data.statistics.totalActivatedPromoCodes}`);
    console.log(`   - –°–ª—É—á–∞–µ–≤ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è: ${response.data.statistics.duplicateCases}`);
    console.log(`   - –ó–∞—Ç—Ä–æ–Ω—É—Ç—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${response.data.statistics.affectedUsers}`);
    
    if (response.data.duplicates.length > 0) {
      console.log('\nüîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ –¥—É–±–ª–∏–∫–∞—Ç—ã:');
      response.data.duplicates.forEach((duplicate, index) => {
        console.log(`\n${index + 1}. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${duplicate.userId} (${duplicate.userInfo.firstName} @${duplicate.userInfo.username})`);
        console.log(`   - –ü–µ—Ä–∏–æ–¥: ${duplicate.period}`);
        console.log(`   - –í—Å–µ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤: ${duplicate.totalPromoCodes}`);
        console.log(`   - –û—Å—Ç–∞–≤–∏—Ç—å: ${duplicate.keepPromoCode}`);
        console.log(`   - –£–¥–∞–ª–∏—Ç—å: ${duplicate.removePromoCodes.join(', ')}`);
        
        console.log(`   - –ü—Ä–æ–º–æ–∫–æ–¥—ã:`);
        duplicate.promoCodes.forEach((promoCode, promoIndex) => {
          const status = promoIndex === 0 ? '‚úÖ –û–°–¢–ê–í–ò–¢–¨' : '‚ùå –£–î–ê–õ–ò–¢–¨';
          console.log(`     ${promoIndex + 1}. ${promoCode.code} (${new Date(promoCode.activatedAt).toLocaleString('ru-RU')}) - ${status}`);
        });
      });
      
      console.log('\nüßπ –î–ª—è –æ—á–∏—Å—Ç–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:');
      console.log(`curl -X POST http://localhost:3001/api/cleanup-duplicate-promocodes/${botId}`);
      console.log(`–∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–∫—Ä–∏–ø—Ç: node cleanup-duplicate-promocodes.js ${botId}`);
      
    } else {
      console.log('\nüéâ –û—Ç–ª–∏—á–Ω–æ! –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤:', error.message);
    if (error.response) {
      console.error('üìÑ –î–µ—Ç–∞–ª–∏ –æ—Ç–≤–µ—Ç–∞:', error.response.data);
    }
  }
}

// –ü–æ–ª—É—á–∞–µ–º botId –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const botId = process.argv[2];

if (!botId) {
  console.error('‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–∫–∞–∑–∞–Ω botId');
  console.log('üìñ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node diagnose-duplicate-promocodes.js <botId>');
  console.log('üìñ –ü—Ä–∏–º–µ—Ä: node diagnose-duplicate-promocodes.js 1757891140598');
  process.exit(1);
}

console.log(`üöÄ –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –¥–ª—è –±–æ—Ç–∞: ${botId}`);
diagnoseDuplicatePromoCodes(botId);
