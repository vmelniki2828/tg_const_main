// –°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
const mongoose = require('mongoose');

// –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ MongoDB
const MONGO_URI = process.env.MONGO_URI || 'mongodb://157.230.20.252:27017/tg_const_main';
mongoose.connect(MONGO_URI, { 
  useNewUrlParser: true, 
  useUnifiedTopology: true,
  serverSelectionTimeoutMS: 5000,
  socketTimeoutMS: 45000
})
  .then(() => console.log('‚úÖ MongoDB connected'))
  .catch(err => {
    console.error('‚ùå MongoDB connection error:', err);
    process.exit(1);
  });

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏
const { PromoCode } = require('./models');

async function cleanupDuplicatePromoCodes() {
  try {
    console.log('üßπ –ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤...\n');
    
    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã
    const allPromoCodes = await PromoCode.find({});
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${allPromoCodes.length} –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö`);
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–æ–¥—É
    const codeGroups = {};
    allPromoCodes.forEach(promo => {
      if (!codeGroups[promo.code]) {
        codeGroups[promo.code] = [];
      }
      codeGroups[promo.code].push(promo);
    });
    
    // –ù–∞—Ö–æ–¥–∏–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    const duplicates = Object.entries(codeGroups).filter(([code, promos]) => promos.length > 1);
    
    if (duplicates.length === 0) {
      console.log('‚úÖ –î—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
      return;
    }
    
    console.log(`üîç –ù–∞–π–¥–µ–Ω–æ ${duplicates.length} –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤:`);
    
    let totalRemoved = 0;
    
    for (const [code, promos] of duplicates) {
      console.log(`\nüìù –ü—Ä–æ–º–æ–∫–æ–¥ "${code}": ${promos.length} –∫–æ–ø–∏–π`);
      
      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–æ—Å—Ç–∞–≤–ª—è–µ–º —Å–∞–º—ã–π —Å—Ç–∞—Ä—ã–π)
      promos.sort((a, b) => {
        const dateA = a._id.getTimestamp();
        const dateB = b._id.getTimestamp();
        return dateA - dateB;
      });
      
      // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–≥–æ (—Å–∞–º–æ–≥–æ —Å—Ç–∞—Ä–æ–≥–æ)
      const toRemove = promos.slice(1);
      const idsToRemove = toRemove.map(p => p._id);
      
      if (idsToRemove.length > 0) {
        await PromoCode.deleteMany({ _id: { $in: idsToRemove } });
        console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ ${idsToRemove.length} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤`);
        totalRemoved += idsToRemove.length;
      }
    }
    
    console.log(`\n‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –£–¥–∞–ª–µ–Ω–æ ${totalRemoved} –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ:', error);
  } finally {
    mongoose.disconnect();
    process.exit(0);
  }
}

cleanupDuplicatePromoCodes();
