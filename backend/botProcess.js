const { Telegraf } = require('telegraf');
const { User } = require('./models');
const { Loyalty } = require('./models');
const mongoose = require('mongoose');
const MONGO_URI = 'mongodb://157.230.20.252:27017/tg_const_main';
mongoose.connect(MONGO_URI, { useNewUrlParser: true, useUnifiedTopology: true })
  .then(() => console.log('‚úÖ MongoDB connected (botProcess.js)'))
  .catch(err => {
    console.error('‚ùå MongoDB connection error (botProcess.js):', err);
    process.exit(1);
  });

// –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const [token, botId, stateJson] = process.argv.slice(2);

if (!token || !botId || !stateJson) {
  console.error('Missing required arguments: token, botId, stateJson');
  process.exit(1);
}

// –ü–∞—Ä—Å–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
let state;
try {
  state = JSON.parse(stateJson);
  if (!state.blocks || !state.connections) {
    throw new Error('Invalid state format');
  }
} catch (error) {
  console.error('Failed to parse state:', error);
  process.exit(1);
}

// –ö—ç—à –¥–ª—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
const promoCodeCache = new Map();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è)
async function sendMediaMessage(ctx, message, mediaFiles, keyboard, inlineKeyboard = []) {
  const fs = require('fs');
  const path = require('path');
  
  console.log(`üîç DEBUG: sendMediaMessage called with:`);
  console.log(`  - message: ${message.substring(0, 50)}...`);
  console.log(`  - mediaFiles: ${mediaFiles ? mediaFiles.length : 0} files`);
  console.log(`  - keyboard: ${keyboard.length} rows`);
  console.log(`  - inlineKeyboard: ${inlineKeyboard.length} rows`);
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ mediaFiles —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –Ω–µ –ø—É—Å—Ç–æ–π
    if (!mediaFiles || !Array.isArray(mediaFiles) || mediaFiles.length === 0) {
      console.log(`üîç DEBUG: No media files, sending text only`);
      // –ï—Å–ª–∏ –Ω–µ—Ç –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
      const replyMarkup = {};
      if (keyboard.length > 0) {
        replyMarkup.keyboard = keyboard;
        replyMarkup.resize_keyboard = true;
      }
      if (inlineKeyboard.length > 0) {
        replyMarkup.inline_keyboard = inlineKeyboard;
      }
      
      console.log(`üîç DEBUG: Sending text message with reply markup:`, JSON.stringify(replyMarkup));
      
      // –î–æ–±–∞–≤–ª—è–µ–º timeout –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
      const sendPromise = ctx.reply(message, {
        reply_markup: Object.keys(replyMarkup).length > 0 ? replyMarkup : undefined
      });
      
      // Timeout 10 —Å–µ–∫—É–Ω–¥
      const timeoutPromise = new Promise((_, reject) => {
        setTimeout(() => reject(new Error('Message send timeout')), 10000);
      });
      
      await Promise.race([sendPromise, timeoutPromise]);
      console.log(`üîç DEBUG: Text message sent successfully`);
      return;
    }

    // –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –º–µ–¥–∏–∞—Ñ–∞–π–ª
    if (mediaFiles.length === 1) {
      console.log(`üîç DEBUG: Single media file detected`);
      const media = mediaFiles[0];
      const filePath = path.join(__dirname, 'uploads', media.filename);
      
      console.log(`üîç DEBUG: Media file path: ${filePath}`);
      console.log(`üîç DEBUG: File exists: ${fs.existsSync(filePath)}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
      if (!fs.existsSync(filePath)) {
        console.log(`üîç DEBUG: Media file not found, sending text only`);
        const replyMarkup = {};
        if (keyboard.length > 0) {
          replyMarkup.keyboard = keyboard;
          replyMarkup.resize_keyboard = true;
        }
        if (inlineKeyboard.length > 0) {
          replyMarkup.inline_keyboard = inlineKeyboard;
        }
        
        console.log(`üîç DEBUG: Sending fallback text message`);
        
        // –î–æ–±–∞–≤–ª—è–µ–º timeout –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        const sendPromise = ctx.reply(message, {
          reply_markup: Object.keys(replyMarkup).length > 0 ? replyMarkup : undefined
        });
        
        // Timeout 10 —Å–µ–∫—É–Ω–¥
        const timeoutPromise = new Promise((_, reject) => {
          setTimeout(() => reject(new Error('Message send timeout')), 10000);
        });
        
        await Promise.race([sendPromise, timeoutPromise]);
        console.log(`üîç DEBUG: Fallback text message sent successfully`);
        return;
      }

      const replyMarkup = {};
      if (keyboard.length > 0) {
        replyMarkup.keyboard = keyboard;
        replyMarkup.resize_keyboard = true;
      }
      if (inlineKeyboard.length > 0) {
        replyMarkup.inline_keyboard = inlineKeyboard;
      }

      const options = {
        caption: message,
        reply_markup: Object.keys(replyMarkup).length > 0 ? replyMarkup : undefined
      };

      console.log(`üîç DEBUG: Sending media with options:`, JSON.stringify(options));

      // –î–æ–±–∞–≤–ª—è–µ–º timeout –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞
      const sendMediaPromise = (async () => {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –º–µ–¥–∏–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –º–µ—Ç–æ–¥–æ–º
        if (media.mimetype.startsWith('image/')) {
          console.log(`üîç DEBUG: Sending as photo`);
          return await ctx.replyWithPhoto({ source: filePath }, options);
        } else if (media.mimetype.startsWith('video/')) {
          console.log(`üîç DEBUG: Sending as video`);
          return await ctx.replyWithVideo({ source: filePath }, options);
        } else if (media.mimetype.startsWith('audio/')) {
          console.log(`üîç DEBUG: Sending as audio`);
          return await ctx.replyWithAudio({ source: filePath }, options);
        } else if (media.mimetype.startsWith('application/')) {
          console.log(`üîç DEBUG: Sending as document`);
          return await ctx.replyWithDocument({ source: filePath }, options);
        } else {
          console.log(`üîç DEBUG: Sending as document (fallback)`);
          return await ctx.replyWithDocument({ source: filePath }, options);
        }
      })();
      
      // Timeout 15 —Å–µ–∫—É–Ω–¥ –¥–ª—è –º–µ–¥–∏–∞
      const timeoutPromise = new Promise((_, reject) => {
        setTimeout(() => reject(new Error('Media send timeout')), 15000);
      });
      
      await Promise.race([sendMediaPromise, timeoutPromise]);
      console.log(`üîç DEBUG: Media message sent successfully`);
    } else {
      console.log(`üîç DEBUG: Multiple media files detected`);
      // –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã
      const mediaGroup = [];
      const validFiles = [];
      
      for (const media of mediaFiles) {
        const filePath = path.join(__dirname, 'uploads', media.filename);
        console.log(`üîç DEBUG: Checking media file: ${filePath} (exists: ${fs.existsSync(filePath)})`);
        if (fs.existsSync(filePath)) {
          validFiles.push({ ...media, filePath });
        }
      }
      
      console.log(`üîç DEBUG: Valid files found: ${validFiles.length}`);
      
      if (validFiles.length === 0) {
        console.log(`üîç DEBUG: No valid media files, sending text only`);
        const replyMarkup = {};
        if (keyboard.length > 0) {
          replyMarkup.keyboard = keyboard;
          replyMarkup.resize_keyboard = true;
        }
        if (inlineKeyboard.length > 0) {
          replyMarkup.inline_keyboard = inlineKeyboard;
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º timeout –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        const sendPromise = ctx.reply(message, {
          reply_markup: Object.keys(replyMarkup).length > 0 ? replyMarkup : undefined
        });
        
        // Timeout 10 —Å–µ–∫—É–Ω–¥
        const timeoutPromise = new Promise((_, reject) => {
          setTimeout(() => reject(new Error('Message send timeout')), 10000);
        });
        
        await Promise.race([sendPromise, timeoutPromise]);
        console.log(`üîç DEBUG: Fallback text message sent successfully`);
        return;
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã –≤ –≥—Ä—É–ø–ø—É
      for (const media of validFiles) {
        const mediaInput = { source: media.filePath };
        
        if (media.mimetype.startsWith('image/')) {
          mediaGroup.push({ type: 'photo', media: mediaInput });
        } else if (media.mimetype.startsWith('video/')) {
          mediaGroup.push({ type: 'video', media: mediaInput });
        } else if (media.mimetype.startsWith('audio/')) {
          mediaGroup.push({ type: 'audio', media: mediaInput });
        } else {
          mediaGroup.push({ type: 'document', media: mediaInput });
        }
      }
      
      const replyMarkup = {};
      if (keyboard.length > 0) {
        replyMarkup.keyboard = keyboard;
        replyMarkup.resize_keyboard = true;
      }
      if (inlineKeyboard.length > 0) {
        replyMarkup.inline_keyboard = inlineKeyboard;
      }
      
      console.log(`üîç DEBUG: Sending media group with ${mediaGroup.length} files`);
      
      // –î–æ–±–∞–≤–ª—è–µ–º timeout –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã
      const sendGroupPromise = ctx.replyWithMediaGroup(mediaGroup, {
        caption: message,
        reply_markup: Object.keys(replyMarkup).length > 0 ? replyMarkup : undefined
      });
      
      // Timeout 20 —Å–µ–∫—É–Ω–¥ –¥–ª—è –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã
      const timeoutPromise = new Promise((_, reject) => {
        setTimeout(() => reject(new Error('Media group send timeout')), 20000);
      });
      
      await Promise.race([sendGroupPromise, timeoutPromise]);
      console.log(`üîç DEBUG: Media group sent successfully`);
    }
  } catch (error) {
    console.error('Error sending media message:', error);
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ 403 (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞)
    if (error.response && error.response.error_code === 403) {
      console.log(`‚ö†Ô∏è User blocked the bot (403 error), ignoring`);
      return;
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ timeout –æ—à–∏–±–æ–∫
    if (error.message && error.message.includes('timeout')) {
      console.log(`‚ö†Ô∏è Message send timeout, skipping`);
      return;
    }
    
    // Fallback –∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
    try {
      console.log(`üîç DEBUG: Attempting fallback to text message`);
      const replyMarkup = {};
      if (keyboard.length > 0) {
        replyMarkup.keyboard = keyboard;
        replyMarkup.resize_keyboard = true;
      }
      if (inlineKeyboard.length > 0) {
        replyMarkup.inline_keyboard = inlineKeyboard;
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º timeout –¥–ª—è fallback
      const sendPromise = ctx.reply(message, {
        reply_markup: Object.keys(replyMarkup).length > 0 ? replyMarkup : undefined
      });
      
      const timeoutPromise = new Promise((_, reject) => {
        setTimeout(() => reject(new Error('Fallback timeout')), 5000);
      });
      
      await Promise.race([sendPromise, timeoutPromise]);
      console.log(`üîç DEBUG: Fallback text message sent successfully`);
    } catch (fallbackError) {
      console.error('Error in fallback message sending:', fallbackError);
      // –ï—Å–ª–∏ –∏ fallback –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
      if (fallbackError.response && fallbackError.response.error_code === 403) {
        console.log(`‚ö†Ô∏è User blocked the bot (403 error in fallback), ignoring`);
        return;
      }
    }
  }
}

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ MongoDB
async function saveUserToMongo(ctx) {
  if (!ctx.from) return;
  const userId = ctx.from.id;
  try {
    console.log(`[MongoDB] saveUserToMongo: –ø–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:`, { botId, userId, from: ctx.from });
    
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    const existingUser = await User.findOne({ botId, userId });
    
    if (existingUser) {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const updateResult = await User.updateOne(
        { botId, userId },
        {
          $set: {
            lastSubscribedAt: new Date(),
            isSubscribed: true,
            username: ctx.from.username,
            firstName: ctx.from.first_name,
            lastName: ctx.from.last_name
          }
        }
      );
      console.log('[MongoDB] saveUserToMongo: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω:', updateResult);
    } else {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const newUser = new User({
        botId,
        userId,
        username: ctx.from.username,
        firstName: ctx.from.first_name,
        lastName: ctx.from.last_name,
        firstSubscribedAt: new Date(),
        lastSubscribedAt: new Date(),
        isSubscribed: true,
        subscriptionHistory: [{ subscribedAt: new Date() }]
      });
      
      const saveResult = await newUser.save();
      console.log('[MongoDB] saveUserToMongo: –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω:', saveResult._id);
    }
  } catch (err) {
    console.error('[MongoDB] saveUserToMongo: –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', err);
  }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const userCurrentBlock = new Map();
const userNavigationHistory = new Map();
const userQuizStates = new Map();
const userLastActivity = new Map();
const completedQuizzes = new Map();

function setupBotHandlers(bot, blocks, connections) {
  console.log('=== [BOOT] setupBotHandlers –≤—ã–∑–≤–∞–Ω ===');
  // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É –¥–∏–∞–ª–æ–≥–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
  const dialogMap = new Map();
  console.log(`[BOOT] Creating dialogMap from ${blocks.length} blocks:`);
  blocks.forEach(block => {
    dialogMap.set(block.id, {
      message: block.message,
      buttons: block.buttons || [],
      mediaFiles: block.mediaFiles || [],
      type: block.type,
      questions: block.questions || [],
      currentQuestionIndex: block.currentQuestionIndex || 0,
      finalSuccessMessage: block.finalSuccessMessage,
      returnToStartOnComplete: block.returnToStartOnComplete
    });
    console.log(`[BOOT] dialogMap: ${block.id} -> ${block.type} (${(block.buttons || []).length} buttons)`);
    
    // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–≤–∏–∑–æ–≤
    if (block.type === 'quiz') {
      console.log(`[BOOT] Quiz block ${block.id} questions:`, (block.questions || []).length);
      console.log(`[BOOT] Quiz block ${block.id} questions data:`, JSON.stringify(block.questions, null, 2));
    }
  });
  console.log(`[BOOT] Final dialogMap size: ${dialogMap.size}`);

  // –ö–∞—Ä—Ç–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  // const userNavigationHistory = new Map(); // –£–¥–∞–ª–µ–Ω–æ
  
  // –ö–∞—Ä—Ç–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –±–ª–æ–∫–∞ –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  // const userCurrentBlock = new Map(); // –£–¥–∞–ª–µ–Ω–æ
  
  // –ö–∞—Ä—Ç–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–≤–∏–∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  // const userQuizStates = new Map(); // –£–¥–∞–ª–µ–Ω–æ
  
  // –ö–∞—Ä—Ç–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∫–≤–∏–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  // const completedQuizzes = new Map(); // –£–¥–∞–ª–µ–Ω–æ

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–∞–º—è—Ç–∏)
  function cleanupOldUserData() {
    const now = Date.now();
    const maxAge = 24 * 60 * 60 * 1000; // 24 —á–∞—Å–∞
    
    console.log(`üßπ Starting memory cleanup...`);
    console.log(`üßπ Before cleanup - Active users: ${userCurrentBlock.size}, Quiz states: ${userQuizStates.size}, History: ${userNavigationHistory.size}`);
    
    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–≤–∏–∑–æ–≤
    let cleanedQuizStates = 0;
    for (const [userId, quizState] of userQuizStates.entries()) {
      if (now - quizState.startTime > maxAge) {
        userQuizStates.delete(userId);
        cleanedQuizStates++;
      }
    }
    
    // –û—á–∏—â–∞–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–Ω–µ –±—ã–ª–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±–æ–ª–µ–µ 30 –º–∏–Ω—É—Ç)
    const inactiveThreshold = 30 * 60 * 1000; // 30 –º–∏–Ω—É—Ç
    let cleanedUsers = 0;
    for (const [userId, lastActivity] of userLastActivity.entries()) {
      if (now - lastActivity > inactiveThreshold) {
        userCurrentBlock.delete(userId);
        userNavigationHistory.delete(userId);
        userLastActivity.delete(userId);
        completedQuizzes.delete(userId);
        cleanedUsers++;
      }
    }
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if (userCurrentBlock.size > 1000) {
      console.log(`üßπ Too many users (${userCurrentBlock.size}), forcing cleanup...`);
      const userArray = Array.from(userCurrentBlock.entries());
      const toRemove = userArray.slice(0, 500); // –£–¥–∞–ª—è–µ–º 500 —Å–∞–º—ã—Ö —Å—Ç–∞—Ä—ã—Ö
      
      for (const [userId] of toRemove) {
        userCurrentBlock.delete(userId);
        userNavigationHistory.delete(userId);
        userLastActivity.delete(userId);
        completedQuizzes.delete(userId);
        userQuizStates.delete(userId);
      }
      console.log(`üßπ Forced cleanup: removed ${toRemove.length} users`);
    }
    
    console.log(`üßπ Memory cleanup completed. Cleaned: ${cleanedQuizStates} quiz states, ${cleanedUsers} users`);
    console.log(`üßπ After cleanup - Active users: ${userCurrentBlock.size}, Quiz states: ${userQuizStates.size}, History: ${userNavigationHistory.size}`);
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞
    if (global.gc) {
      global.gc();
      console.log(`üßπ Garbage collection triggered`);
    }
  }

  // –ö–∞—Ä—Ç–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  // const userLastActivity = new Map(); // –£–¥–∞–ª–µ–Ω–æ

  // –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É –ø–∞–º—è—Ç–∏ –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç (–±–æ–ª–µ–µ —á–∞—Å—Ç–æ)
  setInterval(cleanupOldUserData, 15 * 60 * 1000);
  
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –ø–∞–º—è—Ç–∏
  setInterval(() => {
    const memUsage = process.memoryUsage();
    const memPercent = (memUsage.heapUsed / memUsage.heapTotal) * 100;
    
    console.log(`üìä Memory usage: ${memPercent.toFixed(1)}% (${Math.round(memUsage.heapUsed / 1024 / 1024)}MB / ${Math.round(memUsage.heapTotal / 1024 / 1024)}MB)`);
    console.log(`üìä Active users: ${userCurrentBlock.size}, Quiz states: ${userQuizStates.size}, History: ${userNavigationHistory.size}`);
    
    if (memPercent > 80) {
      console.log(`‚ö†Ô∏è High memory usage: ${memPercent.toFixed(1)}%, triggering cleanup`);
      cleanupOldUserData();
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É—Ç–µ—á–∫—É –ø–∞–º—è—Ç–∏
    if (userCurrentBlock.size > 2000) {
      console.log(`üö® Too many users (${userCurrentBlock.size}), forcing aggressive cleanup`);
      const userArray = Array.from(userCurrentBlock.entries());
      const toRemove = userArray.slice(0, 1000); // –£–¥–∞–ª—è–µ–º 1000 —Å–∞–º—ã—Ö —Å—Ç–∞—Ä—ã—Ö
      
      for (const [userId] of toRemove) {
        userCurrentBlock.delete(userId);
        userNavigationHistory.delete(userId);
        userLastActivity.delete(userId);
        completedQuizzes.delete(userId);
        userQuizStates.delete(userId);
      }
      console.log(`üßπ Aggressive cleanup: removed ${toRemove.length} users`);
    }
  }, 5 * 60 * 1000); // –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
  function createKeyboardWithBack(buttons, userId, currentBlockId) {
    const keyboard = [];
    const inlineKeyboard = [];
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 2 –≤ —Ä—è–¥
    if (buttons && buttons.length > 0) {
      for (let i = 0; i < buttons.length; i += 2) {
        const row = [];
        row.push({ text: buttons[i].text });
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä—É—é –∫–Ω–æ–ø–∫—É –≤ —Ä—è–¥, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
        if (i + 1 < buttons.length) {
          row.push({ text: buttons[i + 1].text });
        }
        
        keyboard.push(row);
      }
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –±–ª–æ–∫ –∏ –Ω–µ –∫–≤–∏–∑
    const currentBlock = blocks.find(b => b.id === currentBlockId);
    if (currentBlockId !== 'start' && currentBlock && currentBlock.type !== 'quiz') {
      const userHistory = userNavigationHistory.get(userId);
      if (userHistory && userHistory.length > 0) {
        keyboard.push([{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥' }]);
      }
    }
    
    return { keyboard, inlineKeyboard };
  }

  // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
  const connectionMap = new Map();
  console.log(`[BOOT] Creating connectionMap from ${connections.length} connections:`);
  connections.forEach(conn => {
    const key = `${String(conn.from.blockId)}_${String(conn.from.buttonId)}`;
    connectionMap.set(key, conn.to);
    console.log(`[BOOT] connectionMap: ${key} -> ${conn.to}`);
    console.log(`[BOOT] Connection details:`, JSON.stringify(conn, null, 2));
  });
  console.log(`[BOOT] Final connectionMap size: ${connectionMap.size}`);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
  bot.command('start', async (ctx) => {
    console.log('[DEBUG] /start ctx:', JSON.stringify(ctx, null, 2));
    console.log('[DEBUG] /start ctx.from:', ctx.from);
    await saveUserToMongo(ctx);
    
    // –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userId = ctx.from?.id;
    userNavigationHistory.delete(userId);
    
    // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–≤–∏–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    userQuizStates.delete(userId);
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–ª–æ–∫ –∫–∞–∫ —Å—Ç–∞—Ä—Ç–æ–≤—ã–π
    userCurrentBlock.set(userId, 'start');
    
    const startBlock = dialogMap.get('start');
    if (startBlock) {
      const { keyboard, inlineKeyboard } = createKeyboardWithBack(startBlock.buttons, userId, 'start');
      await sendMediaMessage(ctx, startBlock.message, startBlock.mediaFiles, keyboard, inlineKeyboard);
    } else {
      await ctx.reply('–ë–æ—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help
  bot.command('help', async (ctx) => {
    console.log('[DEBUG] /help ctx:', JSON.stringify(ctx, null, 2));
    console.log('[DEBUG] /help ctx.from:', ctx.from);
    await saveUserToMongo(ctx);
    const userId = ctx.from?.id;
    let currentBlockId = userCurrentBlock.get(userId);
    
    let helpMessage = 'ü§ñ **–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:**\n\n';
    helpMessage += 'üì± **–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**\n';
    helpMessage += '‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏\n';
    helpMessage += '‚Ä¢ –ù–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –≤–º–µ—Å—Ç–æ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞\n';
    helpMessage += '‚Ä¢ –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –≤–µ—Ä–Ω–µ—Ç –≤–∞—Å –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –±–ª–æ–∫—É\n\n';
    helpMessage += 'üîó **–ö–Ω–æ–ø–∫–∏ —Å —Å—Å—ã–ª–∫–∞–º–∏:**\n';
    helpMessage += '‚Ä¢ –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Å—ã–ª–∫—É, –æ–Ω–∞ –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ\n\n';
    helpMessage += 'üìä **–ö–≤–∏–∑—ã:**\n';
    helpMessage += '‚Ä¢ –û—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –≤—ã–±–∏—Ä–∞—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã\n';
    helpMessage += '‚Ä¢ –ó–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥—ã\n\n';
    helpMessage += 'üí° **–°–æ–≤–µ—Ç—ã:**\n';
    helpMessage += '‚Ä¢ –ù–µ –≤–≤–æ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤—Ä—É—á–Ω—É—é - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏\n';
    helpMessage += '‚Ä¢ –ï—Å–ª–∏ –∑–∞–±–ª—É–¥–∏–ª–∏—Å—å, –Ω–∞–∂–º–∏—Ç–µ /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –Ω–∞—á–∞–ª–æ';
    
    if (currentBlockId) {
      const currentBlock = dialogMap.get(currentBlockId);
      if (currentBlock) {
        const { keyboard, inlineKeyboard } = createKeyboardWithBack(currentBlock.buttons, userId, currentBlockId);
        
        await ctx.reply(helpMessage, {
          parse_mode: 'Markdown',
          reply_markup: {
            keyboard: keyboard,
            resize_keyboard: true
          }
        });
        return;
      }
    }
    
    await ctx.reply(helpMessage, { parse_mode: 'Markdown' });
  });

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ –∏–∑ –±–ª–æ–∫–æ–≤
  blocks.forEach(block => {
    if (block.command) {
      const commandName = block.command.replace(/^\//, '');
      bot.command(commandName, async (ctx) => {
        await saveUserToMongo(ctx);
        const userId = ctx.from?.id;
        userCurrentBlock.set(userId, block.id);
        const { keyboard, inlineKeyboard } = createKeyboardWithBack(block.buttons, userId, block.id);
        await sendMediaMessage(ctx, block.message, block.mediaFiles, keyboard, inlineKeyboard);
      });
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  bot.on('text', async (ctx) => {
    console.log('=== [EVENT] –ü–æ–ª—É—á–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ===');
    console.log('[EVENT] ctx.from:', ctx.from);
    
    try {
      const userId = ctx.from?.id;
      const messageText = ctx.message.text;
      
      console.log(`üîç DEBUG: Message: "${messageText}" from user ${userId}`);
      
      // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      if (!userId) {
        console.log('‚ùå No user ID, ignoring message');
        return;
      }
      
      if (!messageText || messageText.length < 1) {
        console.log('‚ùå Empty message, ignoring');
        return;
      }
      
      if (messageText.startsWith('/')) {
        console.log('‚ùå Command message, ignoring (handled by command handlers)');
        return;
      }
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ MongoDB
      try {
        await saveUserToMongo(ctx);
        console.log('‚úÖ User saved to MongoDB');
      } catch (error) {
        console.error('‚ùå Error saving user:', error);
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      }
      
      // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      userLastActivity.set(userId, Date.now());
      
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–ª–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      let currentBlockId = userCurrentBlock.get(userId);
      console.log(`üîç DEBUG: Current block: ${currentBlockId}`);
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      if (!currentBlockId) {
        console.log(`üîç DEBUG: Initializing new user ${userId}`);
        userCurrentBlock.set(userId, 'start');
        currentBlockId = 'start';
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        const startBlock = dialogMap.get('start');
        if (startBlock) {
          const { keyboard, inlineKeyboard } = createKeyboardWithBack(startBlock.buttons, userId, 'start');
          await sendMediaMessage(ctx, startBlock.message, startBlock.mediaFiles, keyboard, inlineKeyboard);
          console.log(`‚úÖ Welcome message sent to user ${userId}`);
          return;
        } else {
          await ctx.reply('–ë–æ—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
          return;
        }
      }
      
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–ª–æ–∫
      const currentBlock = dialogMap.get(currentBlockId);
      if (!currentBlock) {
        console.log(`‚ùå Current block ${currentBlockId} not found, resetting to start`);
            userCurrentBlock.set(userId, 'start');
            const startBlock = dialogMap.get('start');
            if (startBlock) {
              const { keyboard, inlineKeyboard } = createKeyboardWithBack(startBlock.buttons, userId, 'start');
              await sendMediaMessage(ctx, startBlock.message, startBlock.mediaFiles, keyboard, inlineKeyboard);
            }
            return;
          }
      
      console.log(`üîç DEBUG: Processing in block ${currentBlockId} (type: ${currentBlock.type})`);
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–≤–∏–∑–æ–≤ - –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∫–≤–∏–∑–µ
      if (currentBlock.type === 'quiz') {
        console.log(`üîç DEBUG: Processing quiz block`);
        console.log(`üîç DEBUG: Current block ID: ${currentBlockId}`);
        console.log(`üîç DEBUG: User current block: ${userCurrentBlock.get(userId)}`);
        console.log(`üîç DEBUG: Message text: "${messageText}"`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –±–ª–æ–∫–µ –∫–≤–∏–∑–∞
        if (userCurrentBlock.get(userId) !== currentBlockId) {
          console.log(`üîç DEBUG: User not in quiz block, current block: ${userCurrentBlock.get(userId)}, expected: ${currentBlockId}`);
          return;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–≤–∏–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        let quizState = userQuizStates.get(userId);
        
        // –ï—Å–ª–∏ –∫–≤–∏–∑ –Ω–µ –Ω–∞—á–∞—Ç, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –µ–≥–æ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
        if (!quizState) {
          console.log(`üîç DEBUG: Initializing quiz for user ${userId}`);
          quizState = {
            blockId: currentBlockId,
            currentQuestionIndex: 0,
            startTime: Date.now(),
            answers: [],
            isCompleted: false
          };
          userQuizStates.set(userId, quizState);
          
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
          const questions = currentBlock.questions || [];
          console.log(`üîç DEBUG: First quiz entry - questions count: ${questions.length}`);
          
          if (questions.length > 0) {
            const firstQuestion = questions[0];
            console.log(`üîç DEBUG: First question: ${firstQuestion.message}`);
            const { keyboard, inlineKeyboard } = createKeyboardWithBack(firstQuestion.buttons, userId, currentBlockId);
            await sendMediaMessage(ctx, firstQuestion.message, firstQuestion.mediaFiles, keyboard, inlineKeyboard);
            return;
          } else {
            console.log(`‚ùå No questions found in quiz block on first entry`);
            await ctx.reply('–ö–≤–∏–∑ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
            return;
          }
        }
        
        // –ï—Å–ª–∏ –∫–≤–∏–∑ —É–∂–µ –Ω–∞—á–∞—Ç, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
        if (quizState && !quizState.isCompleted) {
          console.log(`üîç DEBUG: Processing quiz answer for question ${quizState.currentQuestionIndex}`);
          console.log(`üîç DEBUG: Quiz state:`, quizState);
          
          const questions = currentBlock.questions || [];
          const currentQuestion = questions[quizState.currentQuestionIndex];
          
          console.log(`üîç DEBUG: Current question:`, currentQuestion);
          
          if (!currentQuestion) {
            console.log(`‚ùå Question ${quizState.currentQuestionIndex} not found`);
            await ctx.reply('–û—à–∏–±–∫–∞ –≤ –∫–≤–∏–∑–µ');
            return;
          }
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–≤–µ—á–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å
          const alreadyAnswered = quizState.answers.some(a => a.questionIndex === quizState.currentQuestionIndex);
          console.log(`üîç DEBUG: Already answered: ${alreadyAnswered}`);
          
          if (alreadyAnswered) {
            console.log(`‚ö†Ô∏è User already answered question ${quizState.currentQuestionIndex}, ignoring duplicate`);
              return;
          }
          
          // –ò—â–µ–º –∫–Ω–æ–ø–∫—É —Å –æ—Ç–≤–µ—Ç–æ–º
          const answerButton = currentQuestion.buttons.find(btn => btn.text === messageText);
          if (!answerButton) {
            console.log(`‚ùå Answer button not found for: ${messageText}`);
            await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞');
            return;
          }
          
          console.log(`üîç DEBUG: Answer button found:`, answerButton);
          
              // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
          quizState.answers.push({
            questionIndex: quizState.currentQuestionIndex,
            answer: messageText,
            isCorrect: answerButton.isCorrect
          });
          
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
          if (answerButton.isCorrect) {
            await ctx.reply('–ü—Ä–∞–≤–∏–ª—å–Ω–æ!');
            await new Promise(resolve => setTimeout(resolve, 1000));
          } else {
            await ctx.reply('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
            return;
          }
          
          // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
          quizState.currentQuestionIndex++;
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–µ–Ω –ª–∏ –∫–≤–∏–∑
          if (quizState.currentQuestionIndex >= questions.length) {
            // –ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω
            quizState.isCompleted = true;
            quizState.endTime = Date.now();
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ MongoDB
            const correctAnswers = quizState.answers.filter(a => a.isCorrect).length;
            const totalQuestions = questions.length;
            const percentage = Math.round((correctAnswers / totalQuestions) * 100);
            const completionTime = Math.round((quizState.endTime - quizState.startTime) / 1000);
            
            try {
              const quizStats = new QuizStats({
                botId: botId,
                userId: userId,
                blockId: currentBlockId,
                correctAnswers: correctAnswers,
                totalQuestions: totalQuestions,
                percentage: percentage,
                completionTime: completionTime,
                answers: quizState.answers,
                completedAt: new Date()
              });
              
              await quizStats.save();
              console.log(`‚úÖ Quiz stats saved to MongoDB for user ${userId}`);
            } catch (error) {
              console.error('‚ùå Error saving quiz stats:', error);
            }
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            const finalMessage = `${currentBlock.finalSuccessMessage || '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ –∫–≤–∏–∑!'}\n\nüìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: ${correctAnswers}/${totalQuestions}\nüìà –ü—Ä–æ—Ü–µ–Ω—Ç: ${percentage}%\n‚è±Ô∏è –í—Ä–µ–º—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è: ${completionTime} —Å–µ–∫`;
            
            await ctx.reply(finalMessage, { parse_mode: 'Markdown' });
            
            // –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –Ω–∞—á–∞–ª–æ
            if (currentBlock.returnToStartOnComplete) {
              console.log(`üîç DEBUG: Returning to start after quiz completion`);
              userCurrentBlock.set(userId, 'start');
              userQuizStates.delete(userId);
              userNavigationHistory.delete(userId);
              
              const startBlock = dialogMap.get('start');
              if (startBlock) {
                const { keyboard, inlineKeyboard } = createKeyboardWithBack(startBlock.buttons, userId, 'start');
                await sendMediaMessage(ctx, startBlock.message, startBlock.mediaFiles, keyboard, inlineKeyboard);
                console.log(`‚úÖ Returned to start block after quiz completion`);
              }
            }
            
            return;
                } else {
            // –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
            const nextQuestion = questions[quizState.currentQuestionIndex];
            const { keyboard, inlineKeyboard } = createKeyboardWithBack(nextQuestion.buttons, userId, currentBlockId);
            await sendMediaMessage(ctx, nextQuestion.message, nextQuestion.mediaFiles, keyboard, inlineKeyboard);
          }
          
          return;
        }
        
        // –ï—Å–ª–∏ –∫–≤–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        if (quizState && quizState.isCompleted) {
          console.log(`üîç DEBUG: Quiz already completed, returning to start`);
          await ctx.reply('–í—ã —É–∂–µ –ø—Ä–æ—à–ª–∏ —ç—Ç–æ—Ç –∫–≤–∏–∑! –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.');
          
          userCurrentBlock.set(userId, 'start');
          userQuizStates.delete(userId);
          userNavigationHistory.delete(userId);
          
          const startBlock = dialogMap.get('start');
          if (startBlock) {
            const { keyboard, inlineKeyboard } = createKeyboardWithBack(startBlock.buttons, userId, 'start');
            await sendMediaMessage(ctx, startBlock.message, startBlock.mediaFiles, keyboard, inlineKeyboard);
          }
          return;
        }
        
        return;
      }
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
      if (messageText === '‚¨ÖÔ∏è –ù–∞–∑–∞–¥') {
        console.log(`üîç DEBUG: Processing "–ù–∞–∑–∞–¥" button`);
        console.log(`üîç DEBUG: Current block type: ${currentBlock.type}`);
        console.log(`üîç DEBUG: User history:`, userNavigationHistory.get(userId));
        
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∫–≤–∏–∑–µ, –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–≤–∏–∑–∞
        if (currentBlock.type === 'quiz') {
          console.log(`üîç DEBUG: Exiting quiz, clearing quiz state`);
          userQuizStates.delete(userId);
        }
        
        const userHistory = userNavigationHistory.get(userId);
        
        if (userHistory && userHistory.length > 0) {
          const previousBlockId = userHistory.pop();
          console.log(`üîç DEBUG: Previous block ID: ${previousBlockId}`);
          const prevBlock = dialogMap.get(previousBlockId);
          
          if (prevBlock) {
            userCurrentBlock.set(userId, previousBlockId);
            userNavigationHistory.set(userId, userHistory);
            
            const { keyboard, inlineKeyboard } = createKeyboardWithBack(prevBlock.buttons, userId, previousBlockId);
            await sendMediaMessage(ctx, prevBlock.message, prevBlock.mediaFiles, keyboard, inlineKeyboard);
            console.log(`‚úÖ Navigated back to block ${previousBlockId}`);
            return;
          } else {
            console.log(`‚ùå Previous block ${previousBlockId} not found in dialogMap`);
          }
        } else {
          console.log(`‚ùå No user history found`);
        }
        
        await ctx.reply('–ù–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –±–ª–æ–∫–∞');
        return;
      }
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–≤–∏–∑–æ–≤
      if (currentBlock.type === 'quiz') {
        console.log(`üîç DEBUG: Processing quiz block`);
        
        // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–≤–∏–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        let quizState = userQuizStates.get(userId);
        
        // –ï—Å–ª–∏ –∫–≤–∏–∑ –Ω–µ –Ω–∞—á–∞—Ç, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –µ–≥–æ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
        if (!quizState) {
          console.log(`üîç DEBUG: Initializing quiz for user ${userId}`);
          quizState = {
            blockId: currentBlockId,
            currentQuestionIndex: 0,
            startTime: Date.now(),
            answers: [],
            isCompleted: false
          };
          userQuizStates.set(userId, quizState);
          
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
          const questions = currentBlock.questions || [];
          console.log(`üîç DEBUG: First quiz entry - questions count: ${questions.length}`);
          console.log(`üîç DEBUG: First quiz entry - questions:`, JSON.stringify(questions, null, 2));
          
          if (questions.length > 0) {
            const firstQuestion = questions[0];
            console.log(`üîç DEBUG: First question:`, JSON.stringify(firstQuestion, null, 2));
            const { keyboard, inlineKeyboard } = createKeyboardWithBack(firstQuestion.buttons, userId, currentBlockId);
            // –ù–ï –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–ª–æ–∫–∞ –∫–≤–∏–∑–∞, —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
            await sendMediaMessage(ctx, firstQuestion.message, firstQuestion.mediaFiles, keyboard, inlineKeyboard);
            return;
          } else {
            console.log(`‚ùå No questions found in quiz block on first entry`);
            await ctx.reply('–ö–≤–∏–∑ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
            return;
          }
        }
        
        // –ï—Å–ª–∏ –∫–≤–∏–∑ —É–∂–µ –Ω–∞—á–∞—Ç, –Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–Ω–æ–≤–∞ –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å
        if (quizState && !quizState.isCompleted) {
          console.log(`üîç DEBUG: Quiz already started, showing current question ${quizState.currentQuestionIndex}`);
          const questions = currentBlock.questions || [];
          const currentQuestion = questions[quizState.currentQuestionIndex];
          
          if (currentQuestion) {
            const { keyboard, inlineKeyboard } = createKeyboardWithBack(currentQuestion.buttons, userId, currentBlockId);
            await sendMediaMessage(ctx, currentQuestion.message, currentQuestion.mediaFiles, keyboard, inlineKeyboard);
            return;
          }
        }
        
        // –ï—Å–ª–∏ –∫–≤–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        if (quizState && quizState.isCompleted) {
          console.log(`üîç DEBUG: Quiz already completed, returning to start`);
          await ctx.reply('–í—ã —É–∂–µ –ø—Ä–æ—à–ª–∏ —ç—Ç–æ—Ç –∫–≤–∏–∑! –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.');
          
          // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                  userCurrentBlock.set(userId, 'start');
          userQuizStates.delete(userId);
                  
                  const startBlock = dialogMap.get('start');
                  if (startBlock) {
                    const { keyboard, inlineKeyboard } = createKeyboardWithBack(startBlock.buttons, userId, 'start');
            await sendMediaMessage(ctx, startBlock.message, startBlock.mediaFiles, keyboard, inlineKeyboard);
          }
          return;
        }
        
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å
        const questions = currentBlock.questions || [];
        console.log(`üîç DEBUG: Quiz questions count: ${questions.length}`);
        console.log(`üîç DEBUG: Quiz questions:`, JSON.stringify(questions, null, 2));
        
        if (questions.length === 0) {
          console.log(`‚ùå No questions found in quiz block`);
          await ctx.reply('–ö–≤–∏–∑ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
          return;
        }
        
        const currentQuestion = questions[quizState.currentQuestionIndex];
        if (!currentQuestion) {
          console.log(`‚ùå Question ${quizState.currentQuestionIndex} not found`);
          await ctx.reply('–û—à–∏–±–∫–∞ –≤ –∫–≤–∏–∑–µ');
                  return;
        }
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userAnswer = currentQuestion.buttons?.find(btn => btn.text === messageText);
        if (!userAnswer) {
          console.log(`‚ùå Answer "${messageText}" not found in question`);
          await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤');
                  return;
                }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–≤–µ—á–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å
        const alreadyAnswered = quizState.answers.some(a => a.questionIndex === quizState.currentQuestionIndex);
        console.log(`üîç DEBUG: Checking if already answered question ${quizState.currentQuestionIndex}`);
        console.log(`üîç DEBUG: Current answers:`, quizState.answers.map(a => ({ questionIndex: a.questionIndex, answer: a.answer })));
        console.log(`üîç DEBUG: Already answered: ${alreadyAnswered}`);
        
        if (alreadyAnswered) {
          console.log(`‚ö†Ô∏è User already answered question ${quizState.currentQuestionIndex}, ignoring duplicate`);
          return;
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
        quizState.answers.push({
          questionIndex: quizState.currentQuestionIndex,
          answer: messageText,
          isCorrect: userAnswer.isCorrect || false,
          timestamp: Date.now()
        });
        
        console.log(`üîç DEBUG: User answered: "${messageText}", correct: ${userAnswer.isCorrect}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
        if (userAnswer.isCorrect) {
          console.log(`‚úÖ Correct answer for question ${quizState.currentQuestionIndex}`);
          
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
          const successMessage = currentQuestion.successMessage || '–ü—Ä–∞–≤–∏–ª—å–Ω–æ!';
          await ctx.reply(successMessage);
          
          // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –≤–æ–ø—Ä–æ—Å–æ–º
          await new Promise(resolve => setTimeout(resolve, 1000));
          
          // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
          quizState.currentQuestionIndex++;
          
          if (quizState.currentQuestionIndex >= questions.length) {
            // –ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω
            console.log(`üéâ Quiz completed for user ${userId}`);
            quizState.isCompleted = true;
            quizState.completionTime = Date.now();
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ MongoDB
            try {
              const { QuizStats } = require('./models');
              const quizStats = new QuizStats({
                botId,
                userId,
                quizBlockId: currentBlockId,
                answers: quizState.answers,
                score: quizState.answers.filter(a => a.isCorrect).length,
                totalQuestions: questions.length,
                completionTime: quizState.completionTime - quizState.startTime,
                completedAt: new Date()
              });
              
              await quizStats.save();
              console.log(`‚úÖ Quiz stats saved to MongoDB for user ${userId}`);
            } catch (error) {
              console.error('‚ùå Error saving quiz stats:', error);
            }
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
            const correctAnswers = quizState.answers.filter(a => a.isCorrect).length;
            const totalQuestions = questions.length;
            const percentage = Math.round((correctAnswers / totalQuestions) * 100);
            const completionTime = Math.round((quizState.completionTime - quizState.startTime) / 1000);
            
            const finalMessage = `${currentBlock.finalSuccessMessage || '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ –∫–≤–∏–∑!'}\n\nüìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: ${correctAnswers}/${totalQuestions}\nüìà –ü—Ä–æ—Ü–µ–Ω—Ç: ${percentage}%\n‚è±Ô∏è –í—Ä–µ–º—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è: ${completionTime} —Å–µ–∫`;
            
            await ctx.reply(finalMessage, { parse_mode: 'Markdown' });
            
            // –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –Ω–∞—á–∞–ª–æ
            if (currentBlock.returnToStartOnComplete) {
              console.log(`üîç DEBUG: Returning to start after quiz completion`);
                userCurrentBlock.set(userId, 'start');
              userQuizStates.delete(userId);
              
              // –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
              userNavigationHistory.delete(userId);
              
                const startBlock = dialogMap.get('start');
                if (startBlock) {
                  const { keyboard, inlineKeyboard } = createKeyboardWithBack(startBlock.buttons, userId, 'start');
                  await sendMediaMessage(ctx, startBlock.message, startBlock.mediaFiles, keyboard, inlineKeyboard);
                console.log(`‚úÖ Returned to start block after quiz completion`);
              }
            }
            
            return;
          } else {
            // –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
            const nextQuestion = questions[quizState.currentQuestionIndex];
            const { keyboard, inlineKeyboard } = createKeyboardWithBack(nextQuestion.buttons, userId, currentBlockId);
            await sendMediaMessage(ctx, nextQuestion.message, nextQuestion.mediaFiles, keyboard, inlineKeyboard);
            return;
          }
        } else {
          // –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
          console.log(`‚ùå Wrong answer for question ${quizState.currentQuestionIndex}`);
          
          const failureMessage = currentQuestion.failureMessage || '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.';
          await ctx.reply(failureMessage);
          
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ—Ç –∂–µ –≤–æ–ø—Ä–æ—Å —Å–Ω–æ–≤–∞
          const { keyboard, inlineKeyboard } = createKeyboardWithBack(currentQuestion.buttons, userId, currentBlockId);
          await sendMediaMessage(ctx, currentQuestion.message, currentQuestion.mediaFiles, keyboard, inlineKeyboard);
                  return;
                }
              }
              
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö –±–ª–æ–∫–æ–≤ —Å –∫–Ω–æ–ø–∫–∞–º–∏
      console.log(`üîç DEBUG: Processing regular block with buttons`);
      console.log(`üîç DEBUG: Current block buttons:`, currentBlock.buttons?.map(b => ({ id: b.id, text: b.text })));
      console.log(`üîç DEBUG: Looking for button with text: "${messageText}"`);
      
      const button = currentBlock.buttons?.find(btn => btn.text === messageText);
      
      if (!button) {
        console.log(`‚ùå Button "${messageText}" not found in current block`);
        console.log(`‚ùå Available buttons:`, currentBlock.buttons?.map(b => b.text));
        await ctx.reply('–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –∫–Ω–æ–ø–∫–∞–º–∏.');
              return;
      }
      
      console.log(`‚úÖ Button "${messageText}" found, processing...`);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–Ω–æ–ø–∫–∞ —Å—Å—ã–ª–∫–æ–π
            if (button.url && button.url.trim() !== '') {
        console.log(`üîó Link button: ${button.url}`);
              await ctx.reply(`üîó ${button.text}`, {
                reply_markup: {
                  inline_keyboard: [[{ text: button.text, url: button.url.trim() }]]
                }
              });
              return;
            }
            
      // –û–±—ã—á–Ω–∞—è –∫–Ω–æ–ø–∫–∞ - –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –±–ª–æ–∫—É
      const connectionKey = `${String(currentBlockId)}_${String(button.id)}`;
      const nextBlockId = connectionMap.get(connectionKey);
      
      console.log(`üîç DEBUG: Connection key: ${connectionKey}`);
      console.log(`üîç DEBUG: Next block ID: ${nextBlockId}`);
      console.log(`üîç DEBUG: Available connections:`, Array.from(connectionMap.entries()));
      console.log(`üîç DEBUG: Available blocks:`, Array.from(dialogMap.keys()));
      
      if (!nextBlockId || !dialogMap.has(nextBlockId)) {
        console.log(`‚ùå No valid next block found`);
        console.log(`‚ùå Connection key "${connectionKey}" not found in connectionMap`);
        console.log(`‚ùå Next block ID "${nextBlockId}" not found in dialogMap`);
        await ctx.reply('–û—à–∏–±–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏: –Ω–µ –Ω–∞–π–¥–µ–Ω —Å–ª–µ–¥—É—é—â–∏–π –±–ª–æ–∫.');
                return;
              }
            
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –±–ª–æ–∫—É
              const nextBlock = dialogMap.get(nextBlockId);
              
      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –±–ª–æ–∫ –≤ –∏—Å—Ç–æ—Ä–∏—é (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–ª–µ–¥—É—é—â–∏–π –±–ª–æ–∫ –Ω–µ –∫–≤–∏–∑)
      if (nextBlock.type !== 'quiz') {
              let userHistory = userNavigationHistory.get(userId) || [];
        userHistory.push(currentBlockId);
              userNavigationHistory.set(userId, userHistory);
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –±–ª–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      userCurrentBlock.set(userId, nextBlockId);
      console.log(`üîç DEBUG: Updated user current block to: ${nextBlockId}`);
      
      // –ï—Å–ª–∏ —Å–ª–µ–¥—É—é—â–∏–π –±–ª–æ–∫ - –∫–≤–∏–∑, –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–≤–∏–∑–∞ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
      if (nextBlock.type === 'quiz') {
        userQuizStates.delete(userId);
        console.log(`üîç DEBUG: Skipping quiz block message, will show first question instead`);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å –∫–≤–∏–∑–∞
        const questions = nextBlock.questions || [];
        if (questions.length > 0) {
          const firstQuestion = questions[0];
          console.log(`üîç DEBUG: Showing first question: ${firstQuestion.message}`);
          const { keyboard, inlineKeyboard } = createKeyboardWithBack(firstQuestion.buttons, userId, nextBlockId);
          await sendMediaMessage(ctx, firstQuestion.message, firstQuestion.mediaFiles, keyboard, inlineKeyboard);
        } else {
          console.log(`‚ùå No questions found in quiz block`);
          await ctx.reply('–ö–≤–∏–∑ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
        }
      } else {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –±–ª–æ–∫ (—Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ-–∫–≤–∏–∑–æ–≤)
        const { keyboard, inlineKeyboard } = createKeyboardWithBack(nextBlock.buttons, userId, nextBlockId);
        await sendMediaMessage(ctx, nextBlock.message, nextBlock.mediaFiles, keyboard, inlineKeyboard);
      }
      
      console.log(`‚úÖ Successfully navigated to block ${nextBlockId}`);
      return;
    } catch (error) {
      console.error('‚ùå Critical error in message handler:', error);
      console.error('üìÑ Error stack:', error.stack);
      console.error('üìÑ Error details:', {
        message: error.message,
        name: error.name,
        code: error.code,
        response: error.response
      });
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ 403 (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞)
      if (error.response && error.response.error_code === 403) {
        console.log(`‚ö†Ô∏è User blocked the bot (403 error in message handler), ignoring`);
        return;
      }
      
      // –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      try {
        console.log(`üîç DEBUG: Attempting to send error message to user`);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /start –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞.');
        console.log(`üîç DEBUG: Error message sent successfully`);
      } catch (replyError) {
        console.error('‚ùå Error sending error message:', replyError);
        console.error('‚ùå Reply error details:', {
          message: replyError.message,
          name: replyError.name,
          code: replyError.code
        });
      }
      
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏ –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ
      try {
        cleanupOldUserData();
      } catch (cleanupError) {
        console.error('‚ùå Error during cleanup:', cleanupError);
      }
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª—é–±—ã—Ö callback_query (–Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏)
  bot.on('callback_query', async (ctx) => {
    console.log('[DEBUG] on callback_query ctx:', JSON.stringify(ctx, null, 2));
    console.log('[DEBUG] on callback_query ctx.from:', ctx.from);
    await saveUserToMongo(ctx);
    // ... —Ç–≤–æ—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ–Ω—é –∫–æ–º–∞–Ω–¥ Telegram
async function updateBotCommands(bot, blocks) {
  const commands = blocks
    .filter(block => block.command)
    .map(block => ({
      command: block.command.replace(/^\//, ''),
      description: (block.description || '').substring(0, 50)
    }))
    .sort((a, b) => a.command.localeCompare(b.command));
  if (commands.length > 0) {
    await bot.telegram.setMyCommands(commands);
    console.log('–ú–µ–Ω—é –∫–æ–º–∞–Ω–¥ Telegram –æ–±–Ω–æ–≤–ª–µ–Ω–æ:', commands);
  } else {
    await bot.telegram.setMyCommands([]);
    console.log('–ú–µ–Ω—é –∫–æ–º–∞–Ω–¥ Telegram –æ—á–∏—â–µ–Ω–æ');
  }
}

// –ü—Ä–∏–º–µ—Ä —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –≤—ã–¥–∞—á–∏ –±–æ–Ω—É—Å–∞ –∑–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç—å
async function checkAndRewardLoyalty(userId, thresholdKey) {
  let loyalty = await Loyalty.findOne({ userId });
  if (!loyalty) {
    loyalty = new Loyalty({ userId, rewards: {} });
  }
  if (!loyalty.rewards[thresholdKey]) {
    // –í—ã–¥–∞—ë–º –±–æ–Ω—É—Å (–æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è, –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∏ —Ç.–¥.)
    // ... —Ç–≤–æ—è –ª–æ–≥–∏–∫–∞ –≤—ã–¥–∞—á–∏ ...
    loyalty.rewards[thresholdKey] = true;
    await loyalty.save();
    return true; // –ë–æ–Ω—É—Å –≤—ã–¥–∞–Ω
  }
  return false; // –£–∂–µ –ø–æ–ª—É—á–∞–ª
}

async function startBot() {
  console.log('=== [BOOT] startBot –≤—ã–∑–≤–∞–Ω ===');
  const bot = new Telegraf(token);
  
  // –°—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
  let errorCount = 0;
  const maxErrors = 10;
  const errorWindow = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
  const handleCriticalError = (error) => {
    errorCount++;
    console.error(`‚ùå Critical bot error #${errorCount}:`, error);
    
    if (errorCount >= maxErrors) {
      console.error(`üö® Too many errors (${errorCount}), restarting bot...`);
      process.exit(1); // Docker –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    }
    
    // –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç
    setTimeout(() => {
      errorCount = Math.max(0, errorCount - 1);
    }, errorWindow);
  };
  
  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
  setupBotHandlers(bot, state.blocks, state.connections);

  // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é –∫–æ–º–∞–Ω–¥ Telegram
  await updateBotCommands(bot, state.blocks);
  
  // –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä –¥–ª—è –≤—Å–µ—Ö –∞–ø–¥–µ–π—Ç–æ–≤ Telegram (–≤—Å–µ–≥–¥–∞ –≤–∫–ª—é—á–µ–Ω)
  bot.use((ctx, next) => {
    console.log('=== [EVENT] Incoming update ===');
    console.log('[EVENT] Update type:', ctx.updateType);
    console.log('[EVENT] Update:', JSON.stringify(ctx.update, null, 2));
    console.log('[EVENT] Message text:', ctx.message?.text);
    console.log('[EVENT] User ID:', ctx.from?.id);
    return next();
  });
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –±–æ—Ç–∞
  bot.catch((err, ctx) => {
    console.error('‚ùå Bot error:', err);
    handleCriticalError(err);
  });
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram API
  try {
    console.log('=== [BOOT] –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram API... ===');
    const botInfo = await bot.telegram.getMe();
    console.log('=== [BOOT] Telegram API –¥–æ—Å—Ç—É–ø–µ–Ω, bot info:', botInfo);
  } catch (apiError) {
    console.error('=== [BOOT] –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API:', apiError);
    console.error('=== [BOOT] –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å api.telegram.org');
    process.exit(1);
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ç–µ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  try {
    console.log('=== [BOOT] –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ç–µ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏... ===');
    const { exec } = require('child_process');
    exec('ping -c 1 api.telegram.org', (error, stdout, stderr) => {
      if (error) {
        console.error('=== [BOOT] –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é:', error);
      } else {
        console.log('=== [BOOT] –°–µ—Ç—å —Ä–∞–±–æ—Ç–∞–µ—Ç, ping —É—Å–ø–µ—à–µ–Ω');
      }
    });
  } catch (networkError) {
    console.error('=== [BOOT] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ç–∏:', networkError);
  }

  // –û—á–∏—â–∞–µ–º webhook –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
  try {
    console.log('=== [BOOT] –û—á–∏—â–∞–µ–º webhook... ===');
    await bot.telegram.deleteWebhook();
    console.log('=== [BOOT] Webhook –æ—á–∏—â–µ–Ω ===');
  } catch (webhookError) {
    console.error('=== [BOOT] –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ webhook:', webhookError);
  }

  // –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ polling —Ä–µ–∂–∏–º–µ
  console.log('=== [BOOT] –ó–∞–ø—É—Å–∫–∞–µ–º bot.launch() –≤ polling —Ä–µ–∂–∏–º–µ... ===');
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
  console.log('=== [BOOT] –ó–∞–ø—É—Å–∫–∞–µ–º bot.launch() —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ... ===');
  
  try {
    await bot.launch();
    console.log('=== [BOOT] Bot started successfully in polling mode ===');
    console.log('Bot started successfully');
  } catch (launchError) {
    console.error('=== [BOOT] Bot launch failed:', launchError);
    console.error('=== [BOOT] –ü—Ä–æ–±—É–µ–º –∑–∞–ø—É—Å–∫ –±–µ–∑ await...');
    
    // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –∑–∞–ø—É—Å–∫
    bot.launch().then(() => {
      console.log('=== [BOOT] Bot started successfully (alternative) ===');
    }).catch((altError) => {
      console.error('=== [BOOT] Alternative launch failed:', altError);
    });
  }
    
    // –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –∑–∞–ø—É—Å–∫–µ
    errorCount = 0;
  
  // Graceful shutdown
  process.once('SIGINT', async () => {
    console.log('=== [SHUTDOWN] Received SIGINT, stopping bot gracefully ===');
    try {
      await bot.stop('SIGINT');
      console.log('=== [SHUTDOWN] Bot stopped successfully ===');
      process.exit(0);
  } catch (error) {
      console.error('=== [SHUTDOWN] Error stopping bot:', error);
    process.exit(1);
  }
  });
  
  process.once('SIGTERM', async () => {
    console.log('=== [SHUTDOWN] Received SIGTERM, stopping bot gracefully ===');
    try {
      await bot.stop('SIGTERM');
      console.log('=== [SHUTDOWN] Bot stopped successfully ===');
      process.exit(0);
    } catch (error) {
      console.error('=== [SHUTDOWN] Error stopping bot:', error);
      process.exit(1);
    }
  });
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
  process.on('uncaughtException', (error) => {
    console.error('‚ùå Uncaught Exception:', error);
    handleCriticalError(error);
  });
  
  process.on('unhandledRejection', (reason, promise) => {
    console.error('‚ùå Unhandled Rejection at:', promise, 'reason:', reason);
    handleCriticalError(reason);
  });
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
User.countDocuments({ botId }).then(count => {
  if (count === 0) {
    console.log(`[MongoDB] –ö–æ–ª–ª–µ–∫—Ü–∏—è users –ø—É—Å—Ç–∞ –¥–ª—è botId=${botId}`);
  } else {
    console.log(`[MongoDB] –í –∫–æ–ª–ª–µ–∫—Ü–∏–∏ users —É–∂–µ –µ—Å—Ç—å ${count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è botId=${botId}`);
  }
}).catch(err => {
  console.error('[MongoDB] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á—ë—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', err);
});

// –õ–æ–≥–∏—Ä—É–µ–º editorState –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
console.log('=== editorState –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ ===');
console.dir(state, { depth: 5 });
console.log('==============================');

console.log('=== [BOOT] botProcess.js –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è ===');

mongoose.connection.on('connected', () => {
  console.log('=== [BOOT] Mongoose connected ===');
});
mongoose.connection.on('error', (err) => {
  console.error('=== [BOOT] Mongoose connection error ===', err);
});

console.log('=== [BOOT] –ê—Ä–≥—É–º–µ–Ω—Ç—ã –∑–∞–ø—É—Å–∫–∞:', { token, botId, stateJsonLength: stateJson.length });

try {
  state = JSON.parse(stateJson);
  console.log('=== [BOOT] editorState —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω ===');
  console.log('=== [BOOT] blocks:', Array.isArray(state.blocks) ? state.blocks.length : '–Ω–µ—Ç');
  console.log('=== [BOOT] connections:', Array.isArray(state.connections) ? state.connections.length : '–Ω–µ—Ç');
} catch (error) {
  console.error('=== [BOOT] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ editorState:', error);
  process.exit(1);
}

startBot();