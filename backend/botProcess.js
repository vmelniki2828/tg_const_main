const { Telegraf } = require('telegraf');

// –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const [token, stateJson] = process.argv.slice(2);

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
if (!token || !stateJson) {
  console.error('Missing required arguments: token and state');
  process.exit(1);
}

// –ü–∞—Ä—Å–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
let state;
try {
  state = JSON.parse(stateJson);
  if (!state.blocks || !state.connections) {
    throw new Error('Invalid state format');
  }
} catch (error) {
  console.error('Failed to parse state:', error);
  process.exit(1);
}

// –ö—ç—à –¥–ª—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
const promoCodeCache = new Map();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è)
async function sendMediaMessage(ctx, message, mediaFiles, keyboard, inlineKeyboard = []) {
  const fs = require('fs');
  const path = require('path');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ mediaFiles —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –Ω–µ –ø—É—Å—Ç–æ–π
    if (!mediaFiles || !Array.isArray(mediaFiles) || mediaFiles.length === 0) {
      // –ï—Å–ª–∏ –Ω–µ—Ç –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
      const replyMarkup = {};
      if (keyboard.length > 0) {
        replyMarkup.keyboard = keyboard;
        replyMarkup.resize_keyboard = true;
      }
      if (inlineKeyboard.length > 0) {
        replyMarkup.inline_keyboard = inlineKeyboard;
      }
      
      await ctx.reply(message, {
        reply_markup: Object.keys(replyMarkup).length > 0 ? replyMarkup : undefined
      });
      return;
    }

    // –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –º–µ–¥–∏–∞—Ñ–∞–π–ª
    if (mediaFiles.length === 1) {
      const media = mediaFiles[0];
      const filePath = path.join(__dirname, 'uploads', media.filename);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
      if (!fs.existsSync(filePath)) {
        const replyMarkup = {};
        if (keyboard.length > 0) {
          replyMarkup.keyboard = keyboard;
          replyMarkup.resize_keyboard = true;
        }
        if (inlineKeyboard.length > 0) {
          replyMarkup.inline_keyboard = inlineKeyboard;
        }
        
        await ctx.reply(message, {
          reply_markup: Object.keys(replyMarkup).length > 0 ? replyMarkup : undefined
        });
        return;
      }

      const replyMarkup = {};
      if (keyboard.length > 0) {
        replyMarkup.keyboard = keyboard;
        replyMarkup.resize_keyboard = true;
      }
      if (inlineKeyboard.length > 0) {
        replyMarkup.inline_keyboard = inlineKeyboard;
      }

      const options = {
        caption: message,
        reply_markup: Object.keys(replyMarkup).length > 0 ? replyMarkup : undefined
      };

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –º–µ–¥–∏–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –º–µ—Ç–æ–¥–æ–º
      if (media.mimetype.startsWith('image/')) {
        await ctx.replyWithPhoto({ source: filePath }, options);
      } else if (media.mimetype.startsWith('video/')) {
        await ctx.replyWithVideo({ source: filePath }, options);
      } else if (media.mimetype.startsWith('audio/')) {
        await ctx.replyWithAudio({ source: filePath }, options);
      } else if (media.mimetype.startsWith('application/')) {
        await ctx.replyWithDocument({ source: filePath }, options);
      } else {
        await ctx.replyWithDocument({ source: filePath }, options);
      }
    } else {
      // –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã
      const mediaGroup = [];
      const validFiles = [];
      
      for (const media of mediaFiles) {
        const filePath = path.join(__dirname, 'uploads', media.filename);
        if (fs.existsSync(filePath)) {
          validFiles.push({ ...media, filePath });
        }
      }
      
      if (validFiles.length === 0) {
        const replyMarkup = {};
        if (keyboard.length > 0) {
          replyMarkup.keyboard = keyboard;
          replyMarkup.resize_keyboard = true;
        }
        if (inlineKeyboard.length > 0) {
          replyMarkup.inline_keyboard = inlineKeyboard;
        }
        
        await ctx.reply(message, {
          reply_markup: Object.keys(replyMarkup).length > 0 ? replyMarkup : undefined
        });
        return;
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã –≤ –≥—Ä—É–ø–ø—É
      for (let i = 0; i < validFiles.length; i++) {
        const media = validFiles[i];
        const mediaItem = {
          type: media.mimetype.startsWith('image/') ? 'photo' : 
                media.mimetype.startsWith('video/') ? 'video' : 
                media.mimetype.startsWith('audio/') ? 'audio' : 'document',
          media: { source: media.filePath }
        };
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å —Ç–æ–ª—å–∫–æ –∫ –ø–µ—Ä–≤–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É
        if (i === 0) {
          mediaItem.caption = message;
        }
        
        mediaGroup.push(mediaItem);
      }
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É
      await ctx.replyWithMediaGroup(mediaGroup);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –æ—Ç–¥–µ–ª—å–Ω–æ
      if (keyboard.length > 0 || inlineKeyboard.length > 0) {
        const replyMarkup = {};
        if (keyboard.length > 0) {
          replyMarkup.keyboard = keyboard;
          replyMarkup.resize_keyboard = true;
        }
        if (inlineKeyboard.length > 0) {
          replyMarkup.inline_keyboard = inlineKeyboard;
        }
        
        await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', { reply_markup: replyMarkup });
      }
    }
  } catch (error) {
    console.error('Error sending media message:', error);
    // Fallback –∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
    const replyMarkup = {};
    if (keyboard.length > 0) {
      replyMarkup.keyboard = keyboard;
      replyMarkup.resize_keyboard = true;
    }
    if (inlineKeyboard.length > 0) {
      replyMarkup.inline_keyboard = inlineKeyboard;
    }
    
    await ctx.reply(message, {
      reply_markup: Object.keys(replyMarkup).length > 0 ? replyMarkup : undefined
    });
  }
}

function setupBotHandlers(bot, blocks, connections) {
  // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É –¥–∏–∞–ª–æ–≥–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
  const dialogMap = new Map();
  blocks.forEach(block => {
    dialogMap.set(block.id, {
      message: block.message,
      buttons: block.buttons || [],
      mediaFiles: block.mediaFiles || [],
      type: block.type
    });
  });

  // –ö–∞—Ä—Ç–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  const userNavigationHistory = new Map();
  
  // –ö–∞—Ä—Ç–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –±–ª–æ–∫–∞ –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const userCurrentBlock = new Map();
  
  // –ö–∞—Ä—Ç–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–≤–∏–∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const userQuizStates = new Map();
  
  // –ö–∞—Ä—Ç–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∫–≤–∏–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  const completedQuizzes = new Map();

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
  function createKeyboardWithBack(buttons, userId, currentBlockId) {
    const keyboard = [];
    const inlineKeyboard = [];
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
    if (buttons && buttons.length > 0) {
      buttons.forEach(btn => {
        keyboard.push([{ text: btn.text }]);
      });
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –±–ª–æ–∫ –∏ –Ω–µ –∫–≤–∏–∑
    const currentBlock = blocks.find(b => b.id === currentBlockId);
    if (currentBlockId !== 'start' && currentBlock && currentBlock.type !== 'quiz') {
      const userHistory = userNavigationHistory.get(userId);
      if (userHistory && userHistory.length > 0) {
        keyboard.push([{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥' }]);
      }
    }
    
    return { keyboard, inlineKeyboard };
  }

  // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
  const connectionMap = new Map();
  connections.forEach(conn => {
    const key = `${conn.from.blockId}_${conn.from.buttonId}`;
    connectionMap.set(key, conn.to);
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
  bot.command('start', async (ctx) => {
    const userId = ctx.from.id;
    
    // –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    userNavigationHistory.delete(userId);
    
    // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–≤–∏–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    userQuizStates.delete(userId);
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–ª–æ–∫ –∫–∞–∫ —Å—Ç–∞—Ä—Ç–æ–≤—ã–π
    userCurrentBlock.set(userId, 'start');
    
    const startBlock = dialogMap.get('start');
    if (startBlock) {
      const { keyboard, inlineKeyboard } = createKeyboardWithBack(startBlock.buttons, userId, 'start');
      await sendMediaMessage(ctx, startBlock.message, startBlock.mediaFiles, keyboard, inlineKeyboard);
    } else {
      await ctx.reply('–ë–æ—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help
  bot.command('help', async (ctx) => {
    const userId = ctx.from.id;
    let currentBlockId = userCurrentBlock.get(userId);
    
    let helpMessage = 'ü§ñ **–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:**\n\n';
    helpMessage += 'üì± **–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**\n';
    helpMessage += '‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏\n';
    helpMessage += '‚Ä¢ –ù–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –≤–º–µ—Å—Ç–æ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞\n';
    helpMessage += '‚Ä¢ –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –≤–µ—Ä–Ω–µ—Ç –≤–∞—Å –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –±–ª–æ–∫—É\n\n';
    helpMessage += 'üîó **–ö–Ω–æ–ø–∫–∏ —Å —Å—Å—ã–ª–∫–∞–º–∏:**\n';
    helpMessage += '‚Ä¢ –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Å—ã–ª–∫—É, –æ–Ω–∞ –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ\n\n';
    helpMessage += 'üìä **–ö–≤–∏–∑—ã:**\n';
    helpMessage += '‚Ä¢ –û—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –≤—ã–±–∏—Ä–∞—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã\n';
    helpMessage += '‚Ä¢ –ó–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥—ã\n\n';
    helpMessage += 'üí° **–°–æ–≤–µ—Ç—ã:**\n';
    helpMessage += '‚Ä¢ –ù–µ –≤–≤–æ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤—Ä—É—á–Ω—É—é - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏\n';
    helpMessage += '‚Ä¢ –ï—Å–ª–∏ –∑–∞–±–ª—É–¥–∏–ª–∏—Å—å, –Ω–∞–∂–º–∏—Ç–µ /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –Ω–∞—á–∞–ª–æ';
    
    if (currentBlockId) {
      const currentBlock = dialogMap.get(currentBlockId);
      if (currentBlock) {
        const { keyboard, inlineKeyboard } = createKeyboardWithBack(currentBlock.buttons, userId, currentBlockId);
        
        await ctx.reply(helpMessage, {
          parse_mode: 'Markdown',
          reply_markup: {
            keyboard: keyboard,
            resize_keyboard: true
          }
        });
        return;
      }
    }
    
    await ctx.reply(helpMessage, { parse_mode: 'Markdown' });
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  bot.on('text', async (ctx) => {
    const messageText = ctx.message.text;
    const userId = ctx.from.id;
    let currentBlockId = userCurrentBlock.get(userId);
    
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–º–µ–Ω–µ–µ 2 —Å–∏–º–≤–æ–ª–æ–≤)
    if (messageText.length < 2) {
      return;
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
    if (messageText === '‚¨ÖÔ∏è –ù–∞–∑–∞–¥') {
      const userHistory = userNavigationHistory.get(userId);
      if (userHistory && userHistory.length > 0) {
        const previousBlockId = userHistory.pop();
        const prevBlock = dialogMap.get(previousBlockId);
        
        if (prevBlock) {
          const { keyboard, inlineKeyboard } = createKeyboardWithBack(prevBlock.buttons, userId, previousBlockId);
          await sendMediaMessage(ctx, prevBlock.message, prevBlock.mediaFiles, keyboard, inlineKeyboard);
          userCurrentBlock.set(userId, previousBlockId);
          userNavigationHistory.set(userId, userHistory);
          return;
        }
      }
      await ctx.reply('–ù–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –±–ª–æ–∫–∞');
      return;
    }
    
    // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–≤–∏–∑–æ–≤
    
    if (currentBlockId) {
      const currentBlock = blocks.find(b => b.id === currentBlockId);
      
      if (currentBlock && currentBlock.type === 'quiz') {
        const userQuizState = userQuizStates.get(userId) || {
          currentQuestionIndex: 0,
          answers: [],
          startTime: Date.now()
        };
        
        const currentQuestion = currentBlock.questions[userQuizState.currentQuestionIndex];
        
        if (currentQuestion) {
          const selectedButton = currentQuestion.buttons.find(btn => btn.text === messageText);
          
          if (selectedButton) {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
            userQuizState.answers.push({
              questionIndex: userQuizState.currentQuestionIndex,
              selectedAnswer: messageText,
              isCorrect: selectedButton.isCorrect
            });
            
            // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∞–µ–º –∫–≤–∏–∑
            if (userQuizState.currentQuestionIndex < currentBlock.questions.length - 1) {
              userQuizState.currentQuestionIndex++;
              userQuizStates.set(userId, userQuizState);
              
              const nextQuestion = currentBlock.questions[userQuizState.currentQuestionIndex];
              const keyboard = nextQuestion.buttons.map(btn => [{ text: btn.text }]);
              
              await sendMediaMessage(ctx, nextQuestion.message, nextQuestion.mediaFiles || [], keyboard, []);
              return;
            } else {
              // –ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
              const correctAnswers = userQuizState.answers.filter(answer => answer.isCorrect).length;
              const totalQuestions = currentBlock.questions.length;
              const successRate = (correctAnswers / totalQuestions) * 100;
              
              let resultMessage = `üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–≤–∏–∑–∞:\n`;
              resultMessage += `‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: ${correctAnswers} –∏–∑ ${totalQuestions}\n`;
              resultMessage += `üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏: ${successRate.toFixed(1)}%\n\n`;
              
              // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∫–∞–∂–¥–æ–º—É –≤–æ–ø—Ä–æ—Å—É
              userQuizState.answers.forEach((answer, index) => {
                resultMessage += `${answer.isCorrect ? '‚úÖ' : '‚ùå'} –í–æ–ø—Ä–æ—Å ${index + 1}: ${answer.isCorrect ? '–ü—Ä–∞–≤–∏–ª—å–Ω–æ' : '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ'}\n`;
              });
              
              resultMessage += '\n';
              
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å (100% –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è)
              const isSuccessful = successRate === 100;
              
              if (isSuccessful) {
                resultMessage += `üéâ ${currentBlock.finalSuccessMessage || '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ –∫–≤–∏–∑!'}\n`;
                
                // –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥
                try {
                  const { getRandomPromoCode } = require('./promoCodeManager.js');
                  const promoCode = await getRandomPromoCode(currentBlock.id);
                  if (promoCode) {
                    resultMessage += `üéÅ –í–∞—à –ø—Ä–æ–º–æ–∫–æ–¥: ${promoCode} CUR ${currentRequest.s_currency}\n`;
                  } else {
                    resultMessage += `‚ö†Ô∏è –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–º–æ–∫–æ–¥—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å\n`;
                  }
                } catch (error) {
                  console.error('Error getting promo code:', error);
                  resultMessage += `‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞\n`;
                }
              } else {
                resultMessage += `‚ùå ${currentBlock.finalFailureMessage || '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–µ –ø—Ä–æ—à–ª–∏ –∫–≤–∏–∑. –ù—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã.'}\n`;
              }
              
              // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
              setImmediate(async () => {
                try {
                  const fs = require('fs');
                  const path = require('path');
                  const statsPath = path.join(__dirname, 'quizStats.json');
                  
                  let stats = {};
                  if (fs.existsSync(statsPath)) {
                    const fileContent = fs.readFileSync(statsPath, 'utf8');
                    stats = JSON.parse(fileContent);
                  }
                  
                  if (!stats[currentBlock.id]) {
                    stats[currentBlock.id] = {
                      totalAttempts: 0,
                      successfulCompletions: 0,
                      failedAttempts: 0,
                      userAttempts: []
                    };
                  }
                  
                  const quizStats = stats[currentBlock.id];
                  quizStats.totalAttempts++;
                  
                  if (isSuccessful) {
                    quizStats.successfulCompletions++;
                  } else {
                    quizStats.failedAttempts++;
                  }
                  
                  const userAttempt = {
                    userId: userId,
                    userName: ctx.from.first_name || ctx.from.username || `User ${userId}`,
                    timestamp: Date.now(),
                    success: isSuccessful,
                    score: correctAnswers,
                    duration: Date.now() - userQuizState.startTime
                  };
                  
                  quizStats.userAttempts.push(userAttempt);
                  
                  const statsJson = JSON.stringify(stats, null, 2);
                  fs.writeFileSync(statsPath, statsJson);
                } catch (error) {
                  console.error('Error saving quiz stats:', error);
                }
              });
              
              // –û—Ç–º–µ—á–∞–µ–º –∫–≤–∏–∑ –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
              let userCompletedQuizzes = completedQuizzes.get(userId) || new Set();
              userCompletedQuizzes.add(currentBlock.id);
              completedQuizzes.set(userId, userCompletedQuizzes);
              
              // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–≤–∏–∑–∞ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –±–ª–æ–∫
              userQuizStates.delete(userId);
              userCurrentBlock.set(userId, 'start');
              
              // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å—Ç–∞—Ä—Ç–æ–≤–æ–º—É –±–ª–æ–∫—É
              const startBlock = dialogMap.get('start');
              if (startBlock) {
                const { keyboard, inlineKeyboard } = createKeyboardWithBack(startBlock.buttons, userId, 'start');
                
                // –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–≤–∏–∑–∞
                await ctx.reply(resultMessage);
                
                // –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –±–ª–æ–∫–∞
                const replyMarkup = {};
                if (keyboard.length > 0) {
                  replyMarkup.keyboard = keyboard;
                  replyMarkup.resize_keyboard = true;
                }
                if (inlineKeyboard.length > 0) {
                  replyMarkup.inline_keyboard = inlineKeyboard;
                }
                
                await ctx.reply(startBlock.message, {
                  reply_markup: Object.keys(replyMarkup).length > 0 ? replyMarkup : undefined
                });
              } else {
                await ctx.reply(resultMessage);
              }
              
              return;
            }
          }
        }
      }
    }
    
    // –û–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ (–Ω–µ –∫–≤–∏–∑)
    let found = false;
    
    if (currentBlockId) {
      const currentBlock = blocks.find(b => b.id === currentBlockId);
      if (currentBlock) {
        const button = (currentBlock.buttons || []).find(btn => btn.text === messageText);
        if (button) {
          console.log(`Found button "${messageText}" in current block ${currentBlockId}`);
          console.log(`Button details:`, button);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–Ω–æ–ø–∫–∞ —Å—Å—ã–ª–∫–æ–π
          if (button.url && button.url.trim() !== '') {
            console.log(`Button "${messageText}" is a link: ${button.url}`);
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º inline-–∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Å—Å—ã–ª–∫–∏ –≤ –±—Ä–∞—É–∑–µ—Ä–µ
            await ctx.reply(`üîó ${button.text}`, {
              reply_markup: {
                inline_keyboard: [[{ text: button.text, url: button.url.trim() }]]
              }
            });
            return;
          }
          
          const nextBlockId = connectionMap.get(`${currentBlockId}_${button.id}`);
          if (nextBlockId && dialogMap.has(nextBlockId)) {
            const nextBlock = dialogMap.get(nextBlockId);
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –±–ª–æ–∫ –≤ –∏—Å—Ç–æ—Ä–∏—é –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            let userHistory = userNavigationHistory.get(userId) || [];
            userHistory.push(currentBlockId);
            userNavigationHistory.set(userId, userHistory);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –±–ª–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            userCurrentBlock.set(userId, nextBlockId);
            
            const { keyboard, inlineKeyboard } = createKeyboardWithBack(nextBlock.buttons, userId, nextBlockId);
            
            await sendMediaMessage(ctx, nextBlock.message, nextBlock.mediaFiles, keyboard, inlineKeyboard);
            found = true;
          }
        }
      }
    }
    
    // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ —Ç–µ–∫—É—â–µ–º –±–ª–æ–∫–µ, –∏—â–µ–º –≤–æ –≤—Å–µ—Ö –±–ª–æ–∫–∞—Ö (fallback)
    if (!found) {
      for (const block of blocks) {
        const button = (block.buttons || []).find(btn => btn.text === messageText);
        if (button) {
          console.log(`Found button "${messageText}" in block ${block.id} (fallback)`);
          console.log(`Button details:`, button);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–Ω–æ–ø–∫–∞ —Å—Å—ã–ª–∫–æ–π
          if (button.url && button.url.trim() !== '') {
            console.log(`Button "${messageText}" is a link: ${button.url}`);
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º inline-–∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Å—Å—ã–ª–∫–∏ –≤ –±—Ä–∞—É–∑–µ—Ä–µ
            await ctx.reply(`üîó ${button.text}`, {
              reply_markup: {
                inline_keyboard: [[{ text: button.text, url: button.url.trim() }]]
              }
            });
            return;
          }
          
          const nextBlockId = connectionMap.get(`${block.id}_${button.id}`);
          if (nextBlockId && dialogMap.has(nextBlockId)) {
            const nextBlock = dialogMap.get(nextBlockId);
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –±–ª–æ–∫ –≤ –∏—Å—Ç–æ—Ä–∏—é –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            let userHistory = userNavigationHistory.get(userId) || [];
            userHistory.push(block.id);
            userNavigationHistory.set(userId, userHistory);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –±–ª–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            userCurrentBlock.set(userId, nextBlockId);
            
            const { keyboard, inlineKeyboard } = createKeyboardWithBack(nextBlock.buttons, userId, nextBlockId);
            
            await sendMediaMessage(ctx, nextBlock.message, nextBlock.mediaFiles, keyboard, inlineKeyboard);
            return;
          }
        }
      }
    }
    
    // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–ª–æ–∫ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    if (currentBlockId) {
      const currentBlock = dialogMap.get(currentBlockId);
      if (currentBlock) {
        const { keyboard, inlineKeyboard } = createKeyboardWithBack(currentBlock.buttons, userId, currentBlockId);
        
        await ctx.reply('‚ùì –Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:', {
          reply_markup: {
            keyboard: keyboard,
            resize_keyboard: true
          }
        });
        return;
      }
    }
    
    // –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –±–ª–æ–∫, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await ctx.reply('‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.');
  });
}

async function startBot() {
  const bot = new Telegraf(token);
  
  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
  setupBotHandlers(bot, state.blocks, state.connections);
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
  try {
    await bot.launch();
    console.log('Bot started successfully');
  } catch (error) {
    console.error('Failed to start bot:', error);
    process.exit(1);
  }
  
  // Graceful shutdown
  process.once('SIGINT', () => bot.stop('SIGINT'));
  process.once('SIGTERM', () => bot.stop('SIGTERM'));
}

startBot();
