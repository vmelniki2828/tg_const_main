const { Telegraf } = require('telegraf');
const { User, QuizStats, PromoCode, Loyalty, LoyaltyConfig, LoyaltyPromoCode } = require('./models');
const mongoose = require('mongoose');
const MONGO_URI = process.env.MONGO_URI || 'mongodb://157.230.20.252:27017/tg_const_main';
mongoose.connect(MONGO_URI, { 
  useNewUrlParser: true, 
  useUnifiedTopology: true,
  serverSelectionTimeoutMS: 5000,
  socketTimeoutMS: 45000
})
  .then(() => console.log('‚úÖ MongoDB connected (botProcess.js)'))
  .catch(err => {
    console.error('‚ùå MongoDB connection error (botProcess.js):', err);
    console.error('‚ùå Retrying MongoDB connection in 5 seconds...');
    setTimeout(() => {
      mongoose.connect(MONGO_URI, { 
        useNewUrlParser: true, 
        useUnifiedTopology: true,
        serverSelectionTimeoutMS: 5000,
        socketTimeoutMS: 45000
      }).catch(retryErr => {
        console.error('‚ùå MongoDB retry failed:', retryErr);
    process.exit(1);
      });
    }, 5000);
  });

// –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const [token, botId, stateJson] = process.argv.slice(2);

if (!token || !botId || !stateJson) {
  console.error('Missing required arguments: token, botId, stateJson');
  process.exit(1);
}

// –ü–∞—Ä—Å–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
let state;
try {
  state = JSON.parse(stateJson);
  if (!state.blocks || !state.connections) {
    throw new Error('Invalid state format');
  }
} catch (error) {
  console.error('Failed to parse state:', error);
  process.exit(1);
}

// –ö—ç—à –¥–ª—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
const promoCodeCache = new Map();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è)
async function sendMediaMessage(ctx, message, mediaFiles, keyboard, inlineKeyboard = []) {
  const fs = require('fs');
  const path = require('path');
  
  console.log(`üîç DEBUG: sendMediaMessage called with:`);
  console.log(`  - message: ${message.substring(0, 50)}...`);
  console.log(`  - mediaFiles: ${mediaFiles ? mediaFiles.length : 0} files`);
  console.log(`  - keyboard: ${keyboard.length} rows`);
  console.log(`  - inlineKeyboard: ${inlineKeyboard.length} rows`);
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ mediaFiles —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –Ω–µ –ø—É—Å—Ç–æ–π
    if (!mediaFiles || !Array.isArray(mediaFiles) || mediaFiles.length === 0) {
      console.log(`üîç DEBUG: No media files, sending text only`);
      // –ï—Å–ª–∏ –Ω–µ—Ç –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
      const replyMarkup = {};
      if (keyboard.length > 0) {
        replyMarkup.keyboard = keyboard;
        replyMarkup.resize_keyboard = true;
      }
      if (inlineKeyboard.length > 0) {
        replyMarkup.inline_keyboard = inlineKeyboard;
      }
      
      console.log(`üîç DEBUG: Sending text message with reply markup:`, JSON.stringify(replyMarkup));
      
      // –î–æ–±–∞–≤–ª—è–µ–º timeout –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
      const sendPromise = ctx.reply(message, {
        reply_markup: Object.keys(replyMarkup).length > 0 ? replyMarkup : undefined
      });
      
      // Timeout 10 —Å–µ–∫—É–Ω–¥
      const timeoutPromise = new Promise((_, reject) => {
        setTimeout(() => reject(new Error('Message send timeout')), 10000);
      });
      
      await Promise.race([sendPromise, timeoutPromise]);
      console.log(`üîç DEBUG: Text message sent successfully`);
      return;
    }

    // –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –º–µ–¥–∏–∞—Ñ–∞–π–ª
    if (mediaFiles.length === 1) {
      console.log(`üîç DEBUG: Single media file detected`);
      const media = mediaFiles[0];
      const filePath = path.join(__dirname, 'uploads', media.filename);
      
      console.log(`üîç DEBUG: Media file path: ${filePath}`);
      console.log(`üîç DEBUG: File exists: ${fs.existsSync(filePath)}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
      if (!fs.existsSync(filePath)) {
        console.log(`üîç DEBUG: Media file not found, sending text only`);
        const replyMarkup = {};
        if (keyboard.length > 0) {
          replyMarkup.keyboard = keyboard;
          replyMarkup.resize_keyboard = true;
        }
        if (inlineKeyboard.length > 0) {
          replyMarkup.inline_keyboard = inlineKeyboard;
        }
        
        console.log(`üîç DEBUG: Sending fallback text message`);
        
        // –î–æ–±–∞–≤–ª—è–µ–º timeout –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        const sendPromise = ctx.reply(message, {
          reply_markup: Object.keys(replyMarkup).length > 0 ? replyMarkup : undefined
        });
        
        // Timeout 10 —Å–µ–∫—É–Ω–¥
        const timeoutPromise = new Promise((_, reject) => {
          setTimeout(() => reject(new Error('Message send timeout')), 10000);
        });
        
        await Promise.race([sendPromise, timeoutPromise]);
        console.log(`üîç DEBUG: Fallback text message sent successfully`);
        return;
      }

      const replyMarkup = {};
      if (keyboard.length > 0) {
        replyMarkup.keyboard = keyboard;
        replyMarkup.resize_keyboard = true;
      }
      if (inlineKeyboard.length > 0) {
        replyMarkup.inline_keyboard = inlineKeyboard;
      }

      const options = {
        caption: message,
        reply_markup: Object.keys(replyMarkup).length > 0 ? replyMarkup : undefined
      };

      console.log(`üîç DEBUG: Sending media with options:`, JSON.stringify(options));

      // –î–æ–±–∞–≤–ª—è–µ–º timeout –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞
      const sendMediaPromise = (async () => {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –º–µ–¥–∏–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –º–µ—Ç–æ–¥–æ–º
        if (media.mimetype.startsWith('image/')) {
          console.log(`üîç DEBUG: Sending as photo`);
          return await ctx.replyWithPhoto({ source: filePath }, options);
        } else if (media.mimetype.startsWith('video/')) {
          console.log(`üîç DEBUG: Sending as video`);
          return await ctx.replyWithVideo({ source: filePath }, options);
        } else if (media.mimetype.startsWith('audio/')) {
          console.log(`üîç DEBUG: Sending as audio`);
          return await ctx.replyWithAudio({ source: filePath }, options);
        } else if (media.mimetype.startsWith('application/')) {
          console.log(`üîç DEBUG: Sending as document`);
          return await ctx.replyWithDocument({ source: filePath }, options);
        } else {
          console.log(`üîç DEBUG: Sending as document (fallback)`);
          return await ctx.replyWithDocument({ source: filePath }, options);
        }
      })();
      
      // Timeout 15 —Å–µ–∫—É–Ω–¥ –¥–ª—è –º–µ–¥–∏–∞
      const timeoutPromise = new Promise((_, reject) => {
        setTimeout(() => reject(new Error('Media send timeout')), 15000);
      });
      
      await Promise.race([sendMediaPromise, timeoutPromise]);
      console.log(`üîç DEBUG: Media message sent successfully`);
    } else {
      console.log(`üîç DEBUG: Multiple media files detected`);
      // –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã
      const mediaGroup = [];
      const validFiles = [];
      
      for (const media of mediaFiles) {
        const filePath = path.join(__dirname, 'uploads', media.filename);
        console.log(`üîç DEBUG: Checking media file: ${filePath} (exists: ${fs.existsSync(filePath)})`);
        if (fs.existsSync(filePath)) {
          validFiles.push({ ...media, filePath });
        }
      }
      
      console.log(`üîç DEBUG: Valid files found: ${validFiles.length}`);
      
      if (validFiles.length === 0) {
        console.log(`üîç DEBUG: No valid media files, sending text only`);
        const replyMarkup = {};
        if (keyboard.length > 0) {
          replyMarkup.keyboard = keyboard;
          replyMarkup.resize_keyboard = true;
        }
        if (inlineKeyboard.length > 0) {
          replyMarkup.inline_keyboard = inlineKeyboard;
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º timeout –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        const sendPromise = ctx.reply(message, {
          reply_markup: Object.keys(replyMarkup).length > 0 ? replyMarkup : undefined
        });
        
        // Timeout 10 —Å–µ–∫—É–Ω–¥
        const timeoutPromise = new Promise((_, reject) => {
          setTimeout(() => reject(new Error('Message send timeout')), 10000);
        });
        
        await Promise.race([sendPromise, timeoutPromise]);
        console.log(`üîç DEBUG: Fallback text message sent successfully`);
        return;
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã –≤ –≥—Ä—É–ø–ø—É
      for (const media of validFiles) {
        const mediaInput = { source: media.filePath };
        
        if (media.mimetype.startsWith('image/')) {
          mediaGroup.push({ type: 'photo', media: mediaInput });
        } else if (media.mimetype.startsWith('video/')) {
          mediaGroup.push({ type: 'video', media: mediaInput });
        } else if (media.mimetype.startsWith('audio/')) {
          mediaGroup.push({ type: 'audio', media: mediaInput });
        } else {
          mediaGroup.push({ type: 'document', media: mediaInput });
        }
      }
      
      const replyMarkup = {};
      if (keyboard.length > 0) {
        replyMarkup.keyboard = keyboard;
        replyMarkup.resize_keyboard = true;
      }
      if (inlineKeyboard.length > 0) {
        replyMarkup.inline_keyboard = inlineKeyboard;
      }
      
      console.log(`üîç DEBUG: Sending media group with ${mediaGroup.length} files`);
      
      // –î–æ–±–∞–≤–ª—è–µ–º timeout –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã
      const sendGroupPromise = ctx.replyWithMediaGroup(mediaGroup, {
        caption: message,
        reply_markup: Object.keys(replyMarkup).length > 0 ? replyMarkup : undefined
      });
      
      // Timeout 20 —Å–µ–∫—É–Ω–¥ –¥–ª—è –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã
      const timeoutPromise = new Promise((_, reject) => {
        setTimeout(() => reject(new Error('Media group send timeout')), 20000);
      });
      
      await Promise.race([sendGroupPromise, timeoutPromise]);
      console.log(`üîç DEBUG: Media group sent successfully`);
    }
  } catch (error) {
    console.error('Error sending media message:', error);
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ 403 (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞)
    if (error.response && error.response.error_code === 403) {
      console.log(`‚ö†Ô∏è User blocked the bot (403 error), ignoring`);
      return;
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ timeout –æ—à–∏–±–æ–∫
    if (error.message && error.message.includes('timeout')) {
      console.log(`‚ö†Ô∏è Message send timeout, skipping`);
      return;
    }
    
    // Fallback –∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
    try {
      console.log(`üîç DEBUG: Attempting fallback to text message`);
      const replyMarkup = {};
      if (keyboard.length > 0) {
        replyMarkup.keyboard = keyboard;
        replyMarkup.resize_keyboard = true;
      }
      if (inlineKeyboard.length > 0) {
        replyMarkup.inline_keyboard = inlineKeyboard;
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º timeout –¥–ª—è fallback
      const sendPromise = ctx.reply(message, {
        reply_markup: Object.keys(replyMarkup).length > 0 ? replyMarkup : undefined
      });
      
      const timeoutPromise = new Promise((_, reject) => {
        setTimeout(() => reject(new Error('Fallback timeout')), 5000);
      });
      
      await Promise.race([sendPromise, timeoutPromise]);
      console.log(`üîç DEBUG: Fallback text message sent successfully`);
    } catch (fallbackError) {
      console.error('Error in fallback message sending:', fallbackError);
      // –ï—Å–ª–∏ –∏ fallback –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
      if (fallbackError.response && fallbackError.response.error_code === 403) {
        console.log(`‚ö†Ô∏è User blocked the bot (403 error in fallback), ignoring`);
        return;
      }
    }
  }
}

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ MongoDB
async function saveUserToMongo(ctx) {
  if (!ctx.from) return;
  const userId = ctx.from.id;
  try {
    console.log(`[MongoDB] saveUserToMongo: –ø–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:`, { botId, userId, from: ctx.from });
    
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    const existingUser = await User.findOne({ botId, userId });
    
    if (existingUser) {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const updateResult = await User.updateOne(
      { botId, userId },
      {
          $set: {
            lastSubscribedAt: new Date(),
            isSubscribed: true,
            username: ctx.from.username,
            firstName: ctx.from.first_name,
            lastName: ctx.from.last_name
          }
        }
      );
      console.log('[MongoDB] saveUserToMongo: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω:', updateResult);
    } else {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const newUser = new User({
          botId,
          userId,
          username: ctx.from.username,
          firstName: ctx.from.first_name,
          lastName: ctx.from.last_name,
          firstSubscribedAt: new Date(),
          lastSubscribedAt: new Date(),
        isSubscribed: true,
        subscriptionHistory: [{ subscribedAt: new Date() }]
      });
      
      const saveResult = await newUser.save();
      console.log('[MongoDB] saveUserToMongo: –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω:', saveResult._id);
    }
    
    // –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ —Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
  } catch (err) {
    console.error('[MongoDB] saveUserToMongo: –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', err);
  }
}


// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const userCurrentBlock = new Map();
const userNavigationHistory = new Map();
const userQuizStates = new Map();
const userLastActivity = new Map();
const completedQuizzes = new Map();

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –±–æ—Ç–∞
let bot;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–∞–Ω–∞–ª (–≥–ª–æ–±–∞–ª—å–Ω–∞—è)
async function checkChannelSubscription(userId, channelId) {
  try {
    console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –Ω–∞ –∫–∞–Ω–∞–ª ${channelId}`);
    
    if (!channelId) {
      console.log('‚ùå ID –∫–∞–Ω–∞–ª–∞ –Ω–µ —É–∫–∞–∑–∞–Ω');
      return false;
    }
    
    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º ID –∫–∞–Ω–∞–ª–∞ - —É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ —Å—Ç—Ä–æ–∫–µ
    let normalizedChannelId = String(channelId).trim();
    console.log(`üîç –ò—Å—Ö–æ–¥–Ω—ã–π ID –∫–∞–Ω–∞–ª–∞: "${channelId}"`);
    console.log(`üîç –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π ID –∫–∞–Ω–∞–ª–∞: "${normalizedChannelId}"`);
    
    // –ï—Å–ª–∏ ID –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å @, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
    // –ï—Å–ª–∏ ID –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å -, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å (—ç—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø)
    // –ï—Å–ª–∏ ID –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 100, –¥–æ–±–∞–≤–ª—è–µ–º - (—ç—Ç–æ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞)
    // –ï—Å–ª–∏ ID –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –¥—Ä—É–≥–∏–º–∏ —Ü–∏—Ñ—Ä–∞–º–∏, –¥–æ–±–∞–≤–ª—è–µ–º @
    if (normalizedChannelId.startsWith('@')) {
      console.log(`üîç ID –∫–∞–Ω–∞–ª–∞ —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç @: ${normalizedChannelId}`);
    } else if (normalizedChannelId.startsWith('-')) {
      console.log(`üîç ID –∫–∞–Ω–∞–ª–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å - (—Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞): ${normalizedChannelId}`);
    } else if (normalizedChannelId.startsWith('100')) {
      // –ï—Å–ª–∏ ID –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 100, —ç—Ç–æ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞ - –¥–æ–±–∞–≤–ª—è–µ–º –º–∏–Ω—É—Å
      normalizedChannelId = '-' + normalizedChannelId;
      console.log(`üîç –î–æ–±–∞–≤–∏–ª–∏ - –∫ ID —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—ã: ${normalizedChannelId}`);
    } else if (/^\d+$/.test(normalizedChannelId)) {
      // –ï—Å–ª–∏ —ç—Ç–æ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã (–Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 100), –¥–æ–±–∞–≤–ª—è–µ–º @
      normalizedChannelId = '@' + normalizedChannelId;
      console.log(`üîç –î–æ–±–∞–≤–∏–ª–∏ @ –∫ —á–∏—Å–ª–æ–≤–æ–º—É ID: ${normalizedChannelId}`);
    } else {
      console.log(`üîç ID –∫–∞–Ω–∞–ª–∞ –≤ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ: ${normalizedChannelId}`);
    }
    
    console.log(`üîç –§–∏–Ω–∞–ª—å–Ω—ã–π ID –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: "${normalizedChannelId}"`);
    
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–∞–Ω–∞–ª
    try {
      const chat = await bot.telegram.getChat(normalizedChannelId);
      console.log(`‚úÖ –ö–∞–Ω–∞–ª –Ω–∞–π–¥–µ–Ω:`, {
        id: chat.id,
        title: chat.title,
        type: chat.type
      });
    } catch (chatError) {
      console.log(`‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${chatError.message}`);
      return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É —á–µ—Ä–µ–∑ Telegram API
    const chatMember = await bot.telegram.getChatMember(normalizedChannelId, userId);
    console.log(`üîç –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏: ${chatMember.status}`);
    console.log(`üîç –ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–ª–µ–Ω—Å—Ç–≤–µ:`, JSON.stringify(chatMember, null, 2));
    
    // –°—Ç–∞—Ç—É—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å—á–∏—Ç–∞—é—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–æ–π
    const subscribedStatuses = ['member', 'administrator', 'creator'];
    const isSubscribed = subscribedStatuses.includes(chatMember.status);
    
    console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} ${isSubscribed ? '–ø–æ–¥–ø–∏—Å–∞–Ω' : '–Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω'} –Ω–∞ –∫–∞–Ω–∞–ª ${normalizedChannelId}`);
    return isSubscribed;
    
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –Ω–∞ –∫–∞–Ω–∞–ª ${channelId}:`, error);
    console.error(`‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:`, {
      message: error.message,
      code: error.code,
      response: error.response ? {
        error_code: error.response.error_code,
        description: error.response.description
      } : null
    });
    
    // –ï—Å–ª–∏ –∫–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
    if (error.response && error.response.error_code === 400 && error.response.description && error.response.description.includes('chat not found')) {
      console.log('‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å ID –∫–∞–Ω–∞–ª–∞');
      return false;
    }
    
    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–∞–Ω–∞–ª–µ
    if (error.response && error.response.error_code === 400 && error.response.description && error.response.description.includes('user not found')) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–∞–Ω–∞–ª–µ');
      return false;
    }
    
    // –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    if (error.response && error.response.error_code === 400 && error.response.description && error.response.description.includes('member list is inaccessible')) {
      console.log('‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–∞ - –¥–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
      return false;
    }
    
    // –ï—Å–ª–∏ –∫–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞
    if (error.response && error.response.error_code === 400) {
      console.log('‚ùå –ö–∞–Ω–∞–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞');
      return false;
    }
    
    return false;
  }
}

function setupBotHandlers(bot, blocks, connections) {
  console.log('=== [BOOT] setupBotHandlers –≤—ã–∑–≤–∞–Ω ===');
  // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É –¥–∏–∞–ª–æ–≥–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
  const dialogMap = new Map();
  console.log(`[BOOT] Creating dialogMap from ${blocks.length} blocks:`);
  blocks.forEach(block => {
    dialogMap.set(block.id, {
      message: block.message,
      buttons: block.buttons || [],
      mediaFiles: block.mediaFiles || [],
      type: block.type,
      questions: block.questions || [],
      currentQuestionIndex: block.currentQuestionIndex || 0,
      finalSuccessMessage: block.finalSuccessMessage,
      returnToStartOnComplete: block.returnToStartOnComplete
    });
    console.log(`[BOOT] dialogMap: ${block.id} -> ${block.type} (${(block.buttons || []).length} buttons)`);
    
    // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–≤–∏–∑–æ–≤
    if (block.type === 'quiz') {
      console.log(`[BOOT] Quiz block ${block.id} questions:`, (block.questions || []).length);
      console.log(`[BOOT] Quiz block ${block.id} questions data:`, JSON.stringify(block.questions, null, 2));
    }
  });
  console.log(`[BOOT] Final dialogMap size: ${dialogMap.size}`);

  // –ö–∞—Ä—Ç–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  // const userNavigationHistory = new Map(); // –£–¥–∞–ª–µ–Ω–æ
  
  // –ö–∞—Ä—Ç–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –±–ª–æ–∫–∞ –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  // const userCurrentBlock = new Map(); // –£–¥–∞–ª–µ–Ω–æ
  
  // –ö–∞—Ä—Ç–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–≤–∏–∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  // const userQuizStates = new Map(); // –£–¥–∞–ª–µ–Ω–æ
  
  // –ö–∞—Ä—Ç–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∫–≤–∏–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  // const completedQuizzes = new Map(); // –£–¥–∞–ª–µ–Ω–æ

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - –û–¢–ö–õ–Æ–ß–ï–ù–ê
  function cleanupOldUserData() {
    console.log(`üßπ Memory cleanup DISABLED - keeping all user data`);
    console.log(`üìä Current stats - Active users: ${userCurrentBlock.size}, Quiz states: ${userQuizStates.size}, History: ${userNavigationHistory.size}`);
  }

  // –ö–∞—Ä—Ç–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  // const userLastActivity = new Map(); // –£–¥–∞–ª–µ–Ω–æ

  // –û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏ –û–¢–ö–õ–Æ–ß–ï–ù–ê - –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –Ω–∞–≤—Å–µ–≥–¥–∞
  // setInterval(cleanupOldUserData, 60 * 60 * 1000);
  
  // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–∞–º—è—Ç–∏ –ë–ï–ó –æ—á–∏—Å—Ç–∫–∏ - —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
  setInterval(() => {
    const memUsage = process.memoryUsage();
    const memPercent = (memUsage.heapUsed / memUsage.heapTotal) * 100;
    
    console.log(`üìä Memory usage: ${memPercent.toFixed(1)}% (${Math.round(memUsage.heapUsed / 1024 / 1024)}MB / ${Math.round(memUsage.heapTotal / 1024 / 1024)}MB)`);
    console.log(`üìä Active users: ${userCurrentBlock.size}, Quiz states: ${userQuizStates.size}, History: ${userNavigationHistory.size}`);
    
    // –û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏ –û–¢–ö–õ–Æ–ß–ï–ù–ê - –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –Ω–∞–≤—Å–µ–≥–¥–∞
    // if (memPercent > 80) {
    //   console.log(`‚ö†Ô∏è High memory usage: ${memPercent.toFixed(1)}%, triggering cleanup`);
    //   cleanupOldUserData();
    // }
    
    // –û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏ –û–¢–ö–õ–Æ–ß–ï–ù–ê - –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –Ω–∞–≤—Å–µ–≥–¥–∞
    // if (userCurrentBlock.size > 10000) {
    //   console.log(`üö® Too many users (${userCurrentBlock.size}), forcing aggressive cleanup`);
    //   const userArray = Array.from(userCurrentBlock.entries());
    //   const toRemove = userArray.slice(0, 2000);
    //   
    //   for (const [userId] of toRemove) {
    //     userCurrentBlock.delete(userId);
    //     userNavigationHistory.delete(userId);
    //     userLastActivity.delete(userId);
    //     completedQuizzes.delete(userId);
    //     userQuizStates.delete(userId);
    //   }
    //   console.log(`üßπ Aggressive cleanup: removed ${toRemove.length} users`);
    // }
  }, 30 * 60 * 1000); // –ö–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç - —Ç–æ–ª—å–∫–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ MongoDB
  async function saveUserToMongo(ctx) {
    try {
      const userId = ctx.from?.id;
      if (!userId) {
        console.log('‚ùå No user ID in context');
        return;
      }

      const userData = {
        botId,
        userId,
        username: ctx.from?.username,
        firstName: ctx.from?.first_name,
        lastName: ctx.from?.last_name,
        isSubscribed: true, // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω –ø—Ä–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏ —Å –±–æ—Ç–æ–º
        firstSubscribedAt: new Date(),
        lastSubscribedAt: new Date()
      };

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      let user = await User.findOne({ botId, userId });
      
      if (!user) {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = new User(userData);
        console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userId}`);
      } else {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user.username = userData.username;
        user.firstName = userData.firstName;
        user.lastName = userData.lastName;
        user.isSubscribed = true;
        user.lastSubscribedAt = new Date();
        
        // –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º firstSubscribedAt
        if (!user.firstSubscribedAt) {
          user.firstSubscribedAt = new Date();
        }
        
        console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userId}`);
      }

      await user.save();
      console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ MongoDB`);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ MongoDB:', error);
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async function handleUserSubscription(userId) {
    try {
      console.log(`üîî –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userId}`);
      
      let user = await User.findOne({ botId, userId });
      const now = new Date();
      
      if (!user) {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = new User({
          botId,
          userId,
          isSubscribed: true,
          firstSubscribedAt: now,
          lastSubscribedAt: now,
          totalSubscribedTime: 0,
          pausedTime: 0
        });
        console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–¥–ø–∏—Å—á–∏–∫: ${userId}`);
      } else {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user.isSubscribed = true;
        user.lastSubscribedAt = now;
        
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –æ—Ç–ø–∏—Å–∞–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–∞—É–∑—ã
        if (user.lastUnsubscribedAt) {
          const pauseDuration = now.getTime() - user.lastUnsubscribedAt.getTime();
          user.pausedTime += pauseDuration;
          user.lastUnsubscribedAt = null;
          console.log(`‚è∏Ô∏è –î–æ–±–∞–≤–ª–µ–Ω–æ –≤—Ä–µ–º—è –ø–∞—É–∑—ã: ${Math.round(pauseDuration / 1000 / 60)} –º–∏–Ω—É—Ç`);
        }
        
        // –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º firstSubscribedAt
        if (!user.firstSubscribedAt) {
          user.firstSubscribedAt = now;
        }
        
        console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω –ø–æ–¥–ø–∏—Å—á–∏–∫: ${userId}`);
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é –ø–æ–¥–ø–∏—Å–æ–∫
      if (!user.subscriptionHistory) {
        user.subscriptionHistory = [];
      }
      
      user.subscriptionHistory.push({
        subscribedAt: now
      });

      await user.save();
      console.log(`‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞`);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏:', error);
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async function handleUserUnsubscription(userId) {
    try {
      console.log(`üîï –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userId}`);
      
      const user = await User.findOne({ botId, userId });
      if (!user) {
        console.log(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        return;
      }

      const now = new Date();
      user.isSubscribed = false;
      user.lastUnsubscribedAt = now;

      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–¥–ø–∏—Å–æ–∫
      if (user.subscriptionHistory && user.subscriptionHistory.length > 0) {
        const lastRecord = user.subscriptionHistory[user.subscriptionHistory.length - 1];
        if (!lastRecord.unsubscribedAt) {
          lastRecord.unsubscribedAt = now;
          
          // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ–¥–ø–∏—Å–∫–∏ –∫ –æ–±—â–µ–º—É –≤—Ä–µ–º–µ–Ω–∏
          if (lastRecord.subscribedAt) {
            const subscriptionDuration = now.getTime() - lastRecord.subscribedAt.getTime();
            user.totalSubscribedTime += subscriptionDuration;
            console.log(`‚è±Ô∏è –î–æ–±–∞–≤–ª–µ–Ω–æ –≤—Ä–µ–º—è –ø–æ–¥–ø–∏—Å–∫–∏: ${Math.round(subscriptionDuration / 1000 / 60)} –º–∏–Ω—É—Ç`);
          }
        }
      }

      await user.save();
      console.log(`‚úÖ –û—Ç–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞`);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–ø–∏—Å–∫–∏:', error);
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–¥–ø–∏—Å–∫–∏ (—Å —É—á–µ—Ç–æ–º –ø–∞—É–∑)
  function getEffectiveSubscriptionTime(user) {
    if (!user) return 0;
    
    const now = new Date();
    let totalTime = user.totalSubscribedTime || 0;
    
    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–µ–π—á–∞—Å –ø–æ–¥–ø–∏—Å–∞–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏
    if (user.isSubscribed && user.lastSubscribedAt) {
      const currentSubscriptionTime = now.getTime() - user.lastSubscribedAt.getTime();
      totalTime += currentSubscriptionTime;
    }
    
    // –í—ã—á–∏—Ç–∞–µ–º –≤—Ä–µ–º—è –ø–∞—É–∑—ã
    totalTime -= (user.pausedTime || 0);
    
    return Math.max(0, totalTime); // –ù–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º
  }


  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
  async function createKeyboardWithBack(buttons, userId, currentBlockId) {
    try {
      console.log(`üîç DEBUG: createKeyboardWithBack called for user ${userId}, block ${currentBlockId}`);
      
    const keyboard = [];
    const inlineKeyboard = [];
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 2 –≤ —Ä—è–¥
    if (buttons && buttons.length > 0) {
      for (let i = 0; i < buttons.length; i += 2) {
        const row = [];
        row.push({ text: buttons[i].text });
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä—É—é –∫–Ω–æ–ø–∫—É –≤ —Ä—è–¥, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
        if (i + 1 < buttons.length) {
          row.push({ text: buttons[i + 1].text });
        }
        
        keyboard.push(row);
      }
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –±–ª–æ–∫ –∏ –Ω–µ –∫–≤–∏–∑
    const currentBlock = blocks.find(b => b.id === currentBlockId);
    if (currentBlockId !== 'start' && currentBlock && currentBlock.type !== 'quiz') {
      const userHistory = userNavigationHistory.get(userId);
      if (userHistory && userHistory.length > 0) {
        keyboard.push([{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥' }]);
      }
    }
    
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω–∞ –ª–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –±–ª–æ–∫–∞
      if (currentBlockId === 'start') {
        try {
          const loyaltyConfig = await LoyaltyConfig.findOne({ botId });
          if (loyaltyConfig && loyaltyConfig.isEnabled) {
            keyboard.push([{ text: 'üéÅ –°–ò–°–¢–ï–ú–ê –õ–û–Ø–õ–¨–ù–û–°–¢–ò' }]);
          }
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏:', error);
        }
      }
      
      console.log(`üîç DEBUG: createKeyboardWithBack completed, keyboard length: ${keyboard.length}`);
    return { keyboard, inlineKeyboard };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ createKeyboardWithBack:', error);
      console.error('‚ùå Stack trace:', error.stack);
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ caso –æ—à–∏–±–∫–∏
      return { keyboard: [], inlineKeyboard: [] };
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–æ–π –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏
  async function createKeyboardWithLoyalty(buttons, userId, currentBlockId) {
    // –¢–µ–ø–µ—Ä—å createKeyboardWithBack —É–∂–µ –≤–∫–ª—é—á–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏
    return await createKeyboardWithBack(buttons, userId, currentBlockId);
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async function getLoyaltyInfo(userId) {
    try {
      const user = await User.findOne({ botId, userId });
      if (!user) {
        return '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω';
      }

      const loyaltyConfig = await LoyaltyConfig.findOne({ botId });
      if (!loyaltyConfig || !loyaltyConfig.isEnabled) {
        return '‚ùå –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞';
      }

      // –í–°–ï–ì–î–ê –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª –ø—Ä–∏ –∫–∞–∂–¥–æ–º –Ω–∞–∂–∞—Ç–∏–∏
      if (loyaltyConfig.channelSettings && loyaltyConfig.channelSettings.isRequired) {
        const channelId = loyaltyConfig.channelSettings.channelId;
        console.log(`üîç LoyaltyConfig channelSettings:`, JSON.stringify(loyaltyConfig.channelSettings, null, 2));
        console.log(`üîç Channel ID from config: "${channelId}" (type: ${typeof channelId})`);
        
        if (channelId) {
          console.log(`üîÑ –ü–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –Ω–∞ –∫–∞–Ω–∞–ª ${channelId}`);
          const isSubscribed = await checkChannelSubscription(userId, channelId);
          
          if (!isSubscribed) {
            const channelUsername = loyaltyConfig.channelSettings.channelUsername || channelId;
            const notSubscribedMessage = loyaltyConfig.channelSettings.notSubscribedMessage || 
              '–î–ª—è —É—á–∞—Å—Ç–∏—è –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª!';
            
            let message = 'üîí **–î–û–°–¢–£–ü –û–ì–†–ê–ù–ò–ß–ï–ù**\n\n';
            message += `${notSubscribedMessage}\n\n`;
            message += `üì¢ **–ö–∞–Ω–∞–ª:** ${channelUsername}\n\n`;
            message += 'üí° **–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!**';
            
            return message;
          } else {
            console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª ${channelId} - –¥–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω`);
          }
        }
      }

      const loyalty = await Loyalty.findOne({ botId, userId });
      if (!loyalty) {
        return '‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞';
      }

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ –≤—Ä–µ–º—è –ø–æ–¥–ø–∏—Å–∫–∏ (—Å —É—á–µ—Ç–æ–º –ø–∞—É–∑)
      const effectiveTime = getEffectiveSubscriptionTime(user);
      const totalDays = Math.floor(effectiveTime / (1000 * 60 * 60 * 24));
      const totalHours = Math.floor(effectiveTime / (1000 * 60 * 60));
      const totalMinutes = Math.floor(effectiveTime / (1000 * 60));

      let message = 'üéÅ **–°–ò–°–¢–ï–ú–ê –õ–û–Ø–õ–¨–ù–û–°–¢–ò**\n\n';
      message += `üìÖ **–í—ã —Å –Ω–∞–º–∏:** ${totalDays} –¥–Ω–µ–π, ${totalHours % 24} —á–∞—Å–æ–≤, ${totalMinutes % 60} –º–∏–Ω—É—Ç\n\n`;
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
      if (user.isSubscribed) {
        message += `üü¢ **–°—Ç–∞—Ç—É—Å:** –ü–æ–¥–ø–∏—Å–∞–Ω\n\n`;
      } else {
        message += `üî¥ **–°—Ç–∞—Ç—É—Å:** –û—Ç–ø–∏—Å–∞–Ω (–≤—Ä–µ–º—è –Ω–∞ –ø–∞—É–∑–µ)\n\n`;
      }

      // –ü–µ—Ä–∏–æ–¥—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ (–æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏)
      const periods = [
        { key: '1m', name: '1 –º–∏–Ω—É—Ç–∞', minutes: 1 },
        { key: '24h', name: '24 —á–∞—Å–∞', minutes: 24 * 60 },
        { key: '7d', name: '7 –¥–Ω–µ–π', minutes: 7 * 24 * 60 },
        { key: '30d', name: '30 –¥–Ω–µ–π', minutes: 30 * 24 * 60 },
        { key: '90d', name: '90 –¥–Ω–µ–π', minutes: 90 * 24 * 60 },
        { key: '180d', name: '180 –¥–Ω–µ–π', minutes: 180 * 24 * 60 },
        { key: '360d', name: '360 –¥–Ω–µ–π', minutes: 360 * 24 * 60 }
      ];

      // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≤–∫–ª—é—á–µ–Ω–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã
      const enabledPeriods = periods.filter(period => loyaltyConfig.messages[period.key]?.enabled);
      
      if (enabledPeriods.length === 0) {
        message += '‚ùå **–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞**';
        return message;
      }

      const currentMinutes = Math.floor(effectiveTime / (1000 * 60));
      
      // –ù–∞—Ö–æ–¥–∏–º —Å–ª–µ–¥—É—é—â–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –±–æ–Ω—É—Å
      let nextBonus = null;
      let allRewarded = true;
      
      for (const period of enabledPeriods) {
        const isRewarded = loyalty.rewards[period.key] || false;
        
        if (!isRewarded) {
          allRewarded = false;
          if (currentMinutes >= period.minutes) {
            // –ë–æ–Ω—É—Å –¥–æ—Å—Ç—É–ø–µ–Ω —Å–µ–π—á–∞—Å
            message += `üéÅ **–°–ª–µ–¥—É—é—â–∏–π –±–æ–Ω—É—Å:** ${period.name} - **–î–û–°–¢–£–ü–ï–ù –°–ï–ô–ß–ê–°!**\n\n`;
            message += 'üí° **–ù–∞–≥—Ä–∞–¥–∞ –ø—Ä–∏–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!**';
            return message;
          } else {
            // –ë–æ–Ω—É—Å –µ—â–µ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω
            if (!nextBonus || period.minutes < nextBonus.minutes) {
              nextBonus = period;
            }
          }
        }
      }

      if (allRewarded) {
        message += 'üéâ **–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ª—É—á–∏–ª–∏ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã!**\n\n';
        message += 'üí° **–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏!**';
      } else if (nextBonus) {
        const remainingMinutes = nextBonus.minutes - currentMinutes;
        const remainingDays = Math.floor(remainingMinutes / (24 * 60));
        const remainingHours = Math.floor((remainingMinutes % (24 * 60)) / 60);
        const remainingMins = remainingMinutes % 60;
        
        message += `‚è≥ **–î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –±–æ–Ω—É—Å–∞:** ${nextBonus.name}\n\n`;
        
        if (remainingDays > 0) {
          message += `üìÖ **–û—Å—Ç–∞–ª–æ—Å—å:** ${remainingDays} –¥–Ω–µ–π, ${remainingHours} —á–∞—Å–æ–≤, ${remainingMins} –º–∏–Ω—É—Ç`;
        } else if (remainingHours > 0) {
          message += `‚è∞ **–û—Å—Ç–∞–ª–æ—Å—å:** ${remainingHours} —á–∞—Å–æ–≤, ${remainingMins} –º–∏–Ω—É—Ç`;
        } else {
          message += `‚è∞ **–û—Å—Ç–∞–ª–æ—Å—å:** ${remainingMins} –º–∏–Ω—É—Ç`;
        }
        
        message += '\n\nüí° **–ù–∞–≥—Ä–∞–¥–∞ –ø—Ä–∏–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!**';
      }

      return message;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏:', error);
      return '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏';
    }
  }

  // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
  const connectionMap = new Map();
  console.log(`[BOOT] Creating connectionMap from ${connections.length} connections:`);
  connections.forEach(conn => {
    const key = `${String(conn.from.blockId)}_${String(conn.from.buttonId)}`;
    connectionMap.set(key, conn.to);
    console.log(`[BOOT] connectionMap: ${key} -> ${conn.to}`);
    console.log(`[BOOT] Connection details:`, JSON.stringify(conn, null, 2));
  });
  console.log(`[BOOT] Final connectionMap size: ${connectionMap.size}`);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
  bot.command('start', async (ctx) => {
    console.log('[DEBUG] /start ctx:', JSON.stringify(ctx, null, 2));
    console.log('[DEBUG] /start ctx.from:', ctx.from);
    await saveUserToMongo(ctx);
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userId = ctx.from?.id;
    if (userId) {
      await handleUserSubscription(userId);
    }
    
    // –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    userNavigationHistory.delete(userId);
    
    // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–≤–∏–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    userQuizStates.delete(userId);
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–ª–æ–∫ –∫–∞–∫ —Å—Ç–∞—Ä—Ç–æ–≤—ã–π
    userCurrentBlock.set(userId, 'start');
    
    const startBlock = dialogMap.get('start');
    if (startBlock) {
      const { keyboard, inlineKeyboard } = await createKeyboardWithLoyalty(startBlock.buttons, userId, 'start');
      await sendMediaMessage(ctx, startBlock.message, startBlock.mediaFiles, keyboard, inlineKeyboard);
    } else {
      await ctx.reply('–ë–æ—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help
  bot.command('help', async (ctx) => {
    console.log('[DEBUG] /help ctx:', JSON.stringify(ctx, null, 2));
    console.log('[DEBUG] /help ctx.from:', ctx.from);
    await saveUserToMongo(ctx);
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userId = ctx.from?.id;
    if (userId) {
      await handleUserSubscription(userId);
    }
    let currentBlockId = userCurrentBlock.get(userId);
    
    let helpMessage = 'ü§ñ **–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:**\n\n';
    helpMessage += 'üì± **–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**\n';
    helpMessage += '‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏\n';
    helpMessage += '‚Ä¢ –ù–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –≤–º–µ—Å—Ç–æ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞\n';
    helpMessage += '‚Ä¢ –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –≤–µ—Ä–Ω–µ—Ç –≤–∞—Å –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –±–ª–æ–∫—É\n\n';
    helpMessage += 'üîó **–ö–Ω–æ–ø–∫–∏ —Å —Å—Å—ã–ª–∫–∞–º–∏:**\n';
    helpMessage += '‚Ä¢ –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Å—ã–ª–∫—É, –æ–Ω–∞ –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ\n\n';
    helpMessage += 'üìä **–ö–≤–∏–∑—ã:**\n';
    helpMessage += '‚Ä¢ –û—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –≤—ã–±–∏—Ä–∞—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã\n';
    helpMessage += '‚Ä¢ –ó–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥—ã\n\n';
    helpMessage += 'üí° **–°–æ–≤–µ—Ç—ã:**\n';
    helpMessage += '‚Ä¢ –ù–µ –≤–≤–æ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤—Ä—É—á–Ω—É—é - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏\n';
    helpMessage += '‚Ä¢ –ï—Å–ª–∏ –∑–∞–±–ª—É–¥–∏–ª–∏—Å—å, –Ω–∞–∂–º–∏—Ç–µ /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –Ω–∞—á–∞–ª–æ';
    
    if (currentBlockId) {
      const currentBlock = dialogMap.get(currentBlockId);
      if (currentBlock) {
        const { keyboard, inlineKeyboard } = await createKeyboardWithLoyalty(currentBlock.buttons, userId, currentBlockId);
        
        await ctx.reply(helpMessage, {
          parse_mode: 'Markdown',
          reply_markup: {
            keyboard: keyboard,
            resize_keyboard: true
          }
        });
        return;
      }
    }
    
    await ctx.reply(helpMessage, { parse_mode: 'Markdown' });
  });

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ –∏–∑ –±–ª–æ–∫–æ–≤
  blocks.forEach(block => {
    if (block.command) {
      const commandName = block.command.replace(/^\//, '');
      bot.command(commandName, async (ctx) => {
        await saveUserToMongo(ctx);
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userId = ctx.from?.id;
        if (userId) {
          await handleUserSubscription(userId);
        }
        
        userCurrentBlock.set(userId, block.id);
        const { keyboard, inlineKeyboard } = await createKeyboardWithLoyalty(block.buttons, userId, block.id);
        await sendMediaMessage(ctx, block.message, block.mediaFiles, keyboard, inlineKeyboard);
      });
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  bot.on('text', async (ctx) => {
    try {
      const userId = ctx.from?.id;
      const messageText = ctx.message.text;
      
      // –ë—ã—Å—Ç—Ä–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      if (!userId || !messageText || messageText.startsWith('/')) {
        return;
      }
      
      console.log(`üí¨ ${userId}: "${messageText}"`);
      
      // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ (–Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç)
      setImmediate(async () => {
        try {
          await handleUserSubscription(userId);
          await saveUserToMongo(ctx);
        } catch (error) {
          console.error('‚ùå Background error:', error);
        }
      });
      
      // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      userLastActivity.set(userId, Date.now());
      
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–ª–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      let currentBlockId = userCurrentBlock.get(userId);
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      if (!currentBlockId) {
        userCurrentBlock.set(userId, 'start');
        currentBlockId = 'start';
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        const startBlock = dialogMap.get('start');
        if (startBlock) {
          const { keyboard, inlineKeyboard } = await createKeyboardWithLoyalty(startBlock.buttons, userId, 'start');
          await sendMediaMessage(ctx, startBlock.message, startBlock.mediaFiles, keyboard, inlineKeyboard);
          return;
        } else {
          await ctx.reply('–ë–æ—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
          return;
        }
      }
      
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–ª–æ–∫
      const currentBlock = dialogMap.get(currentBlockId);
      if (!currentBlock) {
        userCurrentBlock.set(userId, 'start');
        const startBlock = dialogMap.get('start');
        if (startBlock) {
          const { keyboard, inlineKeyboard } = await createKeyboardWithLoyalty(startBlock.buttons, userId, 'start');
          await sendMediaMessage(ctx, startBlock.message, startBlock.mediaFiles, keyboard, inlineKeyboard);
        }
        return;
      }
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
      if (messageText === '‚¨ÖÔ∏è –ù–∞–∑–∞–¥') {
        const history = userNavigationHistory.get(userId) || [];
        if (history.length > 0) {
          const previousBlockId = history.pop();
          userNavigationHistory.set(userId, history);
          userCurrentBlock.set(userId, previousBlockId);
          
          const previousBlock = dialogMap.get(previousBlockId);
          if (previousBlock) {
            const { keyboard, inlineKeyboard } = await createKeyboardWithLoyalty(previousBlock.buttons, userId, previousBlockId);
            await sendMediaMessage(ctx, previousBlock.message, previousBlock.mediaFiles, keyboard, inlineKeyboard);
          }
        } else {
          // –ï—Å–ª–∏ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—á–∞–ª—É
          userCurrentBlock.set(userId, 'start');
          const startBlock = dialogMap.get('start');
          if (startBlock) {
            const { keyboard, inlineKeyboard } = await createKeyboardWithLoyalty(startBlock.buttons, userId, 'start');
            await sendMediaMessage(ctx, startBlock.message, startBlock.mediaFiles, keyboard, inlineKeyboard);
          }
        }
        return;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—ã—Ç–∞–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–π—Ç–∏ –∫–≤–µ—Å—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ
      if (currentBlockId === 'start') {
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–°–ò–°–¢–ï–ú–ê –õ–û–Ø–õ–¨–ù–û–°–¢–ò"
        if (messageText === 'üéÅ –°–ò–°–¢–ï–ú–ê –õ–û–Ø–õ–¨–ù–û–°–¢–ò') {
          const loyaltyInfo = await getLoyaltyInfo(userId);
          const { keyboard, inlineKeyboard } = await createKeyboardWithLoyalty(currentBlock.buttons, userId, currentBlockId);
          await sendMediaMessage(ctx, loyaltyInfo, [], keyboard, inlineKeyboard);
          return;
        }
        
        // –ù–∞—Ö–æ–¥–∏–º –∫–Ω–æ–ø–∫—É –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –≤–µ–¥–µ—Ç –ª–∏ –æ–Ω–∞ –∫ –∫–≤–∏–∑—É
        const button = currentBlock.buttons?.find(btn => btn.text === messageText);
        if (button) {
          const connectionKey = `${String(currentBlockId)}_${String(button.id)}`;
          const nextBlockId = connectionMap.get(connectionKey);
          const nextBlock = dialogMap.get(nextBlockId);
          
          if (nextBlock && nextBlock.type === 'quiz') {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –ø–∞–º—è—Ç–∏ (–±—ã—Å—Ç—Ä–æ)
            const quizKey = `${userId}_${nextBlockId}`;
            if (completedQuizzes.has(quizKey)) {
              await ctx.reply('–í—ã —É–∂–µ –ø—Ä–æ—à–ª–∏ —ç—Ç–æ—Ç –∫–≤–µ—Å—Ç!');
              return;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ MongoDB (–Ω–∞–¥–µ–∂–Ω–æ)
            try {
              const existingQuizStats = await QuizStats.findOne({
                botId: botId,
                userId: userId,
                blockId: nextBlockId
              });
              
              if (existingQuizStats) {
                console.log(`üîç DEBUG: User ${userId} already completed quiz ${nextBlockId} (from MongoDB)`);
                // –î–æ–±–∞–≤–ª—è–µ–º –≤ –ø–∞–º—è—Ç—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
                completedQuizzes.set(quizKey, true);
                await ctx.reply('–í—ã —É–∂–µ –ø—Ä–æ—à–ª–∏ —ç—Ç–æ—Ç –∫–≤–µ—Å—Ç!');
            return;
          }
            } catch (error) {
              console.error('‚ùå Error checking existing quiz stats:', error);
            }
          }
        }
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∫–≤–∏–∑–µ (–ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—é, –∞ –Ω–µ –ø–æ –±–ª–æ–∫—É)
      const quizState = userQuizStates.get(userId);
      if (quizState && !quizState.isCompleted) {
        // –ü–æ–ª—É—á–∞–µ–º –±–ª–æ–∫ –∫–≤–∏–∑–∞
        const quizBlock = dialogMap.get(quizState.blockId);
        if (!quizBlock || quizBlock.type !== 'quiz') {
          userQuizStates.delete(userId);
          return;
        }
          
        const questions = quizBlock.questions || [];
        const currentQuestion = questions[quizState.currentQuestionIndex];
        
        if (!currentQuestion) {
          console.log(`‚ùå Question ${quizState.currentQuestionIndex} not found`);
          await ctx.reply('–û—à–∏–±–∫–∞ –≤ –∫–≤–∏–∑–µ');
          return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–≤–µ—á–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å
        const alreadyAnswered = quizState.answers.some(a => a.questionIndex === quizState.currentQuestionIndex);
        console.log(`üîç DEBUG: Already answered: ${alreadyAnswered}`);
        
        if (alreadyAnswered) {
          console.log(`‚ö†Ô∏è User already answered question ${quizState.currentQuestionIndex}, ignoring duplicate`);
              return;
        }
        
        // –ò—â–µ–º –∫–Ω–æ–ø–∫—É —Å –æ—Ç–≤–µ—Ç–æ–º
        const answerButton = currentQuestion.buttons.find(btn => btn.text === messageText);
        if (!answerButton) {
          console.log(`‚ùå Answer button not found for: ${messageText}`);
          await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞');
            return;
          }
          
        console.log(`üîç DEBUG: Answer button found:`, answerButton);
          
              // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
        quizState.answers.push({
          questionIndex: quizState.currentQuestionIndex,
          answer: messageText,
          isCorrect: answerButton.isCorrect
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
        if (!answerButton.isCorrect) {
          console.log(`‚ùå Wrong answer for question ${quizState.currentQuestionIndex}`);
        } else {
          console.log(`‚úÖ Correct answer for question ${quizState.currentQuestionIndex}`);
        }
        
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
        quizState.currentQuestionIndex++;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–µ–Ω –ª–∏ –∫–≤–∏–∑
        if (quizState.currentQuestionIndex >= questions.length) {
          // –ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω
          quizState.isCompleted = true;
          quizState.endTime = Date.now();
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ MongoDB
          const correctAnswers = quizState.answers.filter(a => a.isCorrect).length;
          const totalQuestions = questions.length;
          const percentage = Math.round((correctAnswers / totalQuestions) * 100);
          const completionTime = Math.round((quizState.endTime - quizState.startTime) / 1000);
          
          try {
            console.log(`üíæ Saving quiz stats to MongoDB:`, {
              botId,
              userId,
              blockId: quizState.blockId,
              correctAnswers,
              totalQuestions,
              percentage,
              completionTime,
              answersCount: quizState.answers.length
            });
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º upsert –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–ø–∏—Å–∏ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π
            await QuizStats.updateOne(
              { 
                botId: botId, 
                userId: userId, 
                blockId: quizState.blockId 
              },
              {
                botId: botId,
                userId: userId,
                blockId: quizState.blockId,
                correctAnswers: correctAnswers,
                totalQuestions: totalQuestions,
                percentage: percentage,
                completionTime: completionTime,
                answers: quizState.answers,
                completedAt: new Date()
              },
              { upsert: true }
            );
            
            console.log(`‚úÖ Quiz stats saved to MongoDB for user ${userId}`);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤ –ø–∞–º—è—Ç—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
            const quizKey = `${userId}_${quizState.blockId}`;
            completedQuizzes.set(quizKey, true);
            console.log(`‚úÖ Quiz completion marked in memory: ${quizKey}`);
                  } catch (error) {
            console.error('‚ùå Error saving quiz stats:', error);
            console.error('‚ùå Error details:', error.message);
          }
          
           // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è
           let promoCode = '';
           if (correctAnswers === totalQuestions) {
             try {
               // –ò—â–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è —ç—Ç–æ–≥–æ –∫–≤–∏–∑–∞
               const availablePromo = await PromoCode.findOne({
                 botId: botId,
                 quizId: quizState.blockId,
                 activated: false
               });
               
               if (availablePromo) {
                 // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø—Ä–æ–º–æ–∫–æ–¥
                 await PromoCode.updateOne(
                   { _id: availablePromo._id },
                   {
                     activated: true,
                     activatedBy: userId,
                     activatedAt: new Date()
                   }
                 );
                 
                 promoCode = availablePromo.code;
                 console.log(`üéÅ –í—ã–¥–∞–Ω –ø—Ä–æ–º–æ–∫–æ–¥ ${promoCode} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId} –∑–∞ –∫–≤–∏–∑ ${quizState.blockId}`);
                      } else {
                 console.log(`üéÅ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –¥–ª—è –∫–≤–∏–∑–∞ ${quizState.blockId}`);
               }
             } catch (error) {
               console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞:', error);
             }
           }
           
           // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
           let finalMessage;
           if (correctAnswers === totalQuestions) {
             // –í—Å–µ –æ—Ç–≤–µ—Ç—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
             const successMessage = quizBlock.finalSuccessMessage || 'üèÜ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ –∫–≤–∏–∑!';
             const statsMessage = `\n\nüìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: ${correctAnswers}/${totalQuestions}\nüìà –ü—Ä–æ—Ü–µ–Ω—Ç: ${percentage}%\n‚è±Ô∏è –í—Ä–µ–º—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è: ${completionTime} —Å–µ–∫`;
             const promoMessage = promoCode ? `\n\nüéÅ **–í–∞—à –ø—Ä–æ–º–æ–∫–æ–¥:** \`${promoCode}\`` : '';
             
             finalMessage = successMessage + statsMessage + promoMessage;
                  } else {
             // –ù–µ –≤—Å–µ –æ—Ç–≤–µ—Ç—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ—É–¥–∞—á–µ
             finalMessage = `${quizBlock.finalFailureMessage || '‚ùå –ö–≤–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!'}\n\nüìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: ${correctAnswers}/${totalQuestions}\nüìà –ü—Ä–æ—Ü–µ–Ω—Ç: ${percentage}%\n‚è±Ô∏è –í—Ä–µ–º—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è: ${completionTime} —Å–µ–∫`;
           }
          
          await ctx.reply(finalMessage, { parse_mode: 'Markdown' });
          
          // –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –Ω–∞—á–∞–ª–æ
          if (quizBlock.returnToStartOnComplete) {
            console.log(`üîç DEBUG: Returning to start after quiz completion`);
                  userCurrentBlock.set(userId, 'start');
            userQuizStates.delete(userId);
            userNavigationHistory.delete(userId);
                  
                  const startBlock = dialogMap.get('start');
                  if (startBlock) {
              const { keyboard, inlineKeyboard } = await createKeyboardWithLoyalty(startBlock.buttons, userId, 'start');
              await sendMediaMessage(ctx, startBlock.message, startBlock.mediaFiles, keyboard, inlineKeyboard);
              console.log(`‚úÖ Returned to start block after quiz completion`);
            }
          }
          
          return;
                  } else {
          // –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
          const nextQuestion = questions[quizState.currentQuestionIndex];
          const { keyboard, inlineKeyboard } = await createKeyboardWithBack(nextQuestion.buttons, userId, quizState.blockId);
          await sendMediaMessage(ctx, nextQuestion.message, nextQuestion.mediaFiles, keyboard, inlineKeyboard);
        }
        
                  return;
      }
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–°–ò–°–¢–ï–ú–ê –õ–û–Ø–õ–¨–ù–û–°–¢–ò"
      if (messageText === 'üéÅ –°–ò–°–¢–ï–ú–ê –õ–û–Ø–õ–¨–ù–û–°–¢–ò') {
        console.log(`üîç DEBUG: Processing "–°–ò–°–¢–ï–ú–ê –õ–û–Ø–õ–¨–ù–û–°–¢–ò" button`);
        
        try {
          const loyaltyInfo = await getLoyaltyInfo(userId);
          await ctx.reply(loyaltyInfo, { parse_mode: 'Markdown' });
          
          // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –±–ª–æ–∫—É
                const startBlock = dialogMap.get('start');
                if (startBlock) {
            const { keyboard, inlineKeyboard } = await createKeyboardWithLoyalty(startBlock.buttons, userId, 'start');
                  await sendMediaMessage(ctx, startBlock.message, startBlock.mediaFiles, keyboard, inlineKeyboard);
                }
          return;
                } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–∏—Å—Ç–µ–º—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏:', error);
          await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏');
                return;
              }
            }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
      if (messageText === '‚¨ÖÔ∏è –ù–∞–∑–∞–¥') {
        console.log(`üîç DEBUG: Processing "–ù–∞–∑–∞–¥" button`);
        console.log(`üîç DEBUG: Current block type: ${currentBlock.type}`);
        console.log(`üîç DEBUG: User history:`, userNavigationHistory.get(userId));
        
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∫–≤–∏–∑–µ, –ù–ï –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–≤–∏–∑–∞ (—Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è)
        const quizState = userQuizStates.get(userId);
        if (quizState && !quizState.isCompleted) {
          console.log(`üîç DEBUG: User in quiz, keeping quiz state for continuation`);
        }
        
        const userHistory = userNavigationHistory.get(userId);
        
        if (userHistory && userHistory.length > 0) {
          const previousBlockId = userHistory.pop();
          console.log(`üîç DEBUG: Previous block ID: ${previousBlockId}`);
          const prevBlock = dialogMap.get(previousBlockId);
          
          if (prevBlock) {
            userCurrentBlock.set(userId, previousBlockId);
            userNavigationHistory.set(userId, userHistory);
            
            const { keyboard, inlineKeyboard } = await createKeyboardWithBack(prevBlock.buttons, userId, previousBlockId);
            await sendMediaMessage(ctx, prevBlock.message, prevBlock.mediaFiles, keyboard, inlineKeyboard);
            console.log(`‚úÖ Navigated back to block ${previousBlockId}`);
            return;
          } else {
            console.log(`‚ùå Previous block ${previousBlockId} not found in dialogMap`);
          }
                  } else {
          console.log(`‚ùå No user history found`);
                  }
                  
        await ctx.reply('–ù–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –±–ª–æ–∫–∞');
                  return;
      }
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö –±–ª–æ–∫–æ–≤ —Å –∫–Ω–æ–ø–∫–∞–º–∏
      console.log(`üîç DEBUG: Processing regular block with buttons`);
      console.log(`üîç DEBUG: Current block buttons:`, currentBlock.buttons?.map(b => ({ id: b.id, text: b.text })));
      console.log(`üîç DEBUG: Looking for button with text: "${messageText}"`);
      
      const button = currentBlock.buttons?.find(btn => btn.text === messageText);
      
      
      if (!button) {
        console.log(`‚ùå Button "${messageText}" not found in current block`);
        console.log(`‚ùå Available buttons:`, currentBlock.buttons?.map(b => b.text));
        await ctx.reply('–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –∫–Ω–æ–ø–∫–∞–º–∏.');
              return;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–Ω–æ–ø–∫–∞ —Å—Å—ã–ª–∫–æ–π
      if (button.url && button.url.trim() !== '') {
        await ctx.reply(`üîó ${button.text}`, {
          reply_markup: {
            inline_keyboard: [[{ text: button.text, url: button.url.trim() }]]
          }
        });
        return;
      }
      
      // –û–±—ã—á–Ω–∞—è –∫–Ω–æ–ø–∫–∞ - –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –±–ª–æ–∫—É
      const connectionKey = `${String(currentBlockId)}_${String(button.id)}`;
      const nextBlockId = connectionMap.get(connectionKey);
      
      if (!nextBlockId || !dialogMap.has(nextBlockId)) {
        await ctx.reply('–û—à–∏–±–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏: –Ω–µ –Ω–∞–π–¥–µ–Ω —Å–ª–µ–¥—É—é—â–∏–π –±–ª–æ–∫.');
        return;
      }
            
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –±–ª–æ–∫—É
              const nextBlock = dialogMap.get(nextBlockId);
              
      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –±–ª–æ–∫ –≤ –∏—Å—Ç–æ—Ä–∏—é (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–ª–µ–¥—É—é—â–∏–π –±–ª–æ–∫ –Ω–µ –∫–≤–∏–∑)
      if (nextBlock.type !== 'quiz') {
              let userHistory = userNavigationHistory.get(userId) || [];
              userHistory.push(currentBlockId);
              userNavigationHistory.set(userId, userHistory);
      }
              
              // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –±–ª–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
              userCurrentBlock.set(userId, nextBlockId);
      console.log(`üîç DEBUG: Updated user current block to: ${nextBlockId}`);
      
      // –ï—Å–ª–∏ —Å–ª–µ–¥—É—é—â–∏–π –±–ª–æ–∫ - –∫–≤–∏–∑, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–≤–∏–∑–∞ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
      if (nextBlock.type === 'quiz') {
        console.log(`üîç DEBUG: Starting quiz for user ${userId}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —ç—Ç–æ—Ç –∫–≤–∏–∑
        const quizKey = `${userId}_${nextBlockId}`;
        if (completedQuizzes.has(quizKey)) {
          console.log(`üîç DEBUG: User ${userId} already completed quiz ${nextBlockId} (from memory)`);
          await ctx.reply('–í—ã —É–∂–µ –ø—Ä–æ—à–ª–∏ —ç—Ç–æ—Ç –∫–≤–µ—Å—Ç!');
          return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ MongoDB
        try {
          const existingQuizStats = await QuizStats.findOne({
            botId: botId,
            userId: userId,
            blockId: nextBlockId
          });
          
          if (existingQuizStats) {
            console.log(`üîç DEBUG: User ${userId} already completed quiz ${nextBlockId} (from MongoDB)`);
            // –î–æ–±–∞–≤–ª—è–µ–º –≤ –ø–∞–º—è—Ç—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
            completedQuizzes.set(quizKey, true);
            await ctx.reply('–í—ã —É–∂–µ –ø—Ä–æ—à–ª–∏ —ç—Ç–æ—Ç –∫–≤–µ—Å—Ç!');
            return;
          }
        } catch (error) {
          console.error('‚ùå Error checking existing quiz stats:', error);
        }
                
                // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–≤–∏–∑–∞
                const quizState = {
          blockId: nextBlockId,
                  currentQuestionIndex: 0,
          startTime: Date.now(),
                  answers: [],
          isCompleted: false
                };
                userQuizStates.set(userId, quizState);
        console.log(`üîç DEBUG: Quiz state initialized:`, quizState);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å –∫–≤–∏–∑–∞
        const questions = nextBlock.questions || [];
        if (questions.length > 0) {
          const firstQuestion = questions[0];
          console.log(`üîç DEBUG: Showing first question: ${firstQuestion.message}`);
          const { keyboard, inlineKeyboard } = await createKeyboardWithBack(firstQuestion.buttons, userId, nextBlockId);
          await sendMediaMessage(ctx, firstQuestion.message, firstQuestion.mediaFiles, keyboard, inlineKeyboard);
        } else {
          console.log(`‚ùå No questions found in quiz block`);
          await ctx.reply('–ö–≤–∏–∑ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
        }
      } else {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –±–ª–æ–∫ (—Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ-–∫–≤–∏–∑–æ–≤)
        const { keyboard, inlineKeyboard } = await createKeyboardWithBack(nextBlock.buttons, userId, nextBlockId);
              await sendMediaMessage(ctx, nextBlock.message, nextBlock.mediaFiles, keyboard, inlineKeyboard);
      }
      
      console.log(`‚úÖ Successfully navigated to block ${nextBlockId}`);
      return;
    } catch (error) {
      console.error('‚ùå Critical error in message handler:', error);
      console.error('üìÑ Error stack:', error.stack);
      console.error('üìÑ Error details:', {
        message: error.message,
        name: error.name,
        code: error.code,
        response: error.response
      });
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ 403 (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞)
      if (error.response && error.response.error_code === 403) {
        console.log(`‚ö†Ô∏è User blocked the bot (403 error in message handler), ignoring`);
        return;
      }
      
      // –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      try {
        console.log(`üîç DEBUG: Attempting to send error message to user`);
        console.log(`üîç DEBUG: Error details:`, {
          message: error.message,
          name: error.name,
          code: error.code,
          stack: error.stack
        });
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /start –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞.');
        console.log(`üîç DEBUG: Error message sent successfully`);
      } catch (replyError) {
        console.error('‚ùå Error sending error message:', replyError);
        console.error('‚ùå Reply error details:', {
          message: replyError.message,
          name: replyError.name,
          code: replyError.code
        });
      }
      
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏ –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ
      try {
        cleanupOldUserData();
      } catch (cleanupError) {
        console.error('‚ùå Error during cleanup:', cleanupError);
      }
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª—é–±—ã—Ö callback_query (–Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏)
  bot.on('callback_query', async (ctx) => {
    const userId = ctx.from?.id;
    if (!userId) return;
    
    // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ (–Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç)
    setImmediate(async () => {
      try {
        await handleUserSubscription(userId);
        await saveUserToMongo(ctx);
      } catch (error) {
        console.error('‚ùå Background callback error:', error);
      }
    });
    
    // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback_query –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    await ctx.answerCbQuery();
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ–Ω—é –∫–æ–º–∞–Ω–¥ Telegram
async function updateBotCommands(bot, blocks) {
  const commands = blocks
    .filter(block => block.command)
    .map(block => ({
      command: block.command.replace(/^\//, ''),
      description: (block.description || '').substring(0, 50)
    }))
    .sort((a, b) => a.command.localeCompare(b.command));
  if (commands.length > 0) {
    await bot.telegram.setMyCommands(commands);
    console.log('–ú–µ–Ω—é –∫–æ–º–∞–Ω–¥ Telegram –æ–±–Ω–æ–≤–ª–µ–Ω–æ:', commands);
  } else {
    await bot.telegram.setMyCommands([]);
    console.log('–ú–µ–Ω—é –∫–æ–º–∞–Ω–¥ Telegram –æ—á–∏—â–µ–Ω–æ');
  }
}

// –ü—Ä–∏–º–µ—Ä —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –≤—ã–¥–∞—á–∏ –±–æ–Ω—É—Å–∞ –∑–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç—å
async function checkAndRewardLoyalty(userId, thresholdKey) {
  let loyalty = await Loyalty.findOne({ userId });
  if (!loyalty) {
    loyalty = new Loyalty({ userId, rewards: {} });
  }
  if (!loyalty.rewards[thresholdKey]) {
    // –í—ã–¥–∞—ë–º –±–æ–Ω—É—Å (–æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è, –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∏ —Ç.–¥.)
    // ... —Ç–≤–æ—è –ª–æ–≥–∏–∫–∞ –≤—ã–¥–∞—á–∏ ...
    loyalty.rewards[thresholdKey] = true;
    await loyalty.save();
    return true; // –ë–æ–Ω—É—Å –≤—ã–¥–∞–Ω
  }
  return false; // –£–∂–µ –ø–æ–ª—É—á–∞–ª
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏
function startLoyaltyChecker() {
  console.log('[LOYALTY] –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
  setInterval(async () => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
    if (!bot) {
      console.log('[LOYALTY] –ë–æ—Ç –µ—â–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É');
              return;
            }
    try {
      console.log('[LOYALTY] –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏');
      
      // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–æ–≥—Ä–∞–º–º—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏
      const loyaltyConfig = await LoyaltyConfig.findOne({ botId });
      if (!loyaltyConfig) {
        console.log('[LOYALTY] –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –±–æ—Ç–∞', botId);
        return;
      }
      if (!loyaltyConfig.isEnabled) {
        console.log('[LOYALTY] –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∞');
                return;
              }
      
      console.log('[LOYALTY] –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ –≤–∫–ª—é—á–µ–Ω–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
      
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞
      const users = await User.find({ botId, isSubscribed: true });
      console.log(`[LOYALTY] –ù–∞–π–¥–µ–Ω–æ ${users.length} –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
      
      for (const user of users) {
        try {
          // –ü–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
          if (loyaltyConfig.channelSettings && loyaltyConfig.channelSettings.isRequired) {
            const channelId = loyaltyConfig.channelSettings.channelId;
            if (channelId) {
              console.log(`[LOYALTY] –ü–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.userId} –Ω–∞ –∫–∞–Ω–∞–ª ${channelId}`);
              const isSubscribed = await checkChannelSubscription(user.userId, channelId);
              
              if (!isSubscribed) {
                console.log(`[LOYALTY] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.userId} –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª ${channelId}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
                continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
              } else {
                console.log(`[LOYALTY] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.userId} –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª ${channelId}, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º`);
              }
            }
          }
          
          // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏
          let loyaltyRecord = await Loyalty.findOne({ botId, userId: user.userId });
          if (!loyaltyRecord) {
            loyaltyRecord = new Loyalty({
              botId,
              userId: user.userId,
              rewards: {
                '1m': false,
                '24h': false,
                '7d': false,
                '30d': false,
                '90d': false,
                '180d': false,
                '360d': false
              }
            });
            await loyaltyRecord.save();
            console.log(`[LOYALTY] –°–æ–∑–¥–∞–Ω–∞ –∑–∞–ø–∏—Å—å –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.userId}`);
          }
          
          // –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ–¥–ø–∏—Å–∫–∏
          const subscriptionTime = Date.now() - user.firstSubscribedAt.getTime();
          const minutes = Math.floor(subscriptionTime / (1000 * 60));
          const hours = Math.floor(subscriptionTime / (1000 * 60 * 60));
          const days = Math.floor(subscriptionTime / (1000 * 60 * 60 * 24));
          
          console.log(`[LOYALTY] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.userId}: –ø–æ–¥–ø–∏—Å–∞–Ω ${minutes} –º–∏–Ω—É—Ç, ${hours} —á–∞—Å–æ–≤, ${days} –¥–Ω–µ–π`);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –ø–µ—Ä–∏–æ–¥
          const periods = [
            { key: '1m', minutes: 1 },
            { key: '24h', hours: 24 },
            { key: '7d', days: 7 },
            { key: '30d', days: 30 },
            { key: '90d', days: 90 },
            { key: '180d', days: 180 },
            { key: '360d', days: 360 }
          ];
          
          for (const period of periods) {
            const config = loyaltyConfig.messages[period.key];
            if (!config || !config.enabled) {
              console.log(`[LOYALTY] –ü–µ—Ä–∏–æ–¥ ${period.key} –æ—Ç–∫–ª—é—á–µ–Ω`);
              continue;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥ –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —ç—Ç–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
            let hasReachedPeriod = false;
            if (period.minutes && minutes >= period.minutes) hasReachedPeriod = true;
            if (period.hours && hours >= period.hours) hasReachedPeriod = true;
            if (period.days && days >= period.days) hasReachedPeriod = true;
            
            console.log(`[LOYALTY] –ü–µ—Ä–∏–æ–¥ ${period.key}: –¥–æ—Å—Ç–∏–≥–Ω—É—Ç=${hasReachedPeriod}, —É–∂–µ –ø–æ–ª—É—á–µ–Ω=${loyaltyRecord.rewards[period.key]}`);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–ª—É—á–∞–ª –ª–∏ —É–∂–µ –Ω–∞–≥—Ä–∞–¥—É –∑–∞ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥
            if (hasReachedPeriod && !loyaltyRecord.rewards[period.key]) {
              console.log(`[LOYALTY] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.userId} –¥–æ—Å—Ç–∏–≥ –ø–µ—Ä–∏–æ–¥–∞ ${period.key}, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ`);
              
              // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
              let message = config.message;
              if (!message) {
                const periodLabels = {
                  '1m': '1 –º–∏–Ω—É—Ç—É',
                  '24h': '24 —á–∞—Å–∞',
                  '7d': '7 –¥–Ω–µ–π',
                  '30d': '30 –¥–Ω–µ–π',
                  '90d': '90 –¥–Ω–µ–π',
                  '180d': '180 –¥–Ω–µ–π',
                  '360d': '360 –¥–Ω–µ–π'
                };
                message = `–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —Å –Ω–∞–º–∏ —É–∂–µ ${periodLabels[period.key]}! üéâ`;
              }
              
              // –ò—â–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è —ç—Ç–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
              const availablePromoCodes = await LoyaltyPromoCode.find({
                botId,
                period: period.key,
                activated: false
              });
              
              if (availablePromoCodes.length > 0) {
                // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥
                const randomIndex = Math.floor(Math.random() * availablePromoCodes.length);
                const selectedPromoCode = availablePromoCodes[randomIndex];
                
                message += `\n\nüéÅ –í–∞—à –ø—Ä–æ–º–æ–∫–æ–¥: \`${selectedPromoCode.code}\``;
                
                // –ü–æ–º–µ—á–∞–µ–º –ø—Ä–æ–º–æ–∫–æ–¥ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π
                await LoyaltyPromoCode.updateOne(
                  { _id: selectedPromoCode._id },
                  { 
                    activated: true, 
                    activatedBy: user.userId, 
                    activatedAt: new Date() 
                  }
                );
                console.log(`[LOYALTY] –ü—Ä–æ–º–æ–∫–æ–¥ ${selectedPromoCode.code} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.userId} –∑–∞ –ø–µ—Ä–∏–æ–¥ ${period.key}`);
              } else {
                console.log(`[LOYALTY] –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞ ${period.key}`);
              }
              
              // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
              await bot.telegram.sendMessage(user.userId, message, { parse_mode: 'Markdown' });
              console.log(`[LOYALTY] –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.userId}`);
              
              // –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –Ω–∞–≥—Ä–∞–¥–∞ –≤—ã–¥–∞–Ω–∞
              await Loyalty.updateOne(
                { botId, userId: user.userId },
                { [`rewards.${period.key}`]: true }
              );
              
              console.log(`[LOYALTY] –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥ ${period.key} –≤—ã–¥–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.userId}`);
            }
          }
          
        } catch (userError) {
          console.error(`[LOYALTY] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.userId}:`, userError);
        }
      }
      
    } catch (error) {
      console.error('[LOYALTY] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏:', error);
    }
  }, 10000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∫–≤–∏–∑–æ–≤ –∏–∑ MongoDB
async function loadCompletedQuizzes() {
  try {
    console.log('=== [BOOT] –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∫–≤–∏–∑—ã –∏–∑ MongoDB ===');
    const completedQuizzesFromDB = await QuizStats.find({ botId });
    
    console.log(`=== [BOOT] –ù–∞–π–¥–µ–Ω–æ ${completedQuizzesFromDB.length} –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∫–≤–∏–∑–æ–≤ ===`);
    
    for (const quizStat of completedQuizzesFromDB) {
      const quizKey = `${quizStat.userId}_${quizStat.blockId}`;
      completedQuizzes.set(quizKey, true);
    }
    
    console.log(`=== [BOOT] –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${completedQuizzes.size} –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∫–≤–∏–∑–æ–≤ –≤ –ø–∞–º—è—Ç—å ===`);
  } catch (error) {
    console.error('‚ùå Error loading completed quizzes:', error);
  }
}

async function startBot() {
  console.log('=== [BOOT] startBot –≤—ã–∑–≤–∞–Ω ===');
  bot = new Telegraf(token);
  
  // –°—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
  let errorCount = 0;
  const maxErrors = 10;
  const errorWindow = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
  const handleCriticalError = (error) => {
    errorCount++;
    console.error(`‚ùå Critical bot error #${errorCount}:`, error);
    
    if (errorCount >= maxErrors) {
      console.error(`üö® Too many errors (${errorCount}), but continuing to run...`);
      // –ù–µ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å, –∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
      errorCount = Math.max(0, errorCount - 5);
    }
    
    // –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫ —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç
    setTimeout(() => {
      errorCount = Math.max(0, errorCount - 1);
    }, errorWindow);
  };
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∫–≤–∏–∑—ã –∏–∑ MongoDB
  await loadCompletedQuizzes();
  
  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
  setupBotHandlers(bot, state.blocks, state.connections);

  // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é –∫–æ–º–∞–Ω–¥ Telegram
  await updateBotCommands(bot, state.blocks);
  
  // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ª–æ–≥–≥–µ—Ä –¥–ª—è –≤—Å–µ—Ö –∞–ø–¥–µ–π—Ç–æ–≤ Telegram
  bot.use((ctx, next) => {
    // –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    console.log(`üì® ${ctx.updateType} from ${ctx.from?.id || 'unknown'}: ${ctx.message?.text || 'no text'}`);
    return next();
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –±–æ—Ç–∞
  bot.catch((err, ctx) => {
    console.error('‚ùå Bot error:', err);
    handleCriticalError(err);
  });
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram API
  try {
    console.log('=== [BOOT] –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram API... ===');
    const botInfo = await bot.telegram.getMe();
    console.log('=== [BOOT] Telegram API –¥–æ—Å—Ç—É–ø–µ–Ω, bot info:', botInfo);
  } catch (apiError) {
    console.error('=== [BOOT] –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API:', apiError);
    console.error('=== [BOOT] –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å api.telegram.org');
    process.exit(1);
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ç–µ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  try {
    console.log('=== [BOOT] –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ç–µ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏... ===');
    const { exec } = require('child_process');
    exec('ping -c 1 api.telegram.org', (error, stdout, stderr) => {
      if (error) {
        console.error('=== [BOOT] –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é:', error);
      } else {
        console.log('=== [BOOT] –°–µ—Ç—å —Ä–∞–±–æ—Ç–∞–µ—Ç, ping —É—Å–ø–µ—à–µ–Ω');
      }
    });
  } catch (networkError) {
    console.error('=== [BOOT] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ç–∏:', networkError);
  }

  // –û—á–∏—â–∞–µ–º webhook –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
  try {
    console.log('=== [BOOT] –û—á–∏—â–∞–µ–º webhook... ===');
    await bot.telegram.deleteWebhook();
    console.log('=== [BOOT] Webhook –æ—á–∏—â–µ–Ω ===');
  } catch (webhookError) {
    console.error('=== [BOOT] –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ webhook:', webhookError);
  }

  // –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ polling —Ä–µ–∂–∏–º–µ
    console.log('=== [BOOT] –ó–∞–ø—É—Å–∫–∞–µ–º bot.launch() –≤ polling —Ä–µ–∂–∏–º–µ... ===');
    
  // –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
  console.log('=== [BOOT] –ó–∞–ø—É—Å–∫–∞–µ–º bot.launch() —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ... ===');
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–æ–≥—Ä–∞–º–º—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ —Å—Ä–∞–∑—É
  startLoyaltyChecker();
  
  try {
    await bot.launch();
    console.log('=== [BOOT] Bot started successfully in polling mode ===');
    console.log('Bot started successfully');
  } catch (launchError) {
    console.error('=== [BOOT] Bot launch failed:', launchError);
    console.error('=== [BOOT] –ü—Ä–æ–±—É–µ–º –∑–∞–ø—É—Å–∫ –±–µ–∑ await...');
    
    // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –∑–∞–ø—É—Å–∫
    bot.launch().then(() => {
      console.log('=== [BOOT] Bot started successfully (alternative) ===');
    }).catch((altError) => {
      console.error('=== [BOOT] Alternative launch failed:', altError);
    });
    }
    
    // –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –∑–∞–ø—É—Å–∫–µ
    errorCount = 0;
  
  // Graceful shutdown
  process.once('SIGINT', async () => {
    console.log('=== [SHUTDOWN] Received SIGINT, stopping bot gracefully ===');
    try {
      await bot.stop('SIGINT');
      console.log('=== [SHUTDOWN] Bot stopped successfully ===');
      process.exit(0);
  } catch (error) {
      console.error('=== [SHUTDOWN] Error stopping bot:', error);
    process.exit(1);
  }
  });
  
  process.once('SIGTERM', async () => {
    console.log('=== [SHUTDOWN] Received SIGTERM, stopping bot gracefully ===');
    try {
      await bot.stop('SIGTERM');
      console.log('=== [SHUTDOWN] Bot stopped successfully ===');
      process.exit(0);
    } catch (error) {
      console.error('=== [SHUTDOWN] Error stopping bot:', error);
      process.exit(1);
    }
  });
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
  process.on('uncaughtException', (error) => {
    console.error('‚ùå Uncaught Exception:', error);
    handleCriticalError(error);
  });
  
  process.on('unhandledRejection', (reason, promise) => {
    console.error('‚ùå Unhandled Rejection at:', promise, 'reason:', reason);
    handleCriticalError(reason);
  });
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
User.countDocuments({ botId }).then(count => {
  if (count === 0) {
    console.log(`[MongoDB] –ö–æ–ª–ª–µ–∫—Ü–∏—è users –ø—É—Å—Ç–∞ –¥–ª—è botId=${botId}`);
  } else {
    console.log(`[MongoDB] –í –∫–æ–ª–ª–µ–∫—Ü–∏–∏ users —É–∂–µ –µ—Å—Ç—å ${count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è botId=${botId}`);
  }
}).catch(err => {
  console.error('[MongoDB] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á—ë—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', err);
});

// –õ–æ–≥–∏—Ä—É–µ–º editorState –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
console.log('=== editorState –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ ===');
console.dir(state, { depth: 5 });
console.log('==============================');

console.log('=== [BOOT] botProcess.js –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è ===');

mongoose.connection.on('connected', () => {
  console.log('=== [BOOT] Mongoose connected ===');
});
mongoose.connection.on('error', (err) => {
  console.error('=== [BOOT] Mongoose connection error ===', err);
});

console.log('=== [BOOT] –ê—Ä–≥—É–º–µ–Ω—Ç—ã –∑–∞–ø—É—Å–∫–∞:', { token, botId, stateJsonLength: stateJson.length });

try {
  state = JSON.parse(stateJson);
  console.log('=== [BOOT] editorState —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω ===');
  console.log('=== [BOOT] blocks:', Array.isArray(state.blocks) ? state.blocks.length : '–Ω–µ—Ç');
  console.log('=== [BOOT] connections:', Array.isArray(state.connections) ? state.connections.length : '–Ω–µ—Ç');
} catch (error) {
  console.error('=== [BOOT] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ editorState:', error);
  process.exit(1);
}

startBot();