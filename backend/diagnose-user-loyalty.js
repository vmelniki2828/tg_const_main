#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node diagnose-user-loyalty.js <botId> <userId>
 */

const axios = require('axios');

async function diagnoseUserLoyalty(botId, userId) {
  try {
    console.log(`üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –≤ –±–æ—Ç–µ ${botId}`);
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userResponse = await axios.get(`http://localhost:3001/api/users/${botId}/${userId}`);
    const user = userResponse.data;
    
    console.log('\nüìä –î–ê–ù–ù–´–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:');
    console.log(`- ID: ${user.userId}`);
    console.log(`- Username: ${user.username}`);
    console.log(`- First Name: ${user.firstName}`);
    console.log(`- –ü–æ–¥–ø–∏—Å–∞–Ω: ${user.isSubscribed ? '–î–∞' : '–ù–µ—Ç'}`);
    console.log(`- –ü–µ—Ä–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞: ${user.firstSubscribedAt}`);
    console.log(`- –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–¥–ø–∏—Å–∫–∞: ${user.lastSubscribedAt}`);
    console.log(`- –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏: ${user.loyaltyStartedAt}`);
    console.log(`- –û–±—â–µ–µ –≤—Ä–µ–º—è –ø–æ–¥–ø–∏—Å–∫–∏: ${user.totalSubscribedTime} –º—Å`);
    console.log(`- –í—Ä–µ–º—è –Ω–∞ –ø–∞—É–∑–µ: ${user.pausedTime} –º—Å`);
    
    // –í—ã—á–∏—Å–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ –≤—Ä–µ–º—è –ø–æ–¥–ø–∏—Å–∫–∏
    const loyaltyStartTime = new Date(user.loyaltyStartedAt).getTime();
    const now = Date.now();
    const effectiveTime = now - loyaltyStartTime - (user.pausedTime || 0);
    
    console.log('\n‚è∞ –†–ê–°–ß–ï–¢ –í–†–ï–ú–ï–ù–ò –õ–û–Ø–õ–¨–ù–û–°–¢–ò:');
    console.log(`- –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏: ${new Date(loyaltyStartTime).toISOString()}`);
    console.log(`- –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: ${new Date(now).toISOString()}`);
    console.log(`- –í—Ä–µ–º—è –Ω–∞ –ø–∞—É–∑–µ: ${user.pausedTime || 0} –º—Å`);
    console.log(`- –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ –≤—Ä–µ–º—è: ${effectiveTime} –º—Å`);
    console.log(`- –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ –≤—Ä–µ–º—è: ${Math.floor(effectiveTime / (1000 * 60))} –º–∏–Ω—É—Ç`);
    console.log(`- –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ –≤—Ä–µ–º—è: ${Math.floor(effectiveTime / (1000 * 60 * 60))} —á–∞—Å–æ–≤`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–∏–æ–¥—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏
    const periods = [
      { key: '1m', name: '1 –º–∏–Ω—É—Ç–∞', time: 1 * 60 * 1000 },
      { key: '24h', name: '24 —á–∞—Å–∞', time: 24 * 60 * 60 * 1000 },
      { key: '7d', name: '7 –¥–Ω–µ–π', time: 7 * 24 * 60 * 60 * 1000 },
      { key: '30d', name: '30 –¥–Ω–µ–π', time: 30 * 24 * 60 * 60 * 1000 },
      { key: '90d', name: '90 –¥–Ω–µ–π', time: 90 * 24 * 60 * 60 * 1000 },
      { key: '180d', name: '180 –¥–Ω–µ–π', time: 180 * 24 * 60 * 60 * 1000 },
      { key: '360d', name: '360 –¥–Ω–µ–π', time: 360 * 24 * 60 * 60 * 1000 }
    ];
    
    console.log('\nüéÅ –ü–ï–†–ò–û–î–´ –õ–û–Ø–õ–¨–ù–û–°–¢–ò:');
    periods.forEach(period => {
      const isPassed = effectiveTime >= period.time;
      const status = isPassed ? '‚úÖ –ü–†–û–ô–î–ï–ù' : '‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ';
      const timeLeft = isPassed ? 0 : period.time - effectiveTime;
      const timeLeftMinutes = Math.floor(timeLeft / (1000 * 60));
      const timeLeftHours = Math.floor(timeLeft / (1000 * 60 * 60));
      
      console.log(`${period.name}: ${status}`);
      if (!isPassed) {
        console.log(`  - –û—Å—Ç–∞–ª–æ—Å—å: ${timeLeftHours}—á ${timeLeftMinutes % 60}–º`);
      }
    });
    
    // –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å—å –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏
    const loyaltyResponse = await axios.get(`http://localhost:3001/api/loyalty/${botId}/${userId}`);
    const loyalty = loyaltyResponse.data;
    
    console.log('\nüèÜ –ù–ê–ì–†–ê–î–´ –õ–û–Ø–õ–¨–ù–û–°–¢–ò:');
    periods.forEach(period => {
      const isRewarded = loyalty.rewards[period.key];
      const isPassed = effectiveTime >= period.time;
      const status = isRewarded ? '‚úÖ –ü–û–õ–£–ß–ï–ù–ê' : (isPassed ? '‚ùå –ù–ï –ü–û–õ–£–ß–ï–ù–ê' : '‚è≥ –ù–ï –î–û–°–¢–£–ü–ù–ê');
      console.log(`${period.name}: ${status}`);
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–º–æ–∫–æ–¥—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏
    console.log('\nüé´ –ü–†–û–ú–û–ö–û–î–´ –õ–û–Ø–õ–¨–ù–û–°–¢–ò:');
    for (const period of periods) {
      try {
        const promoCodesResponse = await axios.get(`http://localhost:3001/api/loyalty-promocodes/${botId}/${period.key}`);
        const promoCodes = promoCodesResponse.data;
        
        const userPromoCodes = promoCodes.promoCodes.filter(p => p.activatedBy == userId);
        console.log(`${period.name}: ${userPromoCodes.length} –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ`);
        
        if (userPromoCodes.length > 0) {
          userPromoCodes.forEach(promo => {
            console.log(`  - ${promo.code} (${promo.activatedAt})`);
          });
        }
      } catch (error) {
        console.log(`${period.name}: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤`);
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏
    const configResponse = await axios.get(`http://localhost:3001/api/loyalty-config/${botId}`);
    const config = configResponse.data;
    
    console.log('\n‚öôÔ∏è –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –õ–û–Ø–õ–¨–ù–û–°–¢–ò:');
    console.log(`- –ü—Ä–æ–≥—Ä–∞–º–º–∞ –≤–∫–ª—é—á–µ–Ω–∞: ${config.isEnabled ? '–î–∞' : '–ù–µ—Ç'}`);
    
    if (config.isEnabled) {
      periods.forEach(period => {
        const periodConfig = config.messages[period.key];
        console.log(`${period.name}: ${periodConfig?.enabled ? '–í–∫–ª—é—á–µ–Ω' : '–û—Ç–∫–ª—é—á–µ–Ω'}`);
      });
    }
    
    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    console.log('\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
    
    const passedPeriods = periods.filter(p => effectiveTime >= p.time);
    const unrewardedPeriods = passedPeriods.filter(p => !loyalty.rewards[p.key]);
    
    if (unrewardedPeriods.length > 0) {
      console.log('‚ùå –ü–†–û–ë–õ–ï–ú–´:');
      unrewardedPeriods.forEach(period => {
        console.log(`- –ü–µ—Ä–∏–æ–¥ ${period.name} –ø—Ä–æ–π–¥–µ–Ω, –Ω–æ –Ω–∞–≥—Ä–∞–¥–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω–∞`);
      });
      
      console.log('\nüîß –†–ï–®–ï–ù–ò–ï:');
      console.log('–í—ã–ø–æ–ª–Ω–∏—Ç–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π:');
      console.log(`curl -X POST http://localhost:3001/api/diagnose-loyalty-mismatch/${botId}`);
    } else {
      console.log('‚úÖ –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã –ø–æ–ª—É—á–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ:', error.message);
    if (error.response) {
      console.error('üìÑ –î–µ—Ç–∞–ª–∏ –æ—Ç–≤–µ—Ç–∞:', error.response.data);
    }
  }
}

// –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const botId = process.argv[2];
const userId = process.argv[3];

if (!botId || !userId) {
  console.error('‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–∫–∞–∑–∞–Ω—ã botId –∏ userId');
  console.log('üìñ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node diagnose-user-loyalty.js <botId> <userId>');
  console.log('üìñ –ü—Ä–∏–º–µ—Ä: node diagnose-user-loyalty.js 1757891140598 953796574');
  process.exit(1);
}

console.log(`üöÄ –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –≤ –±–æ—Ç–µ ${botId}`);
diagnoseUserLoyalty(botId, userId);
