const fs = require('fs');
const path = require('path');

// –ë–∞–∑–æ–≤–∞—è –ø–∞–ø–∫–∞ –¥–ª—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –∫–≤–∏–∑–æ–≤
const PROMOCODES_DIR = path.join(__dirname, 'promocodes');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–≤–∏–∑–∞
function getQuizPromoCodesPath(quizId) {
  return path.join(PROMOCODES_DIR, `quiz_${quizId}.csv`);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∫–≤–∏–∑
function loadPromoCodesFromFile(filePath, quizId) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —á–∏—Ç–∞–µ—Ç—Å—è –∏ –≤–∞–ª–∏–¥–µ–Ω
    const fileContent = fs.readFileSync(filePath, 'utf8');
    const lines = fileContent.split('\n').filter(line => line.trim());
    if (lines.length < 2) throw new Error('–ù–µ—Ç –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤');
    
    // –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª –≤ –ø–∞–ø–∫—É –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ —Å –∏–º–µ–Ω–µ–º –∫–≤–∏–∑–∞
    const quizPromoCodesPath = getQuizPromoCodesPath(quizId);
    fs.copyFileSync(filePath, quizPromoCodesPath);
    
    console.log(`‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –¥–ª—è –∫–≤–∏–∑–∞ ${quizId}: ${lines.length - 1} –∫–æ–¥–æ–≤`);
    return true;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –¥–ª—è –∫–≤–∏–∑–∞ ${quizId}:`, error.message);
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–≤–∏–∑–∞
function getRandomPromoCode(quizId) {
  const filePath = getQuizPromoCodesPath(quizId);
  if (!fs.existsSync(filePath)) {
    console.log(`‚ö†Ô∏è –§–∞–π–ª –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –¥–ª—è –∫–≤–∏–∑–∞ ${quizId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    return null;
  }
  
  try {
    const fileContent = fs.readFileSync(filePath, 'utf8');
    const lines = fileContent.split('\n').filter(line => line.trim());
    const dataLines = lines.slice(1);
    const promoCodes = dataLines
      .map(line => {
        const [code, user, activated] = line.split(',').map(field => field.trim());
        return { code, user, activated: activated === '1' || activated === 'true' };
      })
      .filter(item => item.code && !item.activated);

    if (promoCodes.length === 0) {
      console.log(`‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –¥–ª—è –∫–≤–∏–∑–∞ ${quizId}`);
      return null;
    }

    const randomIndex = Math.floor(Math.random() * promoCodes.length);
    const promoCode = promoCodes[randomIndex];

    // –û–±–Ω–æ–≤–∏—Ç—å —Ñ–∞–π–ª, –ø–æ–º–µ—Ç–∏–≤ –ø—Ä–æ–º–æ–∫–æ–¥ –∫–∞–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
    const updatedLines = lines.map(line => {
      if (line.startsWith(promoCode.code + ',')) {
        const parts = line.split(',');
        parts[2] = '1';
        return parts.join(',');
      }
      return line;
    });
    fs.writeFileSync(filePath, updatedLines.join('\n'));

    console.log(`üéÅ –í—ã–¥–∞–Ω –ø—Ä–æ–º–æ–∫–æ–¥ ${promoCode.code} –¥–ª—è –∫–≤–∏–∑–∞ ${quizId}`);
    return promoCode.code;
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –¥–ª—è –∫–≤–∏–∑–∞ ${quizId}:`, error);
    return null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ —É –∫–≤–∏–∑–∞
function hasPromoCodes(quizId) {
  const filePath = getQuizPromoCodesPath(quizId);
  if (!fs.existsSync(filePath)) {
    return false;
  }
  
  try {
    const fileContent = fs.readFileSync(filePath, 'utf8');
    const lines = fileContent.split('\n').filter(line => line.trim());
    const dataLines = lines.slice(1);
    const availablePromoCodes = dataLines
      .map(line => {
        const [code, user, activated] = line.split(',').map(field => field.trim());
        return { code, user, activated: activated === '1' || activated === 'true' };
      })
      .filter(item => item.code && !item.activated);
    
    return availablePromoCodes.length > 0;
  } catch (error) {
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
function getAvailablePromoCodesCount(quizId) {
  const filePath = getQuizPromoCodesPath(quizId);
  if (!fs.existsSync(filePath)) {
    return 0;
  }
  
  try {
    const fileContent = fs.readFileSync(filePath, 'utf8');
    const lines = fileContent.split('\n').filter(line => line.trim());
    const dataLines = lines.slice(1);
    const availablePromoCodes = dataLines
      .map(line => {
        const [code, user, activated] = line.split(',').map(field => field.trim());
        return { code, user, activated: activated === '1' || activated === 'true' };
      })
      .filter(item => item.code && !item.activated);
    
    return availablePromoCodes.length;
  } catch (error) {
    return 0;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
function updatePromoCodeFile(code, activated, quizId) {
  const filePath = getQuizPromoCodesPath(quizId);
  if (!filePath || !fs.existsSync(filePath)) return;
  
  try {
    const fileContent = fs.readFileSync(filePath, 'utf8');
    const lines = fileContent.split('\n');
    const updatedLines = lines.map(line => {
      if (line.startsWith(code + ',')) {
        const parts = line.split(',');
        parts[2] = activated ? '1' : '0';
        return parts.join(',');
      }
      return line;
    });
    fs.writeFileSync(filePath, updatedLines.join('\n'));
    console.log(`üìù –û–±–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–º–æ–∫–æ–¥–∞ ${code} –¥–ª—è –∫–≤–∏–∑–∞ ${quizId}`);
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –¥–ª—è –∫–≤–∏–∑–∞ ${quizId}:`, error.message);
  }
}

module.exports = {
  loadPromoCodesFromFile,
  getRandomPromoCode,
  updatePromoCodeFile,
  hasPromoCodes,
  getAvailablePromoCodesCount
}; 