const express = require('express');
const cors = require('cors');
const fs = require('fs');
const fsPromises = require('fs').promises;
const path = require('path');
const { spawn } = require('child_process');
const multer = require('multer');
const mongoose = require('mongoose');
const { QuizStats, Bot, User, PromoCode, Loyalty } = require('./models');

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
try {
  require('dotenv').config();
} catch (error) {
  console.log('‚ö†Ô∏è dotenv not available, using default environment variables');
}

const app = express();
const PORT = process.env.PORT || 3001;
const HOST = process.env.HOST || '0.0.0.0';

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
const MONGO_URI = 'mongodb://157.230.20.252:27017/tg_const_main';
mongoose.connect(MONGO_URI, { useNewUrlParser: true, useUnifiedTopology: true })
  .then(() => console.log('‚úÖ MongoDB connected'))
  .catch(err => {
    console.error('‚ùå MongoDB connection error:', err);
    process.exit(1);
  });

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
const corsOptions = {
  origin: process.env.CORS_ORIGIN || 'http://localhost:3000',
  credentials: true,
  optionsSuccessStatus: 200
};

app.use(cors(corsOptions));
app.use(express.json({ limit: '50mb' }));
app.use(express.urlencoded({ limit: '50mb', extended: true }));

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ multer –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
const storage = multer.diskStorage({
  destination: function (req, file, cb) {
    const uploadDir = path.join(__dirname, 'uploads');
    // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if (!fs.existsSync(uploadDir)) {
      fs.mkdirSync(uploadDir, { recursive: true });
    }
    cb(null, uploadDir);
  },
  filename: function (req, file, cb) {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);
    cb(null, file.fieldname + '-' + uniqueSuffix + path.extname(file.originalname));
  }
});

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ multer –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ —Å –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏
const promoCodeStorage = multer.diskStorage({
  destination: function (req, file, cb) {
    const promoCodeDir = path.join(__dirname, 'promocodes');
    // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if (!fs.existsSync(promoCodeDir)) {
      fs.mkdirSync(promoCodeDir, { recursive: true });
    }
    cb(null, promoCodeDir);
  },
  filename: function (req, file, cb) {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
    cb(null, file.originalname);
  }
});

const promoCodeUpload = multer({ 
  storage: promoCodeStorage,
  limits: {
    fileSize: 10 * 1024 * 1024 // 10MB –ª–∏–º–∏—Ç –¥–ª—è CSV —Ñ–∞–π–ª–æ–≤
  },
  fileFilter: function (req, file, cb) {
    // –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ CSV —Ñ–∞–π–ª—ã
    if (file.mimetype === 'text/csv' || file.originalname.endsWith('.csv')) {
      cb(null, true);
    } else {
      cb(new Error('–†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ CSV —Ñ–∞–π–ª—ã'), false);
    }
  }
});

const upload = multer({ 
  storage: storage,
  limits: {
    fileSize: 50 * 1024 * 1024 // 50MB –ª–∏–º–∏—Ç
  },
  fileFilter: function (req, file, cb) {
    // –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –≤–∏–¥–µ–æ, –∞—É–¥–∏–æ –∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã
    const allowedTypes = [
      'image/jpeg', 'image/png', 'image/gif', 'image/webp',
      'video/mp4', 'video/avi', 'video/mov', 'video/wmv',
      'audio/mpeg', 'audio/wav', 'audio/ogg', 'audio/mp3',
      'application/pdf', 'application/msword', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
      'text/plain'
    ];
    
    if (allowedTypes.includes(file.mimetype)) {
      cb(null, true);
    } else {
      cb(new Error('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞'), false);
    }
  }
});

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫
app.use('/uploads', express.static(path.join(__dirname, 'uploads')));

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤
app.post('/api/upload-media', upload.single('media'), async (req, res) => {
  try {
    if (!req.file) {
      return res.status(400).json({ error: '–§–∞–π–ª –Ω–µ –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω' });
    }

    const fileInfo = {
      filename: req.file.filename,
      originalname: req.file.originalname,
      mimetype: req.file.mimetype,
      size: req.file.size,
      path: `/uploads/${req.file.filename}`
    };

    console.log('File uploaded:', fileInfo);
    res.json({ success: true, file: fileInfo });
  } catch (error) {
    console.error('Upload error:', error);
    res.status(500).json({ error: error.message });
  }
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤
app.delete('/api/delete-media', async (req, res) => {
  try {
    const { filename } = req.body;
    
    if (!filename) {
      return res.status(400).json({ error: '–ò–º—è —Ñ–∞–π–ª–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–æ' });
    }

    const filePath = path.join(__dirname, 'uploads', filename);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    if (!fs.existsSync(filePath)) {
      console.log(`File not found for deletion: ${filePath}`);
      return res.json({ success: true, message: '–§–∞–π–ª —É–∂–µ —É–¥–∞–ª–µ–Ω –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' });
    }

    // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª
    await fsPromises.unlink(filePath);
    console.log(`File deleted successfully: ${filename}`);
    
    res.json({ success: true, message: '–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω' });
  } catch (error) {
    console.error('Error deleting file:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞' });
  }
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤
app.post('/api/cleanup-unused-media', async (req, res) => {
  try {
    const { usedFilenames } = req.body;
    
    if (!usedFilenames || !Array.isArray(usedFilenames)) {
      return res.status(400).json({ error: '–°–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —É–∫–∞–∑–∞–Ω' });
    }

    const uploadsDir = path.join(__dirname, 'uploads');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏ uploads
    if (!fs.existsSync(uploadsDir)) {
      return res.json({ success: true, message: '–ü–∞–ø–∫–∞ uploads –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç', deletedCount: 0 });
    }

    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ uploads
    const files = await fsPromises.readdir(uploadsDir);
    const usedFilenamesSet = new Set(usedFilenames);
    
    let deletedCount = 0;
    const errors = [];

    // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è
    for (const file of files) {
      if (!usedFilenamesSet.has(file)) {
        try {
          const filePath = path.join(uploadsDir, file);
          await fsPromises.unlink(filePath);
          console.log(`Unused file deleted: ${file}`);
          deletedCount++;
        } catch (error) {
          console.error(`Error deleting unused file ${file}:`, error);
          errors.push({ file, error: error.message });
        }
      }
    }

    res.json({ 
      success: true, 
      message: `–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£–¥–∞–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${deletedCount}`,
      deletedCount,
      errors: errors.length > 0 ? errors : undefined
    });
  } catch (error) {
    console.error('Error cleaning up unused media:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤' });
  }
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–≤–∏–∑–æ–≤
app.get('/api/quiz-stats', async (req, res) => {
  try {
    const stats = await readQuizStats();
    res.json(stats);
  } catch (error) {
    console.error('Error getting quiz stats:', error);
    res.status(500).json({ error: 'Failed to get quiz stats' });
  }
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ –±—ç–∫–∞–ø–∞
app.post('/api/restore-stats', async (req, res) => {
  try {
    const restored = await restoreStatsFromBackup();
    if (restored) {
      res.json({ success: true, message: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑ –±—ç–∫–∞–ø–∞' });
    } else {
      res.status(404).json({ error: '–ë—ç–∫–∞–ø –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
  } catch (error) {
    console.error('Error restoring stats:', error);
    res.status(500).json({ error: 'Failed to restore stats' });
  }
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–≤–∏–∑–∞ (–æ—Ç –±–æ—Ç–æ–≤)
app.post('/api/quiz-stats', async (req, res) => {
  try {
    console.log('üìä –ü–æ–ª—É—á–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç –±–æ—Ç–∞:', req.body);
    const { quizId, userAttempt } = req.body;
    
    const stats = await readQuizStats();
    
    if (!stats[quizId]) {
      stats[quizId] = {
        totalAttempts: 0,
        successfulCompletions: 0,
        failedAttempts: 0,
        userAttempts: []
      };
    }
    
    const quizStats = stats[quizId];
    quizStats.totalAttempts++;
    
    if (userAttempt.success) {
      quizStats.successfulCompletions++;
    } else {
      quizStats.failedAttempts++;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ø—ã—Ç–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    quizStats.userAttempts.push(userAttempt);
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –≤ –∏—Å—Ç–æ—Ä–∏–∏ (–º–∞–∫—Å–∏–º—É–º 1000)
    if (quizStats.userAttempts.length > 1000) {
      quizStats.userAttempts = quizStats.userAttempts.slice(-1000);
    }
    
    await writeQuizStats(stats);
    console.log(`‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∫–≤–∏–∑–∞ ${quizId} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ API`);
    console.log(`üìä –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userAttempt.userName} (${userAttempt.userId})`);
    
    res.json({ success: true });
  } catch (error) {
    console.error('‚ùå Error adding quiz stats:', error);
    res.status(500).json({ error: error.message });
  }
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–≤–∏–∑–∞
app.get('/api/quiz-promocodes/:quizId', async (req, res) => {
  try {
    const { quizId } = req.params;
    
    // –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –∫–≤–∏–∑–∞
    const promoCodesPath = path.join(__dirname, 'promocodes', `quiz_${quizId}.csv`);
    
    if (!fs.existsSync(promoCodesPath)) {
      return res.json({
        quizId: quizId,
        hasPromoCodes: false,
        totalPromoCodes: 0,
        availablePromoCodes: 0,
        usedPromoCodes: 0,
        promoCodesList: []
      });
    }
    
    // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
    const fileContent = fs.readFileSync(promoCodesPath, 'utf8');
    const lines = fileContent.split('\n').filter(line => line.trim());
    const dataLines = lines.slice(1); // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    
    const promoCodesList = dataLines.map(line => {
      const [code, user, activated] = line.split(',').map(field => field.trim());
      return {
        code: code,
        user: user || '',
        activated: activated === '1' || activated === 'true',
        activatedBy: activated === '1' || activated === 'true' ? user : null
      };
    }).filter(item => item.code); // –§–∏–ª—å—Ç—Ä—É–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
    
    const totalPromoCodes = promoCodesList.length;
    const usedPromoCodes = promoCodesList.filter(pc => pc.activated).length;
    const availablePromoCodes = totalPromoCodes - usedPromoCodes;
    
    res.json({
      quizId: quizId,
      hasPromoCodes: true,
      totalPromoCodes: totalPromoCodes,
      availablePromoCodes: availablePromoCodes,
      usedPromoCodes: usedPromoCodes,
      promoCodesList: promoCodesList
    });
    
  } catch (error) {
    console.error('Error reading promo codes stats:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤' });
  }
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ —Å –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏
app.post('/api/upload-promocodes', promoCodeUpload.single('promocodes'), async (req, res) => {
  try {
    if (!req.file) {
      return res.status(400).json({ error: '–§–∞–π–ª –Ω–µ –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω' });
    }

    const { quizId } = req.body; // –ü–æ–ª—É—á–∞–µ–º ID –∫–≤–∏–∑–∞ –∏–∑ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
    if (!quizId) {
      return res.status(400).json({ error: 'ID –∫–≤–∏–∑–∞ –Ω–µ —É–∫–∞–∑–∞–Ω' });
    }

    const filePath = req.file.path;
    console.log(`Promo codes file uploaded for quiz ${quizId}:`, filePath);

    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏
    const { loadPromoCodesFromFile } = require('./promoCodeManager');
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–º–æ–∫–æ–¥—ã –∏–∑ —Ñ–∞–π–ª–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–≤–∏–∑–∞
    const success = loadPromoCodesFromFile(filePath, quizId);
    
    if (success) {
      res.json({ 
        success: true, 
        message: `–§–∞–π–ª —Å –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –¥–ª—è –∫–≤–∏–∑–∞ ${quizId}`,
        filename: req.file.originalname,
        path: filePath,
        quizId: quizId
      });
    } else {
      res.status(400).json({ 
        error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞' 
      });
    }
  } catch (error) {
    console.error('Promo codes upload error:', error);
    res.status(500).json({ error: error.message });
  }
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –∫–≤–∏–∑–∞
app.delete('/api/quiz-promocodes/:quizId', async (req, res) => {
  try {
    const { quizId } = req.params;
    
    if (!quizId) {
      return res.status(400).json({ error: 'ID –∫–≤–∏–∑–∞ –Ω–µ —É–∫–∞–∑–∞–Ω' });
    }

    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
    const { deleteQuizPromoCodes } = require('./promoCodeManager');
    
    const success = deleteQuizPromoCodes(quizId);
    
    if (success) {
      res.json({ 
        success: true, 
        message: `–ü—Ä–æ–º–æ–∫–æ–¥—ã –¥–ª—è –∫–≤–∏–∑–∞ ${quizId} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã`,
        quizId: quizId
      });
    } else {
      res.status(500).json({ 
        error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –∫–≤–∏–∑–∞' 
      });
    }
  } catch (error) {
    console.error('Promo codes deletion error:', error);
    res.status(500).json({ error: error.message });
  }
});

// –•—Ä–∞–Ω–∏–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –±–æ—Ç–æ–≤
const activeProcesses = new Map();

// –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–≤–∏–∑–æ–≤
const QUIZ_STATS_FILE = path.join(__dirname, 'quizStats.json');

const STATE_FILE = path.join(__dirname, 'editorState.json');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è
const wait = (ms) => new Promise(resolve => setTimeout(resolve, ms));

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
async function readState() {
  try {
    const data = await fsPromises.readFile(STATE_FILE, 'utf8');
    return JSON.parse(data);
  } catch (error) {
    console.error('Error reading state:', error);
    return {
      bots: [],
      activeBot: null
    };
  }
}

// –ó–∞–º–µ–Ω–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ readQuizStats –∏ writeQuizStats –Ω–∞ —Ä–∞–±–æ—Ç—É —Å MongoDB
async function readQuizStats() {
  try {
    const statsArr = await QuizStats.find({});
    const stats = {};
    statsArr.forEach(qs => {
      stats[qs.quizId] = {
        userAttempts: qs.attempts,
        totalAttempts: qs.attempts.length,
        successfulCompletions: qs.attempts.filter(a => a.success).length,
        failedAttempts: qs.attempts.filter(a => !a.success).length
      };
    });
    return stats;
  } catch (error) {
    console.error('‚ùå Error reading quiz stats from MongoDB:', error);
    return {};
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ –±—ç–∫–∞–ø–∞
async function restoreStatsFromBackup() {
  try {
    const backupDir = path.join(__dirname, 'backups');
    if (!fs.existsSync(backupDir)) {
      console.log('üìÅ –ü–∞–ø–∫–∞ –±—ç–∫–∞–ø–æ–≤ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      return false;
    }
    
    const backupFiles = fs.readdirSync(backupDir)
      .filter(file => file.startsWith('quizStats-backup-') && file.endsWith('.json'))
      .sort()
      .reverse();
    
    if (backupFiles.length === 0) {
      console.log('üìÅ –ë—ç–∫–∞–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      return false;
    }
    
    const latestBackup = backupFiles[0];
    const backupPath = path.join(backupDir, latestBackup);
    
    console.log(`üìÅ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ –±—ç–∫–∞–ø–∞: ${latestBackup}`);
    
    const backupData = await fsPromises.readFile(backupPath, 'utf8');
    const backupStats = JSON.parse(backupData);
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    await fsPromises.writeFile(QUIZ_STATS_FILE, JSON.stringify(backupStats, null, 2));
    
    console.log(`‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑ –±—ç–∫–∞–ø–∞: ${latestBackup}`);
    console.log(`üìä –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∫–≤–∏–∑–æ–≤: ${Object.keys(backupStats).length}`);
    
    return true;
  } catch (error) {
    console.error('‚ùå Error restoring from backup:', error);
    return false;
  }
}

async function writeQuizStats(stats) {
  try {
    for (const quizId in stats) {
      const quizStats = stats[quizId];
      await QuizStats.updateOne(
        { quizId },
        { $set: { quizId, attempts: quizStats.userAttempts } },
        { upsert: true }
      );
    }
    console.log('üìù –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–≤–∏–∑–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ MongoDB');
  } catch (error) {
    console.error('‚ùå Error writing quiz stats to MongoDB:', error);
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
async function writeState(state) {
  try {
    await fsPromises.writeFile(STATE_FILE, JSON.stringify(state, null, 2));
  } catch (error) {
    console.error('Error writing state:', error);
    throw new Error('Failed to save state');
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–æ—Ç–∞
async function stopBot(botId) {
  if (activeProcesses.has(botId)) {
    const process = activeProcesses.get(botId);
    console.log(`Stopping bot ${botId}...`);
    
    return new Promise((resolve) => {
      const timeout = setTimeout(() => {
        console.log(`Force killing bot ${botId}...`);
        process.kill('SIGKILL');
        activeProcesses.delete(botId);
        resolve();
      }, 5000);

      process.once('exit', () => {
        clearTimeout(timeout);
        activeProcesses.delete(botId);
        console.log(`Bot ${botId} stopped`);
        resolve();
      });

      process.kill('SIGTERM');
    });
  }
  return Promise.resolve();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async function startBot(bot) {
  console.log(`Starting bot ${bot.id}...`);
  
  const botProcess = spawn('node', [
    path.join(__dirname, 'botProcess.js'),
    bot.token,
    bot.id,
    JSON.stringify(bot.editorState)
  ]);

  return new Promise((resolve, reject) => {
    let isResolved = false;
    let startTimeout;

    const cleanup = () => {
      clearTimeout(startTimeout);
      botProcess.stdout.removeAllListeners();
      botProcess.stderr.removeAllListeners();
      botProcess.removeAllListeners('exit');
    };

    botProcess.stdout.on('data', (data) => {
      const output = data.toString();
      console.log(`Bot ${bot.id} output:`, output);
      
      if (output.includes('Bot started successfully')) {
        isResolved = true;
        cleanup();
        resolve(botProcess);
      }
    });

    botProcess.stderr.on('data', (data) => {
      const error = data.toString();
      console.error(`Bot ${bot.id} error:`, error);
    });

    botProcess.on('exit', (code) => {
      if (!isResolved) {
        cleanup();
        reject(new Error(`Bot process exited with code ${code}`));
      }
    });

    startTimeout = setTimeout(() => {
      if (!isResolved) {
        cleanup();
        console.log(`Bot ${bot.id} launch timeout, assuming it's running`);
        resolve(botProcess);
      }
    }, 20000); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–æ 20 —Å–µ–∫—É–Ω–¥
  });
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–æ—Ç–∞
app.put('/api/bots/:id', async (req, res) => {
  try {
    const { name, token, editorState } = req.body;
    console.log('PUT /api/bots/:id - Request body:', { name, token: token ? '***' : 'undefined', editorState });
    
    const state = await readState();
    const botIndex = state.bots.findIndex(b => b.id === req.params.id);
    
    if (botIndex === -1) {
      console.log('Bot not found:', req.params.id);
      res.status(404).json({ error: 'Bot not found' });
      return;
    }

    console.log('Found bot at index:', botIndex);

    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –±–æ—Ç–∞
    const updatedBot = {
      ...state.bots[botIndex],
      name: name || state.bots[botIndex].name,
      token: token || state.bots[botIndex].token,
      editorState: editorState || state.bots[botIndex].editorState
    };

    console.log('Updated bot state:', updatedBot);
    state.bots[botIndex] = updatedBot;

    await writeState(state);
    console.log('State saved successfully');
    res.json({ success: true });
  } catch (error) {
    console.error('Error updating bot:', error);
    res.status(500).json({ error: 'Failed to update bot' });
  }
});

// –ê–∫—Ç–∏–≤–∞—Ü–∏—è –±–æ—Ç–∞
app.post('/api/bots/:id/activate', async (req, res) => {
  try {
    console.log('POST /api/bots/:id/activate - Bot ID:', req.params.id);
    
    const state = await readState();
    const bot = state.bots.find(b => b.id === req.params.id);
    
    if (!bot) {
      console.log('Bot not found for activation:', req.params.id);
      res.status(404).json({ error: 'Bot not found' });
      return;
    }

    console.log('Found bot for activation:', { id: bot.id, name: bot.name, isActive: bot.isActive });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
    if (!bot.token) {
      console.log('Bot token is missing');
      res.status(400).json({ error: 'Bot token is missing' });
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
    if (!bot.editorState || !bot.editorState.blocks || !bot.editorState.connections) {
      console.log('Invalid editor state');
      res.status(400).json({ error: 'Invalid editor state' });
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –±–ª–æ–∫–∞
    const startBlock = bot.editorState.blocks.find(b => b.id === 'start');
    if (!startBlock) {
      console.log('Start block is missing');
      res.status(400).json({ error: 'Missing start block in editor state' });
      return;
    }

    console.log('All validations passed, starting bot activation...');

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–æ—Ç, –µ—Å–ª–∏ –æ–Ω –∑–∞–ø—É—â–µ–Ω
    if (activeProcesses.has(bot.id)) {
      console.log(`Bot ${bot.id} is already running, stopping it first...`);
      await stopBot(bot.id);
      await wait(3000); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å –±–æ—Ç–∞
    try {
      console.log(`Starting new bot process for ${bot.id}...`);
      const botProcess = await startBot(bot);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      activeProcesses.set(bot.id, botProcess);
      state.activeBot = bot.id;
      state.bots = state.bots.map(b => ({
        ...b,
        isActive: b.id === bot.id
      }));
      
      await writeState(state);
      console.log(`Bot ${bot.id} activated successfully`);
      res.json({ success: true });
    } catch (error) {
      console.error(`Error starting bot ${bot.id}:`, error);
      res.status(500).json({ error: error.message });
    }
  } catch (error) {
    console.error('Error in activate endpoint:', error);
    res.status(500).json({ error: 'Failed to activate bot' });
  }
});

// –î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –±–æ—Ç–∞
app.post('/api/bots/:id/deactivate', async (req, res) => {
  try {
    console.log('POST /api/bots/:id/deactivate - Bot ID:', req.params.id);
    
    const state = await readState();
    const bot = state.bots.find(b => b.id === req.params.id);
    
    if (!bot) {
      console.log('Bot not found for deactivation:', req.params.id);
      res.status(404).json({ error: 'Bot not found' });
      return;
    }

    console.log('Found bot for deactivation:', { id: bot.id, name: bot.name, isActive: bot.isActive });

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞
    await stopBot(bot.id);
    await wait(1000); // –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫—É

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    state.bots = state.bots.map(b => ({
      ...b,
      isActive: b.id === bot.id ? false : b.isActive
    }));

    if (state.activeBot === bot.id) {
      state.activeBot = null;
    }

    await writeState(state);
    console.log(`Bot ${bot.id} deactivated successfully`);
    res.json({ success: true });
  } catch (error) {
    console.error('Error in deactivate endpoint:', error);
    res.status(500).json({ error: 'Failed to deactivate bot' });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –±–æ—Ç–æ–≤
app.get('/api/bots', async (req, res) => {
  try {
    const bots = await Bot.find({});
    res.json({ bots, activeBot: null });
  } catch (error) {
    res.status(500).json({ error: 'Failed to load bots', details: error.message });
  }
});

// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞
app.post('/api/bots', async (req, res) => {
  try {
    const { name, token } = req.body;
    const state = await readState();
    
    const newBot = {
      id: Date.now().toString(),
      name,
      token,
      isActive: false,
      editorState: {
        blocks: [
          {
            id: 'start',
            type: 'start',
            position: { x: 2500, y: 2500 },
            message: '–ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞',
            buttons: [],
            mediaFiles: null
          }
        ],
        connections: [],
        pan: { x: 0, y: 0 },
        scale: 1
      }
    };

    state.bots.push(newBot);
    await writeState(state);
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ MongoDB
    await Bot.create({
      id: newBot.id,
      name: newBot.name,
      token: newBot.token,
      isActive: newBot.isActive,
      editorState: newBot.editorState
    });
    
    res.json({ id: newBot.id, name: newBot.name, isActive: newBot.isActive });
  } catch (error) {
    res.status(500).json({ error: 'Failed to create bot' });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–æ—Ç–∞
app.get('/api/bots/:id', async (req, res) => {
  try {
    const state = await readState();
    const bot = state.bots.find(b => b.id === req.params.id);
    if (!bot) {
      res.status(404).json({ error: 'Bot not found' });
      return;
    }
    res.json(bot);
  } catch (error) {
    res.status(500).json({ error: 'Failed to load bot state' });
  }
});

// –£–¥–∞–ª–µ–Ω–∏–µ –±–æ—Ç–∞
app.delete('/api/bots/:id', async (req, res) => {
  try {
    const state = await readState();
    const botIndex = state.bots.findIndex(b => b.id === req.params.id);
    
    if (botIndex === -1) {
      res.status(404).json({ error: 'Bot not found' });
      return;
    }

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞ –µ—Å–ª–∏ –æ–Ω –∑–∞–ø—É—â–µ–Ω
    await stopBot(req.params.id);

    // –£–¥–∞–ª—è–µ–º –±–æ—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
    state.bots.splice(botIndex, 1);
    
    // –ï—Å–ª–∏ —É–¥–∞–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –±–æ—Ç–∞, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º activeBot
    if (state.activeBot === req.params.id) {
      state.activeBot = null;
    }

    await writeState(state);
    res.json({ success: true });
  } catch (error) {
    res.status(500).json({ error: 'Failed to delete bot' });
  }
});

// –≠–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–≤–∏–∑–æ–≤ –≤ XLSX —Ñ–∞–π–ª
app.post('/api/export-quiz-stats', async (req, res) => {
  try {
    const { stats, promoCodesStats, blocks } = req.body;
    const csvSections = [];

    // 1. –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    csvSections.push('–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞');
    csvSections.push([
      '–î–∞—Ç–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞',
      '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–≤–∏–∑–æ–≤',
      '–í—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫',
      '–£—Å–ø–µ—à–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫',
      '–ù–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫',
      '–û–±—â–∞—è —É—Å–ø–µ—à–Ω–æ—Å—Ç—å (%)'
    ].join(','));
    const totalAttempts = Object.values(stats).reduce((sum, quiz) => sum + quiz.totalAttempts, 0);
    const totalSuccessful = Object.values(stats).reduce((sum, quiz) => sum + quiz.successfulCompletions, 0);
    const totalFailed = Object.values(stats).reduce((sum, quiz) => sum + quiz.failedAttempts, 0);
    const overallSuccessRate = totalAttempts > 0 ? ((totalSuccessful / totalAttempts) * 100).toFixed(1) : 0;
    csvSections.push([
      new Date().toLocaleString('ru-RU'),
      blocks.length,
      totalAttempts,
      totalSuccessful,
      totalFailed,
      overallSuccessRate
    ].join(','));
    csvSections.push('');

    // 2. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–≤–∏–∑–∞–º
    csvSections.push('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–≤–∏–∑–∞–º');
    csvSections.push([
      'ID –∫–≤–∏–∑–∞',
      '–ù–∞–∑–≤–∞–Ω–∏–µ –∫–≤–∏–∑–∞',
      '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤',
      '–í—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫',
      '–£—Å–ø–µ—à–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫',
      '–ù–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫',
      '–£—Å–ø–µ—à–Ω–æ—Å—Ç—å (%)',
      '–í—Å–µ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤',
      '–î–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤',
      '–í—ã–¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤'
    ].join(','));
    blocks.forEach(quiz => {
      const quizStats = stats[quiz.id] || {
        totalAttempts: 0,
        successfulCompletions: 0,
        failedAttempts: 0,
        userAttempts: []
      };
      const promoStats = promoCodesStats[quiz.id] || {
        hasPromoCodes: false,
        totalPromoCodes: 0,
        availablePromoCodes: 0,
        usedPromoCodes: 0,
        promoCodesList: []
      };
      const successRate = quizStats.totalAttempts > 0 
        ? ((quizStats.successfulCompletions / quizStats.totalAttempts) * 100).toFixed(1) 
        : 0;
      csvSections.push([
        quiz.id,
        `"${(quiz.message || `–ö–≤–∏–∑ ${quiz.id}`).replace(/"/g, '""')}"`,
        quiz.questions?.length || 0,
        quizStats.totalAttempts,
        quizStats.successfulCompletions,
        quizStats.failedAttempts,
        successRate,
        promoStats.totalPromoCodes,
        promoStats.availablePromoCodes,
        promoStats.usedPromoCodes
      ].join(','));
    });
    csvSections.push('');

    // 3. –ü–æ–ø—ã—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    csvSections.push('–ü–æ–ø—ã—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
    csvSections.push([
      'ID –∫–≤–∏–∑–∞',
      '–ù–∞–∑–≤–∞–Ω–∏–µ –∫–≤–∏–∑–∞',
      'ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
      '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
      '–§–∞–º–∏–ª–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
      'Username',
      '–î–∞—Ç–∞ –ø–æ–ø—ã—Ç–∫–∏',
      '–†–µ–∑—É–ª—å—Ç–∞—Ç',
      '–ë–∞–ª–ª—ã',
      '–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏',
      '–í—Ä–µ–º—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è (—Å–µ–∫)',
      '–ü–æ–ª—É—á–µ–Ω–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥',
      '–û—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
    ].join(','));
    blocks.forEach(quiz => {
      const quizStats = stats[quiz.id] || { userAttempts: [] };
      quizStats.userAttempts.forEach((attempt) => {
        const answersString = attempt.answers ? 
          attempt.answers.slice(0, 20).map((answer, idx) => 
            `–í–æ–ø—Ä–æ—Å ${idx + 1}: ${answer.selectedAnswer ? answer.selectedAnswer.replace(/"/g, '""').substring(0, 100) : ''} (${answer.isCorrect ? '–ü—Ä–∞–≤–∏–ª—å–Ω–æ' : '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ'})`
          ).join('; ') : '';
        csvSections.push([
          quiz.id,
          `"${(quiz.message || `–ö–≤–∏–∑ ${quiz.id}`).replace(/"/g, '""')}"`,
          attempt.userId,
          `"${(attempt.userName || `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${attempt.userId}`).replace(/"/g, '""').substring(0, 100)}"`,
          `"${(attempt.userLastName || '').replace(/"/g, '""').substring(0, 100)}"`,
          attempt.username ? `@${attempt.username}` : '',
          new Date(attempt.timestamp).toLocaleString('ru-RU'),
          attempt.success ? '–£—Å–ø–µ—à–Ω–æ' : '–ù–µ—É–¥–∞—á–Ω–æ',
          attempt.score !== undefined ? `${attempt.score}/${quiz.questions?.length || 0}` : '',
          attempt.successRate ? `${attempt.successRate.toFixed(1)}%` : '',
          attempt.duration ? Math.round(attempt.duration / 1000) : '',
          attempt.promoCode || '',
          `"${answersString.replace(/"/g, '""').substring(0, 1000)}"`
        ].join(','));
      });
    });
    csvSections.push('');

    // 4. –ü—Ä–æ–º–æ–∫–æ–¥—ã
    csvSections.push('–ü—Ä–æ–º–æ–∫–æ–¥—ã');
    csvSections.push([
      'ID –∫–≤–∏–∑–∞',
      '–ù–∞–∑–≤–∞–Ω–∏–µ –∫–≤–∏–∑–∞',
      '–ü—Ä–æ–º–æ–∫–æ–¥',
      '–°—Ç–∞—Ç—É—Å',
      '–í—ã–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é',
      '–î–∞—Ç–∞ –≤—ã–¥–∞—á–∏'
    ].join(','));
    blocks.forEach(quiz => {
      const promoStats = promoCodesStats[quiz.id] || { promoCodesList: [] };
      promoStats.promoCodesList.forEach((promo) => {
        csvSections.push([
          quiz.id,
          `"${(quiz.message || `–ö–≤–∏–∑ ${quiz.id}`).replace(/"/g, '""')}"`,
          promo.code,
          promo.activated ? '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω' : '–î–æ—Å—Ç—É–ø–µ–Ω',
          promo.activatedBy || '',
          promo.activatedAt ? new Date(promo.activatedAt).toLocaleString('ru-RU') : ''
        ].join(','));
      });
    });

    const csvContent = csvSections.join('\r\n');
    const fileName = `quiz-stats-${new Date().toISOString().split('T')[0]}.csv`;
    res.setHeader('Content-Type', 'text/csv; charset=utf-8');
    res.setHeader('Content-Disposition', `attachment; filename="${fileName}"`);
    res.send(csvContent);
  } catch (error) {
    console.error('Error exporting quiz stats to CSV:', error);
    res.status(500).json({ 
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏',
      details: error.message 
    });
  }
});

// –¢–µ—Å—Ç–æ–≤—ã–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ ExcelJS
app.get('/api/test-excel', async (req, res) => {
  try {
    console.log('üß™ Testing ExcelJS library...');
    
    let ExcelJS;
    try {
      ExcelJS = require('exceljs');
      console.log('‚úÖ ExcelJS library loaded successfully');
    } catch (excelError) {
      console.error('‚ùå Error loading ExcelJS library:', excelError);
      return res.status(500).json({ 
        error: 'ExcelJS library not available',
        details: excelError.message 
      });
    }
    
    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
    const workbook = new ExcelJS.Workbook();
    const worksheet = workbook.addWorksheet('Test');
    
    worksheet.columns = [
      { header: 'Test Column', key: 'test', width: 15 }
    ];
    
    worksheet.addRow({ test: 'Test Data' });
    
    const buffer = await workbook.xlsx.writeBuffer();
    console.log('‚úÖ Test XLSX file generated successfully');
    
    res.setHeader('Content-Type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
    res.setHeader('Content-Disposition', 'attachment; filename="test.xlsx"');
    res.send(buffer);
    
  } catch (error) {
    console.error('‚ùå Error in test Excel endpoint:', error);
    res.status(500).json({ 
      error: 'Test failed',
      details: error.message 
    });
  }
});

// Health check endpoint
app.get('/api/health', (req, res) => {
  const health = {
    status: 'OK',
    timestamp: new Date().toISOString(),
    uptime: process.uptime(),
    memory: process.memoryUsage(),
    activeUsers: 0 // –ë—É–¥–µ–º –ø–æ–ª—É—á–∞—Ç—å –∏–∑ botProcess.js –ø–æ–∑–∂–µ
  };
  
  res.json(health);
});

// API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–æ–≤

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞
async function shutdownServer(signal) {
  console.log(`Received ${signal}, shutting down...`);
  
  // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –±–æ—Ç—ã
  for (const [botId] of activeProcesses.entries()) {
    await stopBot(botId);
  }
  
  process.exit(0);
}

process.on('SIGINT', () => shutdownServer('SIGINT'));
process.on('SIGTERM', () => shutdownServer('SIGTERM'));

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
app.listen(PORT, HOST, async () => {
  console.log(`üöÄ Server running on ${HOST}:${PORT}`);
  
  // –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –±—ç–∫–∞–ø–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
  try {
    const stats = await readQuizStats();
    if (Object.keys(stats).length === 0) {
      console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É—Å—Ç–∞—è, –ø—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ –±—ç–∫–∞–ø–∞...');
      const restored = await restoreStatsFromBackup();
      if (restored) {
        console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑ –±—ç–∫–∞–ø–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ');
      } else {
        console.log('üìä –ë—ç–∫–∞–ø –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º —Å –ø—É—Å—Ç–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
      }
    } else {
      console.log(`üìä –ó–∞–≥—Ä—É–∂–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: ${Object.keys(stats).length} –∫–≤–∏–∑–æ–≤`);
    }
  } catch (error) {
    console.error('‚ùå Error during startup stats check:', error);
  }
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–æ–≤
  try {
    const state = await readState();
    console.log(`ü§ñ Loaded ${state.bots.length} bots from state`);
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –±–æ—Ç—ã
    for (const bot of state.bots) {
      if (bot.active) {
        await startBot(bot);
      }
    }
  } catch (error) {
    console.error('Error loading state:', error);
  }
}); 

app.get('/api/bots/:id/full', async (req, res) => {
  try {
    const botId = req.params.id;
    const bot = await Bot.findOne({ id: botId });
    if (!bot) {
      return res.status(404).json({ error: 'Bot not found' });
    }
    const users = await User.find({ botId });
    const quizStats = await QuizStats.find({ botId });
    const promoCodes = await PromoCode.find({ botId });
    const loyalties = await Loyalty.find({ botId });
    res.json({ bot, users, quizStats, promoCodes, loyalties });
  } catch (error) {
    res.status(500).json({ error: 'Failed to load full bot info', details: error.message });
  }
}); 