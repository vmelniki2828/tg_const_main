const express = require('express');
const cors = require('cors');
const TelegramBot = require('node-telegram-bot-api');

const app = express();
app.use(cors());
app.use(express.json());

let bot = null;
let dialogChains = {
  blocks: [],
  connections: [],
  startBlockId: null
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏–∑ –∫–Ω–æ–ø–æ–∫
const createKeyboard = (blockId) => {
  const block = dialogChains.blocks.find(b => b.id === blockId);
  if (!block || !block.buttons) return {};

  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 2 –≤ —Ä—è–¥ –¥–ª—è –ª—É—á—à–µ–π –≤–∏–∑—É–∞–ª—å–Ω–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
  const buttonRows = [];
  for (let i = 0; i < block.buttons.length; i += 2) {
    const row = block.buttons.slice(i, i + 2).map(button => ({
      text: button.text
    }));
    buttonRows.push(row);
  }

  // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –±–ª–æ–∫
  if (blockId !== dialogChains.startBlockId) {
    buttonRows.push([{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' }]);
  }

  return {
    reply_markup: {
      keyboard: buttonRows,
      resize_keyboard: true,
      one_time_keyboard: false
    }
  };
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –±–ª–æ–∫–∞
const sendBlockMessage = async (chatId, blockId) => {
  const block = dialogChains.blocks.find(b => b.id === blockId);
  if (!block) return;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
  if (!block.message || block.message.trim() === '') {
    console.warn(`Warning: Empty message in block ${blockId}`);
    return;
  }

  try {
    await bot.sendMessage(
      chatId,
      block.message,
      createKeyboard(blockId)
    );
  } catch (error) {
    console.error(`Error sending message for block ${blockId}:`, error);
    throw error;
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –±–ª–æ–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ
const findNextBlock = (currentBlockId, buttonText) => {
  // –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—É—â–∏–π –±–ª–æ–∫
  const currentBlock = dialogChains.blocks.find(b => b.id === currentBlockId);
  if (!currentBlock) return null;

  // –ù–∞—Ö–æ–¥–∏–º –∫–Ω–æ–ø–∫—É –ø–æ —Ç–µ–∫—Å—Ç—É
  const button = currentBlock.buttons.find(btn => btn.text === buttonText);
  if (!button) return null;

  // –ò—â–µ–º —Å–≤—è–∑—å –¥–ª—è —ç—Ç–æ–π –∫–Ω–æ–ø–∫–∏
  const connection = dialogChains.connections.find(
    conn => conn.from.blockId === currentBlockId && conn.from.buttonId === button.id
  );

  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º ID —Å–ª–µ–¥—É—é—â–µ–≥–æ –±–ª–æ–∫–∞
  return connection ? connection.to : null;
};

app.post('/api/setup-bot', async (req, res) => {
  const { botToken, welcomeMessage } = req.body;

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
  if (!botToken) {
    return res.status(400).json({ 
      success: false, 
      error: 'Bot token is required' 
    });
  }

  if (!welcomeMessage || welcomeMessage.trim() === '') {
    return res.status(400).json({ 
      success: false, 
      error: 'Welcome message is required' 
    });
  }

  try {
    if (bot) {
      bot.stopPolling();
    }

    bot = new TelegramBot(botToken, { polling: true });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    bot.onText(/\/start/, async (msg) => {
      const chatId = msg.chat.id;
      try {
        await bot.sendMessage(chatId, welcomeMessage);
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –±–ª–æ–∫, –Ω–∞—á–∏–Ω–∞–µ–º —Å –Ω–µ–≥–æ
        if (dialogChains.startBlockId) {
          await sendBlockMessage(chatId, dialogChains.startBlockId);
        }
      } catch (error) {
        console.error('Error in /start handler:', error);
      }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é)
    bot.on('message', async (msg) => {
      if (msg.text === '/start') return;

      const chatId = msg.chat.id;
      const buttonText = msg.text;

      try {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        if (buttonText === 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é') {
          if (dialogChains.startBlockId) {
            await sendBlockMessage(chatId, dialogChains.startBlockId);
          }
          return;
        }

        // –ù–∞—Ö–æ–¥–∏–º –±–ª–æ–∫, –∫–æ—Ç–æ—Ä–æ–º—É –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –Ω–∞–∂–∞—Ç–∞—è –∫–Ω–æ–ø–∫–∞
        let currentBlockId = null;
        for (const block of dialogChains.blocks) {
          if (block.buttons.some(btn => btn.text === buttonText)) {
            currentBlockId = block.id;
            break;
          }
        }

        if (currentBlockId) {
          const nextBlockId = findNextBlock(currentBlockId, buttonText);
          if (nextBlockId) {
            await sendBlockMessage(chatId, nextBlockId);
          }
        }
      } catch (error) {
        console.error('Error in message handler:', error);
      }
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–æ—Ç—É
    try {
      const me = await bot.getMe();
      console.log('Bot connected successfully:', me.username);
    } catch (error) {
      console.error('Failed to connect to bot:', error);
      return res.status(400).json({ 
        success: false, 
        error: 'Failed to connect to bot. Please check your token.' 
      });
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–æ–ª–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
    res.json({ 
      success: true, 
      message: 'Bot successfully configured',
      activeConnections: dialogChains.connections.length,
      totalBlocks: dialogChains.blocks.length
    });
  } catch (error) {
    console.error('Error setting up bot:', error);
    res.status(500).json({ 
      success: false, 
      error: error.message || 'Internal server error'
    });
  }
});

// Endpoint –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–ø–æ—á–µ–∫ –¥–∏–∞–ª–æ–≥–æ–≤
app.post('/api/update-dialog-chains', (req, res) => {
  try {
    const { blocks, connections, startBlockId } = req.body;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
    if (!Array.isArray(blocks) || !Array.isArray(connections)) {
      throw new Error('Invalid data format');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –±–ª–æ–∫–∞
    if (!blocks.find(b => b.id === startBlockId)) {
      throw new Error('Start block not found');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –±–ª–æ–∫–∞—Ö
    const emptyBlocks = blocks.filter(b => !b.message || b.message.trim() === '');
    if (emptyBlocks.length > 0) {
      return res.status(400).json({
        success: false,
        error: 'Some blocks have empty messages',
        emptyBlocks: emptyBlocks.map(b => b.id)
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å–≤—è–∑–µ–π
    for (const conn of connections) {
      const fromBlock = blocks.find(b => b.id === conn.from.blockId);
      const toBlock = blocks.find(b => b.id === conn.to);
      
      if (!fromBlock || !toBlock) {
        throw new Error('Invalid connection: block not found');
      }
      
      if (!fromBlock.buttons.find(btn => btn.id === conn.from.buttonId)) {
        throw new Error('Invalid connection: button not found');
      }
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    dialogChains = {
      blocks: blocks || [],
      connections: connections || [],
      startBlockId
    };

    res.json({ 
      success: true, 
      message: 'Dialog chains updated successfully',
      activeConnections: connections.length,
      totalBlocks: blocks.length
    });
  } catch (error) {
    console.error('Error updating dialog chains:', error);
    res.status(500).json({ 
      success: false, 
      error: error.message || 'Internal server error' 
    });
  }
});

const PORT = process.env.PORT || 3001;
app.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
}); 