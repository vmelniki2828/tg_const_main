const express = require('express');
const cors = require('cors');
const fs = require('fs');
const fsPromises = require('fs').promises;
const path = require('path');
const { spawn } = require('child_process');
const multer = require('multer');
const mongoose = require('mongoose');
const { QuizStats, Bot, User, PromoCode, Loyalty, LoyaltyConfig, LoyaltyPromoCode } = require('./models');

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
try {
  require('dotenv').config();
} catch (error) {
  console.log('‚ö†Ô∏è dotenv not available, using default environment variables');
}

const app = express();
const PORT = process.env.PORT || 3001;
const HOST = process.env.HOST || '0.0.0.0';

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
const MONGO_URI = process.env.MONGO_URI || 'mongodb://157.230.20.252:27017/tg_const_main';
mongoose.connect(MONGO_URI, { 
  useNewUrlParser: true, 
  useUnifiedTopology: true,
  serverSelectionTimeoutMS: 5000,
  socketTimeoutMS: 45000
})
  .then(() => console.log('‚úÖ MongoDB connected'))
  .catch(err => {
    console.error('‚ùå MongoDB connection error:', err);
    console.error('‚ùå Retrying MongoDB connection in 5 seconds...');
    setTimeout(() => {
      mongoose.connect(MONGO_URI, { 
        useNewUrlParser: true, 
        useUnifiedTopology: true,
        serverSelectionTimeoutMS: 5000,
        socketTimeoutMS: 45000
      }).catch(retryErr => {
        console.error('‚ùå MongoDB retry failed:', retryErr);
    process.exit(1);
      });
    }, 5000);
  });

// –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB
mongoose.connection.on('connected', () => {
  console.log('üîó MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');
});

mongoose.connection.on('error', (err) => {
  console.error('‚ùå –û—à–∏–±–∫–∞ MongoDB:', err);
});

mongoose.connection.on('disconnected', () => {
  console.warn('‚ö†Ô∏è MongoDB –æ—Ç–∫–ª—é—á–µ–Ω–∞');
  console.log('üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB...');
  setTimeout(() => {
    mongoose.connect(MONGO_URI, { 
      useNewUrlParser: true, 
      useUnifiedTopology: true,
      serverSelectionTimeoutMS: 5000,
      socketTimeoutMS: 45000
    });
  }, 5000);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
process.on('SIGINT', async () => {
  console.log('üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT, –∑–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB...');
  await mongoose.connection.close();
  process.exit(0);
  });

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
const corsOptions = {
  origin: process.env.CORS_ORIGIN || 'http://localhost:3000',
  credentials: true,
  optionsSuccessStatus: 200
};

app.use(cors(corsOptions));
app.use(express.json({ limit: '100mb' }));
app.use(express.urlencoded({ limit: '100mb', extended: true }));

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ multer –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
const storage = multer.diskStorage({
  destination: function (req, file, cb) {
    const uploadDir = path.join(__dirname, 'uploads');
    // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if (!fs.existsSync(uploadDir)) {
      fs.mkdirSync(uploadDir, { recursive: true });
    }
    cb(null, uploadDir);
  },
  filename: function (req, file, cb) {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);
    cb(null, file.fieldname + '-' + uniqueSuffix + path.extname(file.originalname));
  }
});

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ multer –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ —Å –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏
const promoCodeStorage = multer.diskStorage({
  destination: function (req, file, cb) {
    const promoCodeDir = path.join(__dirname, 'promocodes');
    // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if (!fs.existsSync(promoCodeDir)) {
      fs.mkdirSync(promoCodeDir, { recursive: true });
    }
    cb(null, promoCodeDir);
  },
  filename: function (req, file, cb) {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
    cb(null, file.originalname);
  }
});

const promoCodeUpload = multer({ 
  storage: promoCodeStorage,
  limits: {
    fileSize: 100 * 1024 * 1024 // 100MB –ª–∏–º–∏—Ç –¥–ª—è CSV —Ñ–∞–π–ª–æ–≤ (—É–≤–µ–ª–∏—á–µ–Ω–æ —Å 10MB)
  },
  fileFilter: function (req, file, cb) {
    console.log('üìÅ [MULTER_PROMOCODES] –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞:', {
      fieldname: file.fieldname,
      originalname: file.originalname,
      mimetype: file.mimetype,
      size: file.size
    });
    
    // –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ CSV —Ñ–∞–π–ª—ã
    if (file.mimetype === 'text/csv' || file.originalname.endsWith('.csv')) {
      console.log('‚úÖ [MULTER_PROMOCODES] –§–∞–π–ª –ø—Ä–∏–Ω—è—Ç:', file.originalname);
      cb(null, true);
    } else {
      console.error('‚ùå [MULTER_PROMOCODES] –§–∞–π–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω:', {
        originalname: file.originalname,
        mimetype: file.mimetype,
        reason: '–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞'
      });
      cb(new Error('–†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ CSV —Ñ–∞–π–ª—ã'), false);
    }
  }
});

// Memory storage –¥–ª—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏
const loyaltyPromoCodeUpload = multer({ 
  storage: multer.memoryStorage(),
  limits: {
    fileSize: 100 * 1024 * 1024 // 100MB –ª–∏–º–∏—Ç –¥–ª—è CSV —Ñ–∞–π–ª–æ–≤ (—É–≤–µ–ª–∏—á–µ–Ω–æ —Å 10MB)
  },
  fileFilter: function (req, file, cb) {
    console.log('üìÅ [MULTER_LOYALTY] –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞:', {
      fieldname: file.fieldname,
      originalname: file.originalname,
      mimetype: file.mimetype,
      size: file.size
    });
    
    // –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ CSV —Ñ–∞–π–ª—ã
    if (file.mimetype === 'text/csv' || file.originalname.endsWith('.csv')) {
      console.log('‚úÖ [MULTER_LOYALTY] –§–∞–π–ª –ø—Ä–∏–Ω—è—Ç:', file.originalname);
      cb(null, true);
    } else {
      console.error('‚ùå [MULTER_LOYALTY] –§–∞–π–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω:', {
        originalname: file.originalname,
        mimetype: file.mimetype,
        reason: '–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞'
      });
      cb(new Error('–†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ CSV —Ñ–∞–π–ª—ã'), false);
    }
  }
});

const upload = multer({ 
  storage: storage,
  limits: {
    fileSize: 50 * 1024 * 1024 // 50MB –ª–∏–º–∏—Ç
  },
  fileFilter: function (req, file, cb) {
    // –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –≤–∏–¥–µ–æ, –∞—É–¥–∏–æ –∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã
    const allowedTypes = [
      'image/jpeg', 'image/png', 'image/gif', 'image/webp',
      'video/mp4', 'video/avi', 'video/mov', 'video/wmv',
      'audio/mpeg', 'audio/wav', 'audio/ogg', 'audio/mp3',
      'application/pdf', 'application/msword', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
      'text/plain'
    ];
    
    if (allowedTypes.includes(file.mimetype)) {
      cb(null, true);
    } else {
      cb(new Error('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞'), false);
    }
  }
});

// Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ multer
app.use((error, req, res, next) => {
  if (error instanceof multer.MulterError) {
    console.error('‚ùå [MULTER_ERROR] –û—à–∏–±–∫–∞ multer:', error);
    console.error('‚ùå [MULTER_ERROR] –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', {
      code: error.code,
      message: error.message,
      field: error.field,
      requestUrl: req.url,
      requestMethod: req.method,
      requestBody: req.body
    });
    
    if (error.code === 'LIMIT_FILE_SIZE') {
      return res.status(400).json({ 
        error: '–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π',
        details: `–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: 100MB`,
        code: error.code
      });
    }
    
    if (error.code === 'LIMIT_FILE_COUNT') {
      return res.status(400).json({ 
        error: '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ñ–∞–π–ª–æ–≤',
        details: '–ú–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ñ–∞–π–ª –∑–∞ —Ä–∞–∑',
        code: error.code
      });
    }
    
    return res.status(400).json({ 
      error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞',
      details: error.message,
      code: error.code
    });
  }
  
  if (error.message === '–†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ CSV —Ñ–∞–π–ª—ã') {
    console.error('‚ùå [FILE_TYPE_ERROR] –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞:', error.message);
    console.error('‚ùå [FILE_TYPE_ERROR] –î–µ—Ç–∞–ª–∏ –∑–∞–ø—Ä–æ—Å–∞:', {
      requestUrl: req.url,
      requestMethod: req.method,
      requestBody: req.body
    });
    return res.status(400).json({ 
      error: '–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞',
      details: '–†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ CSV —Ñ–∞–π–ª—ã'
    });
  }
  
  next(error);
});

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫
app.use('/uploads', express.static(path.join(__dirname, 'uploads')));

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤
app.post('/api/upload-media', upload.single('media'), async (req, res) => {
  try {
    if (!req.file) {
      return res.status(400).json({ error: '–§–∞–π–ª –Ω–µ –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω' });
    }

    const fileInfo = {
      filename: req.file.filename,
      originalname: req.file.originalname,
      mimetype: req.file.mimetype,
      size: req.file.size,
      path: `/uploads/${req.file.filename}`
    };

    console.log('File uploaded:', fileInfo);
    res.json({ success: true, file: fileInfo });
  } catch (error) {
    console.error('Upload error:', error);
    res.status(500).json({ error: error.message });
  }
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤
app.delete('/api/delete-media', async (req, res) => {
  try {
    const { filename } = req.body;
    
    if (!filename) {
      return res.status(400).json({ error: '–ò–º—è —Ñ–∞–π–ª–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–æ' });
    }

    const filePath = path.join(__dirname, 'uploads', filename);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    if (!fs.existsSync(filePath)) {
      console.log(`File not found for deletion: ${filePath}`);
      return res.json({ success: true, message: '–§–∞–π–ª —É–∂–µ —É–¥–∞–ª–µ–Ω –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' });
    }

    // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª
    await fsPromises.unlink(filePath);
    console.log(`File deleted successfully: ${filename}`);
    
    res.json({ success: true, message: '–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω' });
  } catch (error) {
    console.error('Error deleting file:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞' });
  }
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤
app.post('/api/cleanup-unused-media', async (req, res) => {
  try {
    const { usedFilenames } = req.body;
    
    if (!usedFilenames || !Array.isArray(usedFilenames)) {
      return res.status(400).json({ error: '–°–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —É–∫–∞–∑–∞–Ω' });
    }

    const uploadsDir = path.join(__dirname, 'uploads');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏ uploads
    if (!fs.existsSync(uploadsDir)) {
      return res.json({ success: true, message: '–ü–∞–ø–∫–∞ uploads –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç', deletedCount: 0 });
    }

    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ uploads
    const files = await fsPromises.readdir(uploadsDir);
    const usedFilenamesSet = new Set(usedFilenames);
    
    let deletedCount = 0;
    const errors = [];

    // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è
    for (const file of files) {
      if (!usedFilenamesSet.has(file)) {
        try {
          const filePath = path.join(uploadsDir, file);
          await fsPromises.unlink(filePath);
          console.log(`Unused file deleted: ${file}`);
          deletedCount++;
        } catch (error) {
          console.error(`Error deleting unused file ${file}:`, error);
          errors.push({ file, error: error.message });
        }
      }
    }

    res.json({ 
      success: true, 
      message: `–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£–¥–∞–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${deletedCount}`,
      deletedCount,
      errors: errors.length > 0 ? errors : undefined
    });
  } catch (error) {
    console.error('Error cleaning up unused media:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤' });
  }
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–≤–∏–∑–æ–≤
app.get('/api/quiz-stats', async (req, res) => {
  try {
    console.log('üìä –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–≤–∏–∑–æ–≤ –∏–∑ MongoDB...');
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ QuizStats –∏–∑ MongoDB
    const quizStatsRecords = await QuizStats.find({});
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${quizStatsRecords.length} –∑–∞–ø–∏—Å–µ–π –≤ MongoDB`);
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ blockId (ID –∫–≤–∏–∑–∞)
    const stats = {};
    
    for (const record of quizStatsRecords) {
      const quizId = record.blockId;
      
      if (!stats[quizId]) {
        stats[quizId] = {
          totalAttempts: 0,
          successfulCompletions: 0,
          failedAttempts: 0,
          averageScore: 0,
          userAttempts: []
        };
      }
      
      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏
      stats[quizId].totalAttempts++;
      
      if (record.percentage === 100) {
        stats[quizId].successfulCompletions++;
      } else {
        stats[quizId].failedAttempts++;
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ User –∫–æ–ª–ª–µ–∫—Ü–∏–∏
      let userInfo = {
        userName: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
        userLastName: '',
        username: ''
      };
      
      try {
        const user = await User.findOne({ 
          botId: record.botId, 
          userId: record.userId 
        });
        if (user) {
          userInfo = {
            userName: user.firstName || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
            userLastName: user.lastName || '',
            username: user.username || ''
          };
        }
      } catch (error) {
        console.error('‚ùå Error fetching user info:', error);
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–º–æ–∫–æ–¥, –µ—Å–ª–∏ –æ–Ω –±—ã–ª –≤—ã–¥–∞–Ω
      let promoCode = '';
      if (record.percentage === 100) {
        try {
          const promo = await PromoCode.findOne({
            botId: record.botId,
            quizId: record.blockId,
            activatedBy: record.userId,
            activated: true
          });
          if (promo) {
            promoCode = promo.code;
    }
  } catch (error) {
          console.error('‚ùå Error fetching promo code:', error);
        }
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ø—ã—Ç–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      stats[quizId].userAttempts.push({
        userId: record.userId,
        userName: userInfo.userName,
        userLastName: userInfo.userLastName,
        username: userInfo.username,
        success: record.percentage === 100,
        score: record.correctAnswers,
        successRate: record.percentage,
        timestamp: record.completedAt.getTime(),
        duration: record.completionTime * 1000, // –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
        answers: record.answers.map(answer => ({
          selectedAnswer: answer.answer,
          isCorrect: answer.isCorrect
        })),
        promoCode: promoCode
      });
    }
    
    // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–≤–∏–∑–∞
    Object.keys(stats).forEach(quizId => {
      const quizStats = stats[quizId];
      if (quizStats.userAttempts.length > 0) {
        const totalScore = quizStats.userAttempts.reduce((sum, attempt) => sum + attempt.score, 0);
        quizStats.averageScore = Math.round((totalScore / quizStats.userAttempts.length) * 10) / 10;
      }
    });
    
    console.log(`üìä –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è ${Object.keys(stats).length} –∫–≤–∏–∑–æ–≤`);
    res.json(stats);
  } catch (error) {
    console.error('‚ùå Error getting quiz stats:', error);
    res.status(500).json({ error: 'Failed to get quiz stats' });
  }
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ –±—ç–∫–∞–ø–∞ (—É–¥–∞–ª–µ–Ω - —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è MongoDB)

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–≤–∏–∑–∞ (–æ—Ç –±–æ—Ç–æ–≤)
app.post('/api/quiz-stats', async (req, res) => {
  try {
    console.log('üìä –ü–æ–ª—É—á–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç –±–æ—Ç–∞:', req.body);
    const { quizId, userAttempt } = req.body;
    
    const stats = await readQuizStats();
    
    if (!stats[quizId]) {
      stats[quizId] = {
        totalAttempts: 0,
        successfulCompletions: 0,
        failedAttempts: 0,
        userAttempts: []
      };
    }
    
    const quizStats = stats[quizId];
    quizStats.totalAttempts++;
    
    if (userAttempt.success) {
      quizStats.successfulCompletions++;
    } else {
      quizStats.failedAttempts++;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ø—ã—Ç–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    quizStats.userAttempts.push(userAttempt);
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –≤ –∏—Å—Ç–æ—Ä–∏–∏ (–º–∞–∫—Å–∏–º—É–º 10000)
    if (quizStats.userAttempts.length > 10000) {
      quizStats.userAttempts = quizStats.userAttempts.slice(-10000);
    }
    
    await writeQuizStats(stats);
    console.log(`‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∫–≤–∏–∑–∞ ${quizId} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ API`);
    console.log(`üìä –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userAttempt.userName} (${userAttempt.userId})`);
    
    res.json({ success: true });
  } catch (error) {
    console.error('‚ùå Error adding quiz stats:', error);
    res.status(500).json({ error: error.message });
  }
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–≤–∏–∑–∞
app.get('/api/quiz-promocodes/:quizId', async (req, res) => {
  try {
    const { quizId } = req.params;
    console.log(`üéÅ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–º–æ–∫–æ–¥—ã –¥–ª—è –∫–≤–∏–∑–∞ ${quizId} –∏–∑ MongoDB...`);
    
    // –ü–æ–ª—É—á–∞–µ–º botId –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–∞ –∏–ª–∏ –∏–∑ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –±–æ—Ç–∞
    const botId = req.query.botId;
    if (!botId) {
      return res.status(400).json({ error: 'botId –Ω–µ —É–∫–∞–∑–∞–Ω' });
    }
    
    // –ò—â–µ–º –ø—Ä–æ–º–æ–∫–æ–¥—ã –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∫–≤–∏–∑–∞ –∏ –±–æ—Ç–∞
    const promoCodes = await PromoCode.find({ 
      botId: botId,
      quizId: quizId 
    });
    
    console.log(`üéÅ –ù–∞–π–¥–µ–Ω–æ ${promoCodes.length} –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –¥–ª—è –∫–≤–∏–∑–∞ ${quizId}`);
    
    const promoCodesList = promoCodes.map(promo => ({
      code: promo.code,
      user: promo.activatedBy ? promo.activatedBy.toString() : '',
      activated: promo.activated,
      activatedBy: promo.activatedBy || null,
      activatedAt: promo.activatedAt
    }));
    
    const totalPromoCodes = promoCodesList.length;
    const usedPromoCodes = promoCodesList.filter(promo => promo.activated).length;
    const availablePromoCodes = totalPromoCodes - usedPromoCodes;
    
    console.log(`üéÅ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤: –≤—Å–µ–≥–æ ${totalPromoCodes}, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ ${usedPromoCodes}, –¥–æ—Å—Ç—É–ø–Ω–æ ${availablePromoCodes}`);
    
    res.json({
      quizId: quizId,
      hasPromoCodes: totalPromoCodes > 0,
      totalPromoCodes: totalPromoCodes,
      availablePromoCodes: availablePromoCodes,
      usedPromoCodes: usedPromoCodes,
      promoCodesList: promoCodesList
    });
    
  } catch (error) {
    console.error('‚ùå Promo codes error:', error);
    res.status(500).json({ error: error.message });
  }
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ —Å –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏
app.post('/api/upload-promocodes', promoCodeUpload.single('promocodes'), async (req, res) => {
  console.log('üìÅ [UPLOAD_PROMOCODES] –ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤');
  console.log('üìÅ [UPLOAD_PROMOCODES] Request body:', req.body);
  console.log('üìÅ [UPLOAD_PROMOCODES] Request file:', req.file ? {
    fieldname: req.file.fieldname,
    originalname: req.file.originalname,
    mimetype: req.file.mimetype,
    size: req.file.size,
    path: req.file.path
  } : 'No file');
  
  try {
    if (!req.file) {
      console.error('‚ùå [UPLOAD_PROMOCODES] –§–∞–π–ª –Ω–µ –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω');
      console.error('‚ùå [UPLOAD_PROMOCODES] Request details:', {
        body: req.body,
        files: req.files,
        file: req.file
      });
      return res.status(400).json({ error: '–§–∞–π–ª –Ω–µ –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω' });
    }

    const { quizId, botId } = req.body; // –ü–æ–ª—É—á–∞–µ–º ID –∫–≤–∏–∑–∞ –∏ –±–æ—Ç–∞ –∏–∑ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
    console.log('üìÅ [UPLOAD_PROMOCODES] –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:', { quizId, botId });
    
    if (!quizId) {
      console.error('‚ùå [UPLOAD_PROMOCODES] ID –∫–≤–∏–∑–∞ –Ω–µ —É–∫–∞–∑–∞–Ω');
      return res.status(400).json({ error: 'ID –∫–≤–∏–∑–∞ –Ω–µ —É–∫–∞–∑–∞–Ω' });
    }
    if (!botId) {
      console.error('‚ùå [UPLOAD_PROMOCODES] ID –±–æ—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω');
      return res.status(400).json({ error: 'ID –±–æ—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω' });
    }

    const filePath = req.file.path;
    console.log(`üéÅ [UPLOAD_PROMOCODES] –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–º–æ–∫–æ–¥—ã –¥–ª—è –∫–≤–∏–∑–∞ ${quizId} –∏ –±–æ—Ç–∞ ${botId}:`, filePath);
    console.log(`üéÅ [UPLOAD_PROMOCODES] –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ:`, {
      originalname: req.file.originalname,
      mimetype: req.file.mimetype,
      size: req.file.size,
      path: filePath
    });

    // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –∏ –ø–∞—Ä—Å–∏–º –ø—Ä–æ–º–æ–∫–æ–¥—ã
    const fs = require('fs');
    console.log('üìÅ [UPLOAD_PROMOCODES] –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª...');
    
    let fileContent;
    try {
      fileContent = fs.readFileSync(filePath, 'utf8');
      console.log(`üìÅ [UPLOAD_PROMOCODES] –§–∞–π–ª –ø—Ä–æ—á–∏—Ç–∞–Ω, —Ä–∞–∑–º–µ—Ä: ${fileContent.length} —Å–∏–º–≤–æ–ª–æ–≤`);
    } catch (readError) {
      console.error('‚ùå [UPLOAD_PROMOCODES] –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞:', readError);
      console.error('‚ùå [UPLOAD_PROMOCODES] –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', {
        message: readError.message,
        code: readError.code,
        errno: readError.errno,
        path: filePath
      });
      throw new Error(`–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: ${readError.message}`);
    }
    
    const lines = fileContent.split('\n').filter(line => line.trim());
    console.log(`üìÅ [UPLOAD_PROMOCODES] –ù–∞–π–¥–µ–Ω–æ ${lines.length} —Å—Ç—Ä–æ–∫ –≤ —Ñ–∞–π–ª–µ`);
    
    const dataLines = lines.slice(1); // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    console.log(`üìÅ [UPLOAD_PROMOCODES] –°—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö (–±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞): ${dataLines.length}`);
    
    const promoCodes = dataLines.map((line, index) => {
      try {
        const [code] = line.split(',').map(field => field.trim());
        if (!code) {
          console.log(`‚ö†Ô∏è [UPLOAD_PROMOCODES] –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ ${index + 2}: "${line}"`);
          return null;
        }
        return {
          botId: botId,
          code: code,
          quizId: quizId,
          activated: false
        };
      } catch (parseError) {
        console.error(`‚ùå [UPLOAD_PROMOCODES] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–æ–∫–∏ ${index + 2}: "${line}"`, parseError);
        return null;
      }
    }).filter(item => item); // –§–∏–ª—å—Ç—Ä—É–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏

    console.log(`üéÅ [UPLOAD_PROMOCODES] –ù–∞–π–¥–µ–Ω–æ ${promoCodes.length} –≤–∞–ª–∏–¥–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –≤ —Ñ–∞–π–ª–µ`);

    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã –¥–ª—è —ç—Ç–æ–≥–æ –∫–≤–∏–∑–∞ –∏ –±–æ—Ç–∞
    if (!botId || !quizId) {
      throw new Error('botId –∏ quizId –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤');
    }
    console.log(`üéÅ [UPLOAD_PROMOCODES] –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã –¥–ª—è –∫–≤–∏–∑–∞ ${quizId} –∏ –±–æ—Ç–∞ ${botId}`);
    
    let deleteResult;
    try {
      protectFromMassDelete('PromoCode.deleteMany', { botId, quizId });
      deleteResult = await PromoCode.deleteMany({ botId, quizId });
      console.log(`üéÅ [UPLOAD_PROMOCODES] –£–¥–∞–ª–µ–Ω–æ ${deleteResult.deletedCount} —Å—Ç–∞—Ä—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤`);
    } catch (deleteError) {
      console.error('‚ùå [UPLOAD_PROMOCODES] –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤:', deleteError);
      console.error('‚ùå [UPLOAD_PROMOCODES] –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è:', {
        message: deleteError.message,
        code: deleteError.code,
        botId,
        quizId
      });
      throw new Error(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤: ${deleteError.message}`);
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã –≤ MongoDB —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    let savedCount = 0;
    let skippedCount = 0;
    
    console.log(`üéÅ [UPLOAD_PROMOCODES] –ù–∞—á–∏–Ω–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ${promoCodes.length} –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –≤ MongoDB`);
    
    for (const promoCode of promoCodes) {
      try {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º upsert –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        const updateResult = await PromoCode.updateOne(
          { code: promoCode.code },
          promoCode,
          { upsert: true }
        );
        savedCount++;
        
        if (updateResult.upsertedCount > 0) {
          console.log(`‚úÖ [UPLOAD_PROMOCODES] –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø—Ä–æ–º–æ–∫–æ–¥: ${promoCode.code}`);
        } else if (updateResult.modifiedCount > 0) {
          console.log(`üîÑ [UPLOAD_PROMOCODES] –û–±–Ω–æ–≤–ª–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ–º–æ–∫–æ–¥: ${promoCode.code}`);
        }
      } catch (error) {
        console.error(`‚ùå [UPLOAD_PROMOCODES] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ ${promoCode.code}:`, error);
        console.error(`‚ùå [UPLOAD_PROMOCODES] –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:`, {
          message: error.message,
          code: error.code,
          promoCode: promoCode.code,
          botId: promoCode.botId,
          quizId: promoCode.quizId
        });
        skippedCount++;
      }
    }
    
    console.log(`üéÅ [UPLOAD_PROMOCODES] –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${savedCount} –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –≤ MongoDB, –ø—Ä–æ–ø—É—â–µ–Ω–æ ${skippedCount}`);

    // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    try {
      fs.unlinkSync(filePath);
      console.log(`üìÅ [UPLOAD_PROMOCODES] –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª ${filePath} —É–¥–∞–ª–µ–Ω`);
    } catch (unlinkError) {
      console.error('‚ö†Ô∏è [UPLOAD_PROMOCODES] –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞:', unlinkError);
      console.error('‚ö†Ô∏è [UPLOAD_PROMOCODES] –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞:', {
        message: unlinkError.message,
        code: unlinkError.code,
        path: filePath
      });
      // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ —Ñ–∞–π–ª —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω
    }

    console.log(`‚úÖ [UPLOAD_PROMOCODES] –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`);
    console.log(`üìä [UPLOAD_PROMOCODES] –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`, {
      totalCodes: promoCodes.length,
      savedCount,
      skippedCount,
      quizId,
      botId,
      filename: req.file.originalname
    });

    res.json({ 
      success: true, 
      message: `–§–∞–π–ª —Å –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –¥–ª—è –∫–≤–∏–∑–∞ ${quizId}`,
      filename: req.file.originalname,
      quizId: quizId,
      botId: botId,
      count: savedCount,
      skipped: skippedCount
    });
  } catch (error) {
    console.error('‚ùå [UPLOAD_PROMOCODES] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤:', error);
    console.error('‚ùå [UPLOAD_PROMOCODES] –î–µ—Ç–∞–ª–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏:', {
      message: error.message,
      name: error.name,
      code: error.code,
      stack: error.stack,
      requestBody: req.body,
      requestFile: req.file ? {
        fieldname: req.file.fieldname,
        originalname: req.file.originalname,
        mimetype: req.file.mimetype,
        size: req.file.size,
        path: req.file.path
      } : 'No file'
    });
    
    // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    if (req.file && req.file.path) {
      try {
        fs.unlinkSync(req.file.path);
        console.log(`üìÅ [UPLOAD_PROMOCODES] –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª ${req.file.path} —É–¥–∞–ª–µ–Ω –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏`);
      } catch (unlinkError) {
        console.error('‚ö†Ô∏è [UPLOAD_PROMOCODES] –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏:', unlinkError);
      }
    }
    
    res.status(500).json({ 
      error: error.message,
      details: '–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ –ª–æ–≥–∞—Ö —Å–µ—Ä–≤–µ—Ä–∞'
    });
  }
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –∫–≤–∏–∑–∞
app.delete('/api/quiz-promocodes/:quizId', async (req, res) => {
  try {
    const { quizId } = req.params;
    const { botId } = req.query;
    
    if (!quizId) {
      return res.status(400).json({ error: 'ID –∫–≤–∏–∑–∞ –Ω–µ —É–∫–∞–∑–∞–Ω' });
    }
    if (!botId) {
      return res.status(400).json({ error: 'ID –±–æ—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω' });
    }

    console.log(`üéÅ –£–¥–∞–ª—è–µ–º –ø—Ä–æ–º–æ–∫–æ–¥—ã –¥–ª—è –∫–≤–∏–∑–∞ ${quizId} –∏ –±–æ—Ç–∞ ${botId}`);
    
    // –£–¥–∞–ª—è–µ–º –ø—Ä–æ–º–æ–∫–æ–¥—ã –∏–∑ MongoDB
    if (!botId || !quizId) {
      throw new Error('botId –∏ quizId –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤');
    }
    protectFromMassDelete('PromoCode.deleteMany', { botId, quizId });
    const result = await PromoCode.deleteMany({ 
      botId, 
      quizId 
    });
    
    console.log(`üéÅ –£–¥–∞–ª–µ–Ω–æ ${result.deletedCount} –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤`);
    
      res.json({ 
        success: true, 
        message: `–ü—Ä–æ–º–æ–∫–æ–¥—ã –¥–ª—è –∫–≤–∏–∑–∞ ${quizId} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã`,
      quizId: quizId,
      botId: botId,
      deletedCount: result.deletedCount
      });
  } catch (error) {
    console.error('‚ùå Promo codes deletion error:', error);
    res.status(500).json({ error: error.message });
  }
});

// –£–¥–∞–ª–µ–Ω—ã –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –≤—ã–∑–æ–≤—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Ñ–∞–π–ª–∞–º–∏ (writeState, readState, restoreStatsFromBackup, state.json, editorState.json, –±—ç–∫–∞–ø—ã)
// –í–µ—Å—å backend —Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å MongoDB

// API –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏
app.get('/api/loyalty-config/:botId', async (req, res) => {
  try {
    const { botId } = req.params;
    
    // –ò—â–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–æ–≥—Ä–∞–º–º—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏
    const loyaltyConfig = await LoyaltyConfig.findOne({ botId });
    
    if (loyaltyConfig) {
      res.json(loyaltyConfig);
    } else {
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
      res.json({
        isEnabled: false,
        messages: {
          '1m': { enabled: false, message: '' },
          '24h': { enabled: false, message: '' },
          '7d': { enabled: false, message: '' },
          '30d': { enabled: false, message: '' },
          '90d': { enabled: false, message: '' },
          '180d': { enabled: false, message: '' },
          '360d': { enabled: false, message: '' }
        }
      });
    }
  } catch (error) {
    console.error('‚ùå Error fetching loyalty config:', error);
    res.status(500).json({ error: 'Failed to fetch loyalty config' });
  }
});

app.put('/api/loyalty-config/:botId', async (req, res) => {
  try {
    const { botId } = req.params;
    const config = req.body;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    await LoyaltyConfig.updateOne(
      { botId },
      { 
        botId,
        ...config,
        updatedAt: new Date()
      },
      { upsert: true }
    );
    
    res.json({ success: true });
  } catch (error) {
    console.error('‚ùå Error saving loyalty config:', error);
    res.status(500).json({ error: 'Failed to save loyalty config' });
  }
});

app.get('/api/available-promocodes/:botId', async (req, res) => {
  try {
    const { botId } = req.params;
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã –¥–ª—è –±–æ—Ç–∞
    const promoCodes = await PromoCode.find({ botId });
    
    res.json(promoCodes);
  } catch (error) {
    console.error('‚ùå Error fetching promocodes:', error);
    res.status(500).json({ error: 'Failed to fetch promocodes' });
  }
});

// API –¥–ª—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –ø—Ä–æ–≥—Ä–∞–º–º—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏
app.get('/api/loyalty-promocodes/:botId/:period', async (req, res) => {
  try {
    const { botId, period } = req.params;
    
    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–º–æ–∫–æ–¥—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
    const promoCodes = await LoyaltyPromoCode.find({ botId, period });
    
    const stats = {
      total: promoCodes.length,
      available: promoCodes.filter(p => !p.activated).length,
      used: promoCodes.filter(p => p.activated).length
    };
    
    res.json({ promoCodes, stats });
  } catch (error) {
    console.error('‚ùå Error fetching loyalty promocodes:', error);
    res.status(500).json({ error: 'Failed to fetch loyalty promocodes' });
  }
});

app.post('/api/loyalty-promocodes/:botId/:period', loyaltyPromoCodeUpload.single('promocodes'), async (req, res) => {
  console.log('üìÅ [LOYALTY_PROMOCODES] –ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏');
  console.log('üìÅ [LOYALTY_PROMOCODES] –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:', { botId: req.params.botId, period: req.params.period });
  console.log('üìÅ [LOYALTY_PROMOCODES] Request body:', req.body);
  console.log('üìÅ [LOYALTY_PROMOCODES] Request file:', req.file ? {
    fieldname: req.file.fieldname,
    originalname: req.file.originalname,
    mimetype: req.file.mimetype,
    size: req.file.size
  } : 'No file');
  
  try {
    const { botId, period } = req.params;
    
    console.log(`[LOYALTY] –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –¥–ª—è –±–æ—Ç–∞ ${botId}, –ø–µ—Ä–∏–æ–¥–∞ ${period}`);
    
    if (!req.file) {
      console.error('‚ùå [LOYALTY_PROMOCODES] –§–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
      console.error('‚ùå [LOYALTY_PROMOCODES] Request details:', {
        body: req.body,
        files: req.files,
        file: req.file
      });
      return res.status(400).json({ error: 'No file uploaded' });
    }
    
    console.log(`[LOYALTY] –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: ${req.file.originalname}, —Ä–∞–∑–º–µ—Ä: ${req.file.size} bytes`);
    
    // –ß–∏—Ç–∞–µ–º CSV —Ñ–∞–π–ª
    console.log('üìÅ [LOYALTY_PROMOCODES] –ß–∏—Ç–∞–µ–º CSV —Ñ–∞–π–ª –∏–∑ –±—É—Ñ–µ—Ä–∞...');
    let csvContent;
    try {
      csvContent = req.file.buffer.toString('utf8');
      console.log(`üìÅ [LOYALTY_PROMOCODES] CSV —Ñ–∞–π–ª –ø—Ä–æ—á–∏—Ç–∞–Ω, —Ä–∞–∑–º–µ—Ä: ${csvContent.length} —Å–∏–º–≤–æ–ª–æ–≤`);
    } catch (bufferError) {
      console.error('‚ùå [LOYALTY_PROMOCODES] –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –±—É—Ñ–µ—Ä–∞ —Ñ–∞–π–ª–∞:', bufferError);
      console.error('‚ùå [LOYALTY_PROMOCODES] –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ –±—É—Ñ–µ—Ä–∞:', {
        message: bufferError.message,
        code: bufferError.code,
        bufferSize: req.file.buffer ? req.file.buffer.length : 'No buffer'
      });
      throw new Error(`–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: ${bufferError.message}`);
    }
    
    const lines = csvContent.split('\n').filter(line => line.trim());
    console.log(`[LOYALTY] –ù–∞–π–¥–µ–Ω–æ ${lines.length} —Å—Ç—Ä–æ–∫ –≤ CSV —Ñ–∞–π–ª–µ`);
    
    // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã –¥–ª—è —ç—Ç–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
    if (!botId || !period) {
      throw new Error('botId –∏ period –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏');
    }
    console.log(`[LOYALTY_PROMOCODES] –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã –¥–ª—è –±–æ—Ç–∞ ${botId}, –ø–µ—Ä–∏–æ–¥–∞ ${period}`);
    
    let deleteResult;
    try {
      protectFromMassDelete('LoyaltyPromoCode.deleteMany', { botId, period });
      deleteResult = await LoyaltyPromoCode.deleteMany({ botId, period });
      console.log(`[LOYALTY] –£–¥–∞–ª–µ–Ω–æ ${deleteResult.deletedCount} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤`);
    } catch (deleteError) {
      console.error('‚ùå [LOYALTY_PROMOCODES] –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤:', deleteError);
      console.error('‚ùå [LOYALTY_PROMOCODES] –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è:', {
        message: deleteError.message,
        code: deleteError.code,
        botId,
        period
      });
      throw new Error(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤: ${deleteError.message}`);
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã - –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü (Code)
    console.log(`[LOYALTY_PROMOCODES] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º ${lines.length} —Å—Ç—Ä–æ–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤`);
    
    const promoCodes = lines.map((line, index) => {
      try {
        const trimmedLine = line.trim();
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        if (trimmedLine.toLowerCase().includes('code') && trimmedLine.toLowerCase().includes('user')) {
          console.log(`[LOYALTY] –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫: "${trimmedLine}"`);
          return null;
        }
        
        // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü (–¥–æ –ø–µ—Ä–≤–æ–π –∑–∞–ø—è—Ç–æ–π)
        const code = trimmedLine.split(',')[0].trim();
        if (!code) {
          console.log(`‚ö†Ô∏è [LOYALTY_PROMOCODES] –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ ${index + 1}: "${trimmedLine}"`);
          return null;
        }
        
        console.log(`[LOYALTY] –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–æ–∫–∏: "${trimmedLine}" -> –∫–æ–¥: "${code}"`);
        return {
          botId,
          period,
          code: code
        };
      } catch (parseError) {
        console.error(`‚ùå [LOYALTY_PROMOCODES] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–æ–∫–∏ ${index + 1}: "${line}"`, parseError);
        return null;
      }
    }).filter(promo => promo && promo.code && promo.code.length > 0); // –§–∏–ª—å—Ç—Ä—É–µ–º –ø—É—Å—Ç—ã–µ –∫–æ–¥—ã –∏ null
    
    console.log(`[LOYALTY] –°–æ–∑–¥–∞–Ω–æ ${promoCodes.length} –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏`);
    
    if (promoCodes.length === 0) {
      console.error('‚ùå [LOYALTY_PROMOCODES] –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤');
      return res.status(400).json({ error: '–ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤' });
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    let savedCount = 0;
    let saveSkippedCount = 0;
    
    console.log(`[LOYALTY_PROMOCODES] –ù–∞—á–∏–Ω–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ${promoCodes.length} –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –≤ MongoDB`);
    
    for (const promoCode of promoCodes) {
      try {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º upsert –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        const updateResult = await LoyaltyPromoCode.updateOne(
          { botId: promoCode.botId, period: promoCode.period, code: promoCode.code },
          promoCode,
          { upsert: true }
        );
        savedCount++;
        
        if (updateResult.upsertedCount > 0) {
          console.log(`‚úÖ [LOYALTY_PROMOCODES] –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø—Ä–æ–º–æ–∫–æ–¥: ${promoCode.code}`);
        } else if (updateResult.modifiedCount > 0) {
          console.log(`üîÑ [LOYALTY_PROMOCODES] –û–±–Ω–æ–≤–ª–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ–º–æ–∫–æ–¥: ${promoCode.code}`);
        }
      } catch (error) {
        console.error(`‚ùå [LOYALTY_PROMOCODES] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ ${promoCode.code}:`, error);
        console.error(`‚ùå [LOYALTY_PROMOCODES] –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:`, {
          message: error.message,
          code: error.code,
          promoCode: promoCode.code,
          botId: promoCode.botId,
          period: promoCode.period
        });
        saveSkippedCount++;
      }
    }
    
    console.log(`[LOYALTY_PROMOCODES] –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${savedCount} –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –≤ MongoDB, –ø—Ä–æ–ø—É—â–µ–Ω–æ ${saveSkippedCount}`);
    
    console.log(`‚úÖ [LOYALTY_PROMOCODES] –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`);
    console.log(`üìä [LOYALTY_PROMOCODES] –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`, {
      totalCodes: promoCodes.length,
      savedCount,
      saveSkippedCount,
      botId,
      period,
      filename: req.file.originalname
    });
    
    res.json({
      success: true,
      message: `–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ ${savedCount} –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞ ${period}`,
      totalCodes: savedCount,
      skippedCodes: saveSkippedCount,
      period: period
    });
    
  } catch (error) {
    console.error('‚ùå [LOYALTY_PROMOCODES] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏:', error);
    console.error('‚ùå [LOYALTY_PROMOCODES] –î–µ—Ç–∞–ª–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏:', {
      message: error.message,
      name: error.name,
      code: error.code,
      stack: error.stack,
      requestParams: req.params,
      requestBody: req.body,
      requestFile: req.file ? {
        fieldname: req.file.fieldname,
        originalname: req.file.originalname,
        mimetype: req.file.mimetype,
        size: req.file.size
      } : 'No file'
    });
    
    res.status(500).json({ 
      error: error.message,
      details: '–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ –ª–æ–≥–∞—Ö —Å–µ—Ä–≤–µ—Ä–∞'
    });
  }
});

app.delete('/api/loyalty-promocodes/:botId/:period', async (req, res) => {
  try {
    const { botId, period } = req.params;
    
    if (!botId || !period) {
      throw new Error('botId –∏ period –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏');
    }
    protectFromMassDelete('LoyaltyPromoCode.deleteMany', { botId, period });
    await LoyaltyPromoCode.deleteMany({ botId, period });
    
    res.json({ success: true, message: `–ü—Ä–æ–º–æ–∫–æ–¥—ã –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞ ${period} —É–¥–∞–ª–µ–Ω—ã` });
  } catch (error) {
    console.error('‚ùå Error deleting loyalty promocodes:', error);
    res.status(500).json({ error: 'Failed to delete loyalty promocodes' });
  }
});

// –ü—Ä–æ—Å–º–æ—Ç—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –±–æ—Ç–æ–≤
app.get('/api/active-processes', async (req, res) => {
  try {
    const processes = Array.from(activeProcesses.entries()).map(([botId, process]) => ({
      botId,
      isRunning: !process.killed && process.exitCode === null,
      killed: process.killed,
      exitCode: process.exitCode,
      pid: process.pid
    }));
    
    res.json({
      success: true,
      totalProcesses: activeProcesses.size,
      processes: processes
    });
  } catch (error) {
    console.error('[ACTIVE_PROCESSES] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤:', error);
    res.status(500).json({ error: 'Failed to get active processes', details: error.message });
  }
});

// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –±–æ—Ç–æ–≤ –∏ –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
app.post('/api/stop-all-bots', async (req, res) => {
  try {
    console.log('[STOP_ALL] –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫—É –≤—Å–µ—Ö –±–æ—Ç–æ–≤');
    
    const activeProcessesCount = activeProcesses.size;
    console.log(`[STOP_ALL] –ù–∞–π–¥–µ–Ω–æ ${activeProcessesCount} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤`);
    
    if (activeProcessesCount === 0) {
      return res.json({ 
        success: true, 
        message: '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏',
        stoppedCount: 0
      });
    }
    
    let stoppedCount = 0;
    const stopPromises = [];
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
    for (const [botId, process] of activeProcesses.entries()) {
      console.log(`[STOP_ALL] –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞ ${botId}...`);
      
      const stopPromise = new Promise((resolve) => {
        if (process.killed || process.exitCode !== null) {
          console.log(`[STOP_ALL] –ë–æ—Ç ${botId} —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω`);
          activeProcesses.delete(botId);
          stoppedCount++;
          resolve();
          return;
        }
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
        process.kill('SIGTERM');
        
        // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
        const timeout = setTimeout(() => {
          console.log(`[STOP_ALL] –ë–æ—Ç ${botId} –Ω–µ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º`);
          process.kill('SIGKILL');
          activeProcesses.delete(botId);
          stoppedCount++;
          resolve();
        }, 5000);
        
        process.on('exit', (code) => {
          clearTimeout(timeout);
          activeProcesses.delete(botId);
          console.log(`[STOP_ALL] –ë–æ—Ç ${botId} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å –∫–æ–¥–æ–º ${code}`);
          stoppedCount++;
          resolve();
        });
      });
      
      stopPromises.push(stopPromise);
    }
    
    // –ñ–¥–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    await Promise.all(stopPromises);
    
    console.log(`[STOP_ALL] –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ${stoppedCount} –±–æ—Ç–æ–≤`);
    console.log(`[STOP_ALL] –û—Å—Ç–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: ${activeProcesses.size}`);
    
    res.json({ 
      success: true, 
      message: `–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ${stoppedCount} –±–æ—Ç–æ–≤`,
      stoppedCount: stoppedCount,
      remainingProcesses: activeProcesses.size
    });
  } catch (error) {
    console.error('[STOP_ALL] –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–æ–≤:', error);
    res.status(500).json({ error: 'Failed to stop bots', details: error.message });
  }
});

// –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–≤ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
app.post('/api/restore-bots', async (req, res) => {
  try {
    console.log('[RESTORE] –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–≤');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    const currentBots = await Bot.find({});
    console.log(`[RESTORE] –¢–µ–∫—É—â–∏—Ö –±–æ—Ç–æ–≤ –≤ MongoDB: ${currentBots.length}`);
    
    if (currentBots.length > 0) {
      console.log(`[RESTORE] –ë–æ—Ç—ã —É–∂–µ –µ—Å—Ç—å –≤ MongoDB, –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è`);
      return res.json({ 
        success: true, 
        message: `–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è, –Ω–∞–π–¥–µ–Ω–æ ${currentBots.length} –±–æ—Ç–æ–≤`,
        bots: currentBots.map(b => ({ id: b.id, name: b.name, isActive: b.isActive }))
      });
    }
    
    // –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏
    const backupDir = './backend/backups';
    const fs = require('fs');
    
    if (!fs.existsSync(backupDir)) {
      return res.status(404).json({ error: '–ü–∞–ø–∫–∞ backups –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    }
    
    const backupFiles = fs.readdirSync(backupDir)
      .filter(file => file.startsWith('backup_') && file.endsWith('.json'))
      .sort()
      .reverse(); // –ù–æ–≤—ã–µ —Ñ–∞–π–ª—ã —Å–Ω–∞—á–∞–ª–∞
    
    console.log(`[RESTORE] –ù–∞–π–¥–µ–Ω–æ ${backupFiles.length} —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π`);
    
    if (backupFiles.length === 0) {
      return res.status(404).json({ error: '–†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã' });
    }
    
    let restoredBots = 0;
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π
    for (const backupFile of backupFiles.slice(0, 10)) { // –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10
      try {
        const backupPath = path.join(backupDir, backupFile);
        const backupData = JSON.parse(fs.readFileSync(backupPath, 'utf8'));
        
        if (backupData.bot) {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–∞–∫–æ–≥–æ –±–æ—Ç–∞ –µ—â–µ –Ω–µ—Ç
          const existingBot = await Bot.findOne({ id: backupData.bot.id });
          if (!existingBot) {
            await Bot.create(backupData.bot);
            console.log(`[RESTORE] ‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –±–æ—Ç ${backupData.bot.id} (${backupData.bot.name})`);
            restoredBots++;
          }
        }
  } catch (error) {
        console.error(`[RESTORE] ‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ ${backupFile}:`, error.message);
      }
    }
    
    const finalBots = await Bot.find({});
    console.log(`[RESTORE] –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ${restoredBots} –±–æ—Ç–æ–≤, –≤—Å–µ–≥–æ –≤ MongoDB: ${finalBots.length}`);
    
    res.json({ 
      success: true, 
      message: `–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ${restoredBots} –±–æ—Ç–æ–≤`,
      restoredCount: restoredBots,
      totalBots: finalBots.length,
      bots: finalBots.map(b => ({ id: b.id, name: b.name, isActive: b.isActive }))
    });
  } catch (error) {
    console.error('[RESTORE] –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:', error);
    res.status(500).json({ error: 'Failed to restore bots', details: error.message });
  }
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ –≤ CSV
app.get('/api/export-loyalty-stats/:botId', async (req, res) => {
  try {
    const { botId } = req.params;
    console.log(`[LOYALTY] –≠–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –±–æ—Ç–∞ ${botId}`);
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Ö –¥–∞–Ω–Ω—ã–º–∏ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏
    const users = await User.find({ botId });
    const loyaltyRecords = await Loyalty.find({ botId });
    const loyaltyConfig = await LoyaltyConfig.findOne({ botId });
    
    // –°–æ–∑–¥–∞–µ–º Map –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∑–∞–ø–∏—Å–µ–π –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ –ø–æ userId
    const loyaltyMap = new Map();
    loyaltyRecords.forEach(record => {
      loyaltyMap.set(record.userId, record);
    });
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º CSV –¥–∞–Ω–Ω—ã–µ
    let csvContent = 'User ID,Username,First Name,Last Name,Subscribed At,First Subscribed At,Is Subscribed,1m Reward,24h Reward,7d Reward,30d Reward,90d Reward,180d Reward,360d Reward\n';
    
    users.forEach(user => {
      const loyaltyRecord = loyaltyMap.get(user.userId) || { rewards: {} };
      
      const row = [
        user.userId || '',
        (user.username || '').replace(/,/g, ';'), // –ó–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—ã–µ –Ω–∞ —Ç–æ—á–∫—É —Å –∑–∞–ø—è—Ç–æ–π
        (user.firstName || '').replace(/,/g, ';'),
        (user.lastName || '').replace(/,/g, ';'),
        user.subscribedAt ? new Date(user.subscribedAt).toISOString() : '',
        user.firstSubscribedAt ? new Date(user.firstSubscribedAt).toISOString() : '',
        user.isSubscribed ? '–î–∞' : '–ù–µ—Ç',
        loyaltyRecord.rewards['1m'] ? '–î–∞' : '–ù–µ—Ç',
        loyaltyRecord.rewards['24h'] ? '–î–∞' : '–ù–µ—Ç',
        loyaltyRecord.rewards['7d'] ? '–î–∞' : '–ù–µ—Ç',
        loyaltyRecord.rewards['30d'] ? '–î–∞' : '–ù–µ—Ç',
        loyaltyRecord.rewards['90d'] ? '–î–∞' : '–ù–µ—Ç',
        loyaltyRecord.rewards['180d'] ? '–î–∞' : '–ù–µ—Ç',
        loyaltyRecord.rewards['360d'] ? '–î–∞' : '–ù–µ—Ç'
      ].join(',');
      
      csvContent += row + '\n';
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º
    csvContent += '\n\n–ü—Ä–æ–º–æ–∫–æ–¥—ã –ø—Ä–æ–≥—Ä–∞–º–º—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏:\n';
    csvContent += 'Period,Total Codes,Available Codes,Used Codes\n';
    
    const periods = ['1m', '24h', '7d', '30d', '90d', '180d', '360d'];
    for (const period of periods) {
      const promoCodes = await LoyaltyPromoCode.find({ botId, period });
      const total = promoCodes.length;
      const available = promoCodes.filter(p => !p.activated).length;
      const used = promoCodes.filter(p => p.activated).length;
      
      csvContent += `${period},${total},${available},${used}\n`;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if (loyaltyConfig) {
      csvContent += '\n\n–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏:\n';
      csvContent += 'Period,Enabled,Message\n';
      
      periods.forEach(period => {
        const config = loyaltyConfig.messages[period];
        if (config) {
          const message = (config.message || '').replace(/,/g, ';').replace(/\n/g, ' ');
          csvContent += `${period},${config.enabled ? '–î–∞' : '–ù–µ—Ç'},"${message}"\n`;
        }
      });
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
    const filename = `loyalty-stats-${botId}-${new Date().toISOString().split('T')[0]}.csv`;
    res.setHeader('Content-Type', 'text/csv; charset=utf-8');
    res.setHeader('Content-Disposition', `attachment; filename="${filename}"`);
    res.setHeader('Cache-Control', 'no-cache');
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º CSV —Ñ–∞–π–ª
    res.send('\ufeff' + csvContent); // BOM –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∏—Ä–∏–ª–ª–∏—Ü—ã –≤ Excel
    
    console.log(`[LOYALTY] –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞: ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, ${loyaltyRecords.length} –∑–∞–ø–∏—Å–µ–π –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏`);
    
  } catch (error) {
    console.error('‚ùå Error exporting loyalty stats:', error);
    res.status(500).json({ error: 'Failed to export loyalty statistics' });
  }
});

// –°—Ç–∞—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —É–¥–∞–ª–µ–Ω—ã - —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è MongoDB –Ω–∞–ø—Ä—è–º—É—é

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ –±—ç–∫–∞–ø–∞
async function restoreStatsFromBackup() {
  try {
    const backupDir = path.join(__dirname, 'backups');
    if (!fs.existsSync(backupDir)) {
      console.log('üìÅ –ü–∞–ø–∫–∞ –±—ç–∫–∞–ø–æ–≤ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      return false;
    }
    
    const backupFiles = fs.readdirSync(backupDir)
      .filter(file => file.startsWith('quizStats-backup-') && file.endsWith('.json'))
      .sort()
      .reverse();
    
    if (backupFiles.length === 0) {
      console.log('üìÅ –ë—ç–∫–∞–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      return false;
    }
    
    const latestBackup = backupFiles[0];
    const backupPath = path.join(backupDir, latestBackup);
    
    console.log(`üìÅ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ –±—ç–∫–∞–ø–∞: ${latestBackup}`);
    
    const backupData = await fsPromises.readFile(backupPath, 'utf8');
    const backupStats = JSON.parse(backupData);
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    await fsPromises.writeFile(QUIZ_STATS_FILE, JSON.stringify(backupStats, null, 2));
    
    console.log(`‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑ –±—ç–∫–∞–ø–∞: ${latestBackup}`);
    console.log(`üìä –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∫–≤–∏–∑–æ–≤: ${Object.keys(backupStats).length}`);
    
    return true;
  } catch (error) {
    console.error('‚ùå Error restoring from backup:', error);
    return false;
  }
}

async function writeQuizStats(stats) {
  try {
    for (const quizId in stats) {
      const quizStats = stats[quizId];
      await QuizStats.updateOne(
        { quizId },
        { $set: { quizId, attempts: quizStats.userAttempts } },
        { upsert: true }
      );
    }
    console.log('üìù –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–≤–∏–∑–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ MongoDB');
  } catch (error) {
    console.error('‚ùå Error writing quiz stats to MongoDB:', error);
  }
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –±–æ—Ç–æ–≤
const activeProcesses = new Map();

// –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–æ–≤
setInterval(async () => {
  try {
    console.log(`üîç Monitoring: ${activeProcesses.size} bots running`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å
    for (const [botId, process] of activeProcesses.entries()) {
      if (process.killed || process.exitCode !== null) {
        console.log(`‚ö†Ô∏è Bot ${botId} process is dead, removing from active list`);
        activeProcesses.delete(botId);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î
        await Bot.updateOne({ id: botId }, { $set: { isActive: false } });
        console.log(`üìù Bot ${botId} marked as inactive in database`);
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –±–æ—Ç—ã –≤ –ë–î, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω—ã
    const activeBotsInDB = await Bot.find({ isActive: true });
    for (const bot of activeBotsInDB) {
      if (!activeProcesses.has(bot.id)) {
        console.log(`üîÑ Bot ${bot.id} is active in DB but not running, attempting restart...`);
        try {
          await startBot(bot);
          console.log(`‚úÖ Bot ${bot.id} restarted successfully`);
        } catch (error) {
          console.error(`‚ùå Failed to restart bot ${bot.id}:`, error);
          // –ü–æ–º–µ—á–∞–µ–º –±–æ—Ç–∞ –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ
          await Bot.updateOne({ id: bot.id }, { $set: { isActive: false } });
        }
      }
    }
  } catch (error) {
    console.error('‚ùå Error in bot monitoring:', error);
  }
}, 30000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥

// –ü–æ–ª—É—á–µ–Ω–∏–µ editorState –∏–∑ MongoDB –¥–ª—è –∑–∞–ø—É—Å–∫–∞ botProcess.js
async function startBot(bot) {
  console.log(`Starting bot ${bot.id}...`);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ –±–æ—Ç
  if (activeProcesses.has(bot.id)) {
    console.log(`Bot ${bot.id} is already running`);
    return activeProcesses.get(bot.id);
  }
  
  // –ü–æ–ª—É—á–∞–µ–º editorState –∏–∑ MongoDB
  const botDoc = await Bot.findOne({ id: bot.id });
  if (!botDoc) throw new Error('Bot not found in MongoDB');
  
  const botProcess = spawn('node', [
    path.join(__dirname, 'botProcess.js'),
    bot.token,
    bot.id,
    JSON.stringify(botDoc.editorState)
  ]);

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ü–µ—Å—Å –≤ –∫–∞—Ä—Ç–µ
  activeProcesses.set(bot.id, botProcess);

  return new Promise((resolve, reject) => {
    let isResolved = false;
    let startTimeout;

    const cleanup = () => {
      clearTimeout(startTimeout);
      botProcess.stdout.removeAllListeners();
      botProcess.stderr.removeAllListeners();
      botProcess.removeAllListeners('exit');
    };

    botProcess.stdout.on('data', (data) => {
      const output = data.toString();
      console.log(`Bot ${bot.id} output:`, output);
      
      if (output.includes('Bot started successfully')) {
        isResolved = true;
        cleanup();
        resolve(botProcess);
      }
    });

    botProcess.stderr.on('data', (data) => {
      const error = data.toString();
      console.error(`Bot ${bot.id} error:`, error);
    });

    botProcess.on('exit', (code) => {
      console.log(`Bot ${bot.id} process exited with code ${code}`);
      activeProcesses.delete(bot.id);
      if (!isResolved) {
        cleanup();
        reject(new Error(`Bot process exited with code ${code}`));
      }
    });

    startTimeout = setTimeout(() => {
      if (!isResolved) {
        cleanup();
        console.log(`Bot ${bot.id} launch timeout, assuming it's running`);
        resolve(botProcess);
      }
    }, 20000); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–æ 20 —Å–µ–∫—É–Ω–¥
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞
async function stopBot(botId) {
  console.log(`Stopping bot ${botId}...`);
  
  const botProcess = activeProcesses.get(botId);
  if (!botProcess) {
    console.log(`Bot ${botId} is not running`);
    return true;
  }

  return new Promise((resolve) => {
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    Bot.updateOne({ id: botId }, { $set: { isActive: false } })
      .then(() => {
        console.log(`Bot ${botId} status updated to inactive`);
      })
      .catch(err => {
        console.error(`Error updating bot ${botId} status:`, err);
      });

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
    botProcess.kill('SIGTERM');
    
    // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
    const timeout = setTimeout(() => {
      console.log(`Bot ${botId} didn't stop gracefully, force killing`);
      botProcess.kill('SIGKILL');
      activeProcesses.delete(botId);
      resolve(true);
    }, 10000);

    botProcess.on('exit', (code) => {
      clearTimeout(timeout);
      activeProcesses.delete(botId);
      console.log(`Bot ${botId} stopped with code ${code}`);
      resolve(true);
    });
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è
function wait(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ editorState —Ç–æ–ª—å–∫–æ –≤ MongoDB
app.put('/api/bots/:id', async (req, res) => {
  try {
    const { name, token, editorState } = req.body;
    // –û–±–Ω–æ–≤–∏—Ç—å –≤ MongoDB
    await Bot.updateOne(
      { id: req.params.id },
      { $set: {
        name,
        token,
        editorState
      }}
    );
    res.json({ success: true });
  } catch (error) {
    res.status(500).json({ error: 'Failed to update bot' });
  }
});

// –ê–∫—Ç–∏–≤–∞—Ü–∏—è –±–æ—Ç–∞
app.post('/api/bots/:id/activate', async (req, res) => {
  try {
    const bot = await Bot.findOne({ id: req.params.id });
    if (!bot) {
      console.error('Bot not found for activation:', req.params.id);
      return res.status(404).json({ error: 'Bot not found' });
    }
    if (!bot.token) {
      console.error('Bot token is missing for activation:', req.params.id);
      return res.status(400).json({ error: 'Bot token is missing' });
    }
    if (!bot.editorState || !bot.editorState.blocks || !bot.editorState.connections) {
      console.error('Invalid editor state for activation:', req.params.id, bot.editorState);
      return res.status(400).json({ error: 'Invalid editor state' });
    }
    // –û–±–Ω–æ–≤–ª—è–µ–º isActive –≤ –±–∞–∑–µ
    await Bot.updateOne({ id: req.params.id }, { $set: { isActive: true } });
    console.log('All validations passed, starting bot activation for:', req.params.id);
    try {
      await startBot(bot);
      console.log('Bot process started successfully for:', req.params.id);
      res.json({ success: true });
    } catch (error) {
      console.error('Error starting bot process:', error);
      res.status(500).json({ error: 'Failed to start bot process', details: error.message });
    }
  } catch (error) {
    console.error('Error in activate endpoint:', error);
    res.status(500).json({ error: 'Failed to activate bot', details: error.message });
  }
});

// –î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –±–æ—Ç–∞
app.post('/api/bots/:id/deactivate', async (req, res) => {
  try {
    console.log('POST /api/bots/:id/deactivate - Bot ID:', req.params.id);
    
    const bot = await Bot.findOne({ id: req.params.id });
    
    if (!bot) {
      console.log('Bot not found for deactivation:', req.params.id);
      res.status(404).json({ error: 'Bot not found' });
      return;
    }

    console.log('Found bot for deactivation:', { id: bot.id, name: bot.name, isActive: bot.isActive });

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞
    await stopBot(bot.id);
    await wait(1000); // –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫—É

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await Bot.updateOne({ id: bot.id }, { $set: { isActive: false } });
    
    console.log(`Bot ${bot.id} deactivated successfully`);
    res.json({ success: true });
  } catch (error) {
    console.error('Error in deactivate endpoint:', error);
    res.status(500).json({ error: 'Failed to deactivate bot' });
  }
});

// –§—É–Ω–∫—Ü–∏—è –∑–∞—â–∏—Ç—ã –æ—Ç –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
function protectFromMassDelete(operation, filter) {
  const timestamp = new Date().toISOString();
  console.log(`[PROTECTION] ${timestamp} - –û–ø–µ—Ä–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è: ${operation}`);
  console.log(`[PROTECTION] –§–∏–ª—å—Ç—Ä:`, filter);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å —Ñ–∏–ª—å—Ç—Ä
  if (!filter || Object.keys(filter).length === 0) {
    console.error(`[PROTECTION] ‚ùå –ë–õ–û–ö–ò–†–û–í–ö–ê: –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞!`);
    throw new Error('PROTECTION: Mass delete blocked - no filter provided');
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
  if (!filter.id && !filter._id && !filter.botId) {
    console.error(`[PROTECTION] ‚ùå –ë–õ–û–ö–ò–†–û–í–ö–ê: –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –±–µ–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ ID!`);
    throw new Error('PROTECTION: Mass delete blocked - no specific ID provided');
  }
  
  console.log(`[PROTECTION] ‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∞`);
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è MongoDB
app.get('/api/health', async (req, res) => {
  try {
    const mongoState = mongoose.connection.readyState;
    const mongoStateText = {
      0: 'disconnected',
      1: 'connected', 
      2: 'connecting',
      3: 'disconnecting'
    }[mongoState] || 'unknown';
    
    res.json({
      mongodb: {
        state: mongoState,
        stateText: mongoStateText,
        host: mongoose.connection.host,
        port: mongoose.connection.port,
        name: mongoose.connection.name
      },
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    res.status(500).json({ error: 'Health check failed', details: error.message });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –±–æ—Ç–æ–≤
app.get('/api/bots', async (req, res) => {
  try {
    console.log(`[BOT_GET] –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –±–æ—Ç–æ–≤`);
    console.log(`[BOT_GET] –°–æ—Å—Ç–æ—è–Ω–∏–µ MongoDB: ${mongoose.connection.readyState} (1=connected, 2=connecting, 0=disconnected)`);
    
    if (mongoose.connection.readyState !== 1) {
      console.error('[BOT_GET] MongoDB –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞!');
      return res.status(500).json({ error: 'MongoDB not connected' });
    }
    
    const bots = await Bot.find({});
    console.log(`[BOT_GET] –ù–∞–π–¥–µ–Ω–æ –±–æ—Ç–æ–≤ –≤ MongoDB: ${bots.length}`);
    
    if (bots.length === 0) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–æ–æ–±—â–µ –∫–æ–ª–ª–µ–∫—Ü–∏—è –±–æ—Ç–æ–≤
      const collections = await mongoose.connection.db.listCollections().toArray();
      const collectionNames = collections.map(c => c.name);
      console.log(`[BOT_GET] ‚ö†Ô∏è –ë–æ—Ç–æ–≤ –Ω–µ—Ç! –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏:`, collectionNames);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–Ω–¥–µ–∫—Å—ã –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –±–æ—Ç–æ–≤
      try {
        const indexes = await mongoose.connection.db.collection('bots').indexes();
        console.log(`[BOT_GET] –ò–Ω–¥–µ–∫—Å—ã –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ bots:`, indexes.length);
      } catch (err) {
        console.log(`[BOT_GET] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏–Ω–¥–µ–∫—Å–æ–≤:`, err.message);
      }
    } else {
      console.log(`[BOT_GET] –°–ø–∏—Å–æ–∫ –±–æ—Ç–æ–≤:`, bots.map(b => ({ id: b.id, name: b.name, isActive: b.isActive })));
    }
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, –∫–∞–∫–∏–µ –±–æ—Ç—ã —Ä–µ–∞–ª—å–Ω–æ –∑–∞–ø—É—â–µ–Ω—ã
    const botsWithStatus = bots.map(bot => ({
      ...bot.toObject(),
      isRunning: activeProcesses.has(bot.id)
    }));
    console.log(`[BOT_GET] –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: ${activeProcesses.size}`);
    res.json({ bots: botsWithStatus, activeBot: null });
  } catch (error) {
    console.error('[BOT_GET] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–æ—Ç–æ–≤:', error);
    res.status(500).json({ error: 'Failed to load bots', details: error.message });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–æ—Ç–∞
app.get('/api/bots/:id/status', async (req, res) => {
  try {
    const bot = await Bot.findOne({ id: req.params.id });
    if (!bot) {
      return res.status(404).json({ error: 'Bot not found' });
    }
    
    const isRunning = activeProcesses.has(bot.id);
    res.json({ 
      id: bot.id, 
      isActive: bot.isActive, 
      isRunning: isRunning,
      status: isRunning ? 'running' : 'stopped'
    });
  } catch (error) {
    res.status(500).json({ error: 'Failed to get bot status', details: error.message });
  }
});

// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞
app.post('/api/bots', async (req, res) => {
  try {
    const { name, token } = req.body;
    const newBot = {
      id: Date.now().toString(),
      name,
      token,
      isActive: false,
      editorState: {
        blocks: [
          {
            id: 'start',
            type: 'start',
            position: { x: 2500, y: 2500 },
            message: '–ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞',
            buttons: [],
            mediaFiles: null
          }
        ],
        connections: [],
        pan: { x: 0, y: 0 },
        scale: 1
      }
    };
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –≤ MongoDB
    console.log(`[BOT_CREATE] –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ —Å ID: ${newBot.id}`);
    console.log(`[BOT_CREATE] –°–æ—Å—Ç–æ—è–Ω–∏–µ MongoDB: ${mongoose.connection.readyState} (1=connected, 2=connecting, 0=disconnected)`);
    
    if (mongoose.connection.readyState !== 1) {
      console.error('[BOT_CREATE] MongoDB –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞!');
      return res.status(500).json({ error: 'MongoDB not connected' });
    }
    
    const createdBot = await Bot.create(newBot);
    console.log(`[BOT_CREATE] –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –≤ MongoDB:`, { id: createdBot.id, name: createdBot.name });
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –±–æ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è
    const verifyBot = await Bot.findOne({ id: newBot.id });
    if (!verifyBot) {
      console.error(`[BOT_CREATE] –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ë–æ—Ç ${newBot.id} –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è!`);
      throw new Error('Bot not found after creation');
    }
    console.log(`[BOT_CREATE] ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞: –±–æ—Ç ${newBot.id} –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ MongoDB`);
    
    res.json({ id: newBot.id, name: newBot.name, isActive: newBot.isActive });
  } catch (error) {
    console.error('Failed to create bot:', error);
    res.status(500).json({ error: 'Failed to create bot', details: error.message });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–æ—Ç–∞
app.get('/api/bots/:id', async (req, res) => {
  try {
    const bot = await Bot.findOne({ id: req.params.id });
    if (!bot) {
      return res.status(404).json({ error: 'Bot not found' });
    }
    res.json(bot);
  } catch (error) {
    res.status(500).json({ error: 'Failed to load bot', details: error.message });
  }
});

// –£–¥–∞–ª–µ–Ω–∏–µ –±–æ—Ç–∞
app.delete('/api/bots/:id', async (req, res) => {
  try {
    const botId = req.params.id;
    const bot = await Bot.findOne({ id: botId });
    if (!bot) {
      console.error('Bot not found for deletion:', botId);
      return res.status(404).json({ error: 'Bot not found' });
    }
    console.log('Deleting bot:', botId);
    try {
      await stopBot(botId);
      console.log('Bot process stopped (if was running):', botId);
    } catch (stopError) {
      console.error('Error stopping bot process:', stopError);
    }
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ botId –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
      if (!botId || botId === 'undefined' || botId === 'null') {
        throw new Error('Invalid botId provided');
      }
      
      console.log(`[DELETE] –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –±–æ—Ç–∞: ${botId}`);
      
      // –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–æ—Ç–∞
      console.log(`[DELETE] –ù–∞—á–∏–Ω–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±–æ—Ç–∞: ${botId}`);
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - —É–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ botId –Ω–µ –ø—É—Å—Ç–æ–π
      if (!botId || botId.trim() === '') {
        throw new Error('botId –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
      }
      
      // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
      if (botId === 'all' || botId === '*' || botId === 'undefined' || botId === 'null' || !botId) {
        throw new Error('–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ! –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞.');
      }
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª—É—á–∞–π–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
      if (botId.length < 10 || botId.includes(' ') || botId.includes('..')) {
        throw new Error('–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π botId! –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞.');
      }
      
      // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
      console.log(`[BACKUP] –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±–æ—Ç–∞ ${botId}...`);
      const backupData = {
        bot: await Bot.findOne({ id: botId }),
        users: await User.find({ botId }),
        quizStats: await QuizStats.find({ botId }),
        promoCodes: await PromoCode.find({ botId }),
        loyalties: await Loyalty.find({ botId }),
        loyaltyPromoCodes: await LoyaltyPromoCode.find({ botId })
      };
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –≤ —Ñ–∞–π–ª
      const fs = require('fs');
      const backupDir = './backend/backups';
      if (!fs.existsSync(backupDir)) {
        fs.mkdirSync(backupDir, { recursive: true });
      }
      const backupFile = `${backupDir}/backup_${botId}_${Date.now()}.json`;
      fs.writeFileSync(backupFile, JSON.stringify(backupData, null, 2));
      console.log(`[BACKUP] –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: ${backupFile}`);
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞—â–∏—Ç—É –æ—Ç –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
      protectFromMassDelete('Bot.deleteOne', { id: botId });
      protectFromMassDelete('User.deleteMany', { botId });
      protectFromMassDelete('QuizStats.deleteMany', { botId });
      protectFromMassDelete('PromoCode.deleteMany', { botId });
      protectFromMassDelete('Loyalty.deleteMany', { botId });
      protectFromMassDelete('LoyaltyPromoCode.deleteMany', { botId });
      
      const deleteResults = await Promise.all([
        Bot.deleteOne({ id: botId }),
        User.deleteMany({ botId }),
        QuizStats.deleteMany({ botId }),
        PromoCode.deleteMany({ botId }),
        Loyalty.deleteMany({ botId }),
        LoyaltyPromoCode.deleteMany({ botId })
      ]);
      
      console.log(`[DELETE] –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É–¥–∞–ª–µ–Ω–∏—è –¥–ª—è –±–æ—Ç–∞ ${botId}:`, {
        bots: deleteResults[0].deletedCount,
        users: deleteResults[1].deletedCount,
        quizStats: deleteResults[2].deletedCount,
        promoCodes: deleteResults[3].deletedCount,
        loyalty: deleteResults[4].deletedCount,
        loyaltyPromoCodes: deleteResults[5].deletedCount
      });
      
      res.json({ success: true });
    } catch (deleteError) {
      console.error('Error deleting bot or related data:', deleteError);
      res.status(500).json({ error: 'Failed to delete bot or related data', details: deleteError.message });
    }
  } catch (error) {
    console.error('Error in delete endpoint:', error);
    res.status(500).json({ error: 'Failed to delete bot', details: error.message });
  }
});

// –≠–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–≤–∏–∑–æ–≤ –≤ XLSX —Ñ–∞–π–ª
app.post('/api/export-quiz-stats', async (req, res) => {
  try {
    const { stats, promoCodesStats, blocks } = req.body;
    const csvSections = [];

    // 1. –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    csvSections.push('–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞');
    csvSections.push([
      '–î–∞—Ç–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞',
      '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–≤–∏–∑–æ–≤',
      '–í—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫',
      '–£—Å–ø–µ—à–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫',
      '–ù–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫',
      '–û–±—â–∞—è —É—Å–ø–µ—à–Ω–æ—Å—Ç—å (%)'
    ].join(','));
    const totalAttempts = Object.values(stats).reduce((sum, quiz) => sum + quiz.totalAttempts, 0);
    const totalSuccessful = Object.values(stats).reduce((sum, quiz) => sum + quiz.successfulCompletions, 0);
    const totalFailed = Object.values(stats).reduce((sum, quiz) => sum + quiz.failedAttempts, 0);
    const overallSuccessRate = totalAttempts > 0 ? ((totalSuccessful / totalAttempts) * 100).toFixed(1) : 0;
    csvSections.push([
      new Date().toLocaleString('ru-RU'),
      blocks.length,
      totalAttempts,
      totalSuccessful,
      totalFailed,
      overallSuccessRate
    ].join(','));
    csvSections.push('');

    // 2. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–≤–∏–∑–∞–º
    csvSections.push('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–≤–∏–∑–∞–º');
    csvSections.push([
      'ID –∫–≤–∏–∑–∞',
      '–ù–∞–∑–≤–∞–Ω–∏–µ –∫–≤–∏–∑–∞',
      '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤',
      '–í—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫',
      '–£—Å–ø–µ—à–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫',
      '–ù–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫',
      '–£—Å–ø–µ—à–Ω–æ—Å—Ç—å (%)',
      '–í—Å–µ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤',
      '–î–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤',
      '–í—ã–¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤'
    ].join(','));
    blocks.forEach(quiz => {
      const quizStats = stats[quiz.id] || {
        totalAttempts: 0,
        successfulCompletions: 0,
        failedAttempts: 0,
        userAttempts: []
      };
      const promoStats = promoCodesStats[quiz.id] || {
        hasPromoCodes: false,
        totalPromoCodes: 0,
        availablePromoCodes: 0,
        usedPromoCodes: 0,
        promoCodesList: []
      };
      const successRate = quizStats.totalAttempts > 0 
        ? ((quizStats.successfulCompletions / quizStats.totalAttempts) * 100).toFixed(1) 
        : 0;
      csvSections.push([
        quiz.id,
        `"${(quiz.message || `–ö–≤–∏–∑ ${quiz.id}`).replace(/"/g, '""')}"`,
        quiz.questions?.length || 0,
        quizStats.totalAttempts,
        quizStats.successfulCompletions,
        quizStats.failedAttempts,
        successRate,
        promoStats.totalPromoCodes,
        promoStats.availablePromoCodes,
        promoStats.usedPromoCodes
      ].join(','));
    });
    csvSections.push('');

    // 3. –ü–æ–ø—ã—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    csvSections.push('–ü–æ–ø—ã—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
    csvSections.push([
      'ID –∫–≤–∏–∑–∞',
      '–ù–∞–∑–≤–∞–Ω–∏–µ –∫–≤–∏–∑–∞',
      'ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
      '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
      '–§–∞–º–∏–ª–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
      'Username',
      '–î–∞—Ç–∞ –ø–æ–ø—ã—Ç–∫–∏',
      '–†–µ–∑—É–ª—å—Ç–∞—Ç',
      '–ë–∞–ª–ª—ã',
      '–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏',
      '–í—Ä–µ–º—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è (—Å–µ–∫)',
      '–ü–æ–ª—É—á–µ–Ω–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥',
      '–û—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
    ].join(','));
    blocks.forEach(quiz => {
      const quizStats = stats[quiz.id] || { userAttempts: [] };
      quizStats.userAttempts.forEach((attempt) => {
        const answersString = attempt.answers ? 
          attempt.answers.slice(0, 20).map((answer, idx) => 
            `–í–æ–ø—Ä–æ—Å ${idx + 1}: ${answer.selectedAnswer ? answer.selectedAnswer.replace(/"/g, '""').substring(0, 100) : ''} (${answer.isCorrect ? '–ü—Ä–∞–≤–∏–ª—å–Ω–æ' : '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ'})`
          ).join('; ') : '';
        csvSections.push([
          quiz.id,
          `"${(quiz.message || `–ö–≤–∏–∑ ${quiz.id}`).replace(/"/g, '""')}"`,
          attempt.userId,
          `"${(attempt.userName || `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${attempt.userId}`).replace(/"/g, '""').substring(0, 100)}"`,
          `"${(attempt.userLastName || '').replace(/"/g, '""').substring(0, 100)}"`,
          attempt.username ? `@${attempt.username}` : '',
          new Date(attempt.timestamp).toLocaleString('ru-RU'),
          attempt.success ? '–£—Å–ø–µ—à–Ω–æ' : '–ù–µ—É–¥–∞—á–Ω–æ',
          attempt.score !== undefined ? `${attempt.score}/${quiz.questions?.length || 0}` : '',
          attempt.successRate ? `${attempt.successRate.toFixed(1)}%` : '',
          attempt.duration ? Math.round(attempt.duration / 1000) : '',
          attempt.promoCode || '',
          `"${answersString.replace(/"/g, '""').substring(0, 1000)}"`
        ].join(','));
      });
    });
    csvSections.push('');

    // 4. –ü—Ä–æ–º–æ–∫–æ–¥—ã
    csvSections.push('–ü—Ä–æ–º–æ–∫–æ–¥—ã');
    csvSections.push([
      'ID –∫–≤–∏–∑–∞',
      '–ù–∞–∑–≤–∞–Ω–∏–µ –∫–≤–∏–∑–∞',
      '–ü—Ä–æ–º–æ–∫–æ–¥',
      '–°—Ç–∞—Ç—É—Å',
      '–í—ã–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é',
      '–î–∞—Ç–∞ –≤—ã–¥–∞—á–∏'
    ].join(','));
    blocks.forEach(quiz => {
      const promoStats = promoCodesStats[quiz.id] || { promoCodesList: [] };
      promoStats.promoCodesList.forEach((promo) => {
        csvSections.push([
          quiz.id,
          `"${(quiz.message || `–ö–≤–∏–∑ ${quiz.id}`).replace(/"/g, '""')}"`,
          promo.code,
          promo.activated ? '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω' : '–î–æ—Å—Ç—É–ø–µ–Ω',
          promo.activatedBy || '',
          promo.activatedAt ? new Date(promo.activatedAt).toLocaleString('ru-RU') : ''
        ].join(','));
      });
    });

    const csvContent = csvSections.join('\r\n');
    const fileName = `quiz-stats-${new Date().toISOString().split('T')[0]}.csv`;
    res.setHeader('Content-Type', 'text/csv; charset=utf-8');
    res.setHeader('Content-Disposition', `attachment; filename="${fileName}"`);
    res.send(csvContent);
  } catch (error) {
    console.error('Error exporting quiz stats to CSV:', error);
    res.status(500).json({ 
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏',
      details: error.message 
    });
  }
});

// –¢–µ—Å—Ç–æ–≤—ã–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ ExcelJS
app.get('/api/test-excel', async (req, res) => {
  try {
    console.log('üß™ Testing ExcelJS library...');
    
    let ExcelJS;
    try {
      ExcelJS = require('exceljs');
      console.log('‚úÖ ExcelJS library loaded successfully');
    } catch (excelError) {
      console.error('‚ùå Error loading ExcelJS library:', excelError);
      return res.status(500).json({ 
        error: 'ExcelJS library not available',
        details: excelError.message 
      });
    }
    
    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
    const workbook = new ExcelJS.Workbook();
    const worksheet = workbook.addWorksheet('Test');
    
    worksheet.columns = [
      { header: 'Test Column', key: 'test', width: 15 }
    ];
    
    worksheet.addRow({ test: 'Test Data' });
    
    const buffer = await workbook.xlsx.writeBuffer();
    console.log('‚úÖ Test XLSX file generated successfully');
    
    res.setHeader('Content-Type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
    res.setHeader('Content-Disposition', 'attachment; filename="test.xlsx"');
    res.send(buffer);
    
  } catch (error) {
    console.error('‚ùå Error in test Excel endpoint:', error);
    res.status(500).json({ 
      error: 'Test failed',
      details: error.message 
    });
  }
});

// Health check endpoint
app.get('/api/health', (req, res) => {
  const health = {
    status: 'OK',
    timestamp: new Date().toISOString(),
    uptime: process.uptime(),
    memory: process.memoryUsage(),
    activeBots: activeProcesses.size,
    totalBots: 0 // –ë—É–¥–µ–º –ø–æ–ª—É—á–∞—Ç—å –∏–∑ MongoDB
  };
  
  // –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ—Ç–æ–≤
  Bot.countDocuments({})
    .then(count => {
      health.totalBots = count;
      res.json(health);
    })
    .catch(err => {
      console.error('Error getting bot count:', err);
  res.json(health);
    });
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã
app.get('/api/system-stats', async (req, res) => {
  try {
    const totalBots = await Bot.countDocuments({});
    const activeBots = await Bot.countDocuments({ isActive: true });
    const runningBots = activeProcesses.size;
    const totalUsers = await User.countDocuments({});
    const totalQuizStats = await QuizStats.countDocuments({});
    
    res.json({
      bots: {
        total: totalBots,
        active: activeBots,
        running: runningBots
      },
      users: {
        total: totalUsers
      },
      quizzes: {
        total: totalQuizStats
      },
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    console.error('Error getting system stats:', error);
    res.status(500).json({ error: 'Failed to get system stats' });
  }
});

// API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–æ–≤

// –í–ê–ñ–ù–û: –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å User, QuizStats, PromoCode, Loyalty –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É—é—Ç botId –∫–∞–∫ —Ñ–∏–ª—å—Ç—Ä!
// –ü—Ä–∏–º–µ—Ä —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
// await User.create({ botId, userId, ... });
// –ü—Ä–∏–º–µ—Ä –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:
// await User.find({ botId });
// –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–ª—è QuizStats, PromoCode, Loyalty

// Endpoint /api/bots/:id/full —É–∂–µ —Ä–µ–∞–ª–∏–∑—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∞–≥—Ä–µ–≥–∞—Ü–∏—é –ø–æ botId:
// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç bot, users, quizStats, promoCodes, loyalties ‚Äî –≤—Å–µ –ø–æ botId

// Endpoint –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏
app.post('/api/loyalty-promocodes/:botId/:period', loyaltyPromoCodeUpload.single('file'), async (req, res) => {
  try {
    const { botId, period } = req.params;
    
    console.log(`[LOYALTY_PROMO] –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –¥–ª—è –±–æ—Ç–∞ ${botId}, –ø–µ—Ä–∏–æ–¥ ${period}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –ø–µ—Ä–∏–æ–¥–∞
    const validPeriods = ['1m', '24h', '7d', '30d', '90d', '180d', '360d'];
    if (!validPeriods.includes(period)) {
      return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏' });
    }
    
    if (!req.file) {
      return res.status(400).json({ error: '–§–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω' });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª - CSV
    if (!req.file.originalname.endsWith('.csv')) {
      return res.status(400).json({ error: '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ CSV —Ñ–∞–π–ª—ã' });
    }
    
    // –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
    const fileContent = req.file.buffer.toString('utf8');
    console.log(`[LOYALTY_PROMO] –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ (–ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤):`, fileContent.substring(0, 200));
    
    // –ü–∞—Ä—Å–∏–º CSV
    const lines = fileContent.split('\n').map(line => line.trim()).filter(line => line.length > 0);
    
    if (lines.length === 0) {
      return res.status(400).json({ error: '–§–∞–π–ª –ø—É—Å—Ç–æ–π' });
    }
    
    // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã –¥–ª—è —ç—Ç–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ (—Ä–∞–∑—Ä–µ—à–∞–µ–º –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É)
    await LoyaltyPromoCode.deleteMany({ botId, period });
    console.log(`[LOYALTY_PROMO] –£–¥–∞–ª–µ–Ω—ã —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞ ${period}`);
    
    const promoCodes = [];
    let skippedCount = 0;
    
    for (let i = 0; i < lines.length; i++) {
      const line = lines[i].trim();
      
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ (–µ—Å–ª–∏ –µ—Å—Ç—å) –∏ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
      if (i === 0 && (line.toLowerCase().includes('code') || line.toLowerCase().includes('–ø—Ä–æ–º–æ–∫–æ–¥'))) {
        console.log(`[LOYALTY_PROMO] –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫: ${line}`);
        continue;
      }
      
      if (!line) {
        continue;
      }
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–¥ –ø—Ä–æ–º–æ–∫–æ–¥–∞ (–ø–µ—Ä–≤–∞—è —á–∞—Å—Ç—å –¥–æ –∑–∞–ø—è—Ç–æ–π)
      const code = line.split(',')[0].trim();
      
      if (!code || code.length === 0) {
        console.log(`[LOYALTY_PROMO] –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç–æ–π –∫–æ–¥ –≤ —Å—Ç—Ä–æ–∫–µ ${i + 1}: "${line}"`);
        skippedCount++;
        continue;
      }
      
      try {
        // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–æ–∫–æ–¥ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏
        const promoCode = new LoyaltyPromoCode({
          botId,
          period,
          code,
          activated: false
        });
        
        promoCodes.push(promoCode);
        console.log(`[LOYALTY_PROMO] –î–æ–±–∞–≤–ª–µ–Ω –∫–æ–¥: ${code}`);
      } catch (error) {
        console.error(`[LOYALTY_PROMO] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏ ${i + 1}: "${line}"`, error);
        skippedCount++;
      }
    }
    
    if (promoCodes.length === 0) {
      return res.status(400).json({ error: '–ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤' });
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    let savedCount = 0;
    let saveSkippedCount = 0;
    
    for (const promoCode of promoCodes) {
      try {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º upsert –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        await LoyaltyPromoCode.updateOne(
          { botId: promoCode.botId, period: promoCode.period, code: promoCode.code },
          promoCode,
          { upsert: true }
        );
        savedCount++;
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ ${promoCode.code}:`, error);
        saveSkippedCount++;
      }
    }
    
    console.log(`[LOYALTY_PROMO] –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${savedCount} –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –≤ MongoDB, –ø—Ä–æ–ø—É—â–µ–Ω–æ ${saveSkippedCount}`);
    
    res.json({
      success: true,
      message: `–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ ${savedCount} –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞ ${period}`,
      totalCodes: savedCount,
      skippedCodes: saveSkippedCount,
      period: period
    });
    
  } catch (error) {
    console.error('[LOYALTY_PROMO] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏:', error);
    res.status(500).json({ 
      error: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏',
      details: error.message 
    });
  }
});

// Endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
app.get('/api/loyalty-promocodes/:botId/:period', async (req, res) => {
  try {
    const { botId, period } = req.params;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –ø–µ—Ä–∏–æ–¥–∞
    const validPeriods = ['1m', '24h', '7d', '30d', '90d', '180d', '360d'];
    if (!validPeriods.includes(period)) {
      return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏' });
    }
    
    const promoCodes = await LoyaltyPromoCode.find({ botId, period }).sort({ createdAt: -1 });
    
    res.json({
      success: true,
      period: period,
      total: promoCodes.length,
      available: promoCodes.filter(p => !p.activated).length,
      activated: promoCodes.filter(p => p.activated).length,
      codes: promoCodes.map(p => ({
        code: p.code,
        activated: p.activated,
        activatedBy: p.activatedBy,
        activatedAt: p.activatedAt,
        createdAt: p.createdAt
      }))
    });
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏:', error);
    res.status(500).json({ 
      error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏',
      details: error.message 
    });
  }
});

// Endpoint –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏
app.post('/api/loyalty-channel/:botId', async (req, res) => {
  try {
    const { botId } = req.params;
    const { 
      isRequired, 
      channelId, 
      channelUsername, 
      channelTitle, 
      notSubscribedMessage 
    } = req.body;
    
    console.log(`[LOYALTY_CHANNEL] –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞–Ω–∞–ª–∞ –¥–ª—è –±–æ—Ç–∞ ${botId}:`, {
      isRequired,
      channelId,
      channelUsername,
      channelTitle
    });
    
    // –ù–∞—Ö–æ–¥–∏–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏
    let loyaltyConfig = await LoyaltyConfig.findOne({ botId });
    
    if (!loyaltyConfig) {
      loyaltyConfig = new LoyaltyConfig({
        botId,
        isEnabled: false,
        channelSettings: {
          isRequired: false,
          channelId: '',
          channelUsername: '',
          channelTitle: '',
          notSubscribedMessage: '–î–ª—è —É—á–∞—Å—Ç–∏—è –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª!'
        }
      });
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞
    if (!loyaltyConfig.channelSettings) {
      loyaltyConfig.channelSettings = {};
    }
    
    loyaltyConfig.channelSettings.isRequired = isRequired || false;
    loyaltyConfig.channelSettings.channelId = channelId || '';
    loyaltyConfig.channelSettings.channelUsername = channelUsername || '';
    loyaltyConfig.channelSettings.channelTitle = channelTitle || '';
    loyaltyConfig.channelSettings.notSubscribedMessage = notSubscribedMessage || 
      '–î–ª—è —É—á–∞—Å—Ç–∏—è –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª!';
    
    loyaltyConfig.updatedAt = new Date();
    
    await loyaltyConfig.save();
    
    console.log(`[LOYALTY_CHANNEL] –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è –±–æ—Ç–∞ ${botId}`);
    
    res.json({
      success: true,
      message: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã',
      channelSettings: loyaltyConfig.channelSettings
    });
    
  } catch (error) {
    console.error('[LOYALTY_CHANNEL] –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞:', error);
    res.status(500).json({ 
      error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞',
      details: error.message 
    });
  }
});

// Endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–∞–Ω–∞–ª–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏
app.get('/api/loyalty-channel/:botId', async (req, res) => {
  try {
    const { botId } = req.params;
    
    const loyaltyConfig = await LoyaltyConfig.findOne({ botId });
    
    if (!loyaltyConfig) {
      return res.json({
        success: true,
        channelSettings: {
          isRequired: false,
          channelId: '',
          channelUsername: '',
          channelTitle: '',
          notSubscribedMessage: '–î–ª—è —É—á–∞—Å—Ç–∏—è –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª!'
        }
      });
    }
    
    res.json({
      success: true,
      channelSettings: loyaltyConfig.channelSettings || {
        isRequired: false,
        channelId: '',
        channelUsername: '',
        channelTitle: '',
        notSubscribedMessage: '–î–ª—è —É—á–∞—Å—Ç–∏—è –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª!'
      }
    });
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–∞–Ω–∞–ª–∞:', error);
    res.status(500).json({ 
      error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞',
      details: error.message 
    });
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞
async function shutdownServer(signal) {
  console.log(`Received ${signal}, shutting down...`);
  
  // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –±–æ—Ç—ã
  for (const [botId] of activeProcesses.entries()) {
    await stopBot(botId);
  }
  
  process.exit(0);
}

process.on('SIGINT', () => shutdownServer('SIGINT'));
process.on('SIGTERM', () => shutdownServer('SIGTERM'));

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
app.listen(PORT, HOST, async () => {
  console.log(`üöÄ Server running on ${HOST}:${PORT}`);
  
  // –ñ–¥–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB
  await new Promise((resolve) => {
    if (mongoose.connection.readyState === 1) {
      resolve();
      } else {
      mongoose.connection.once('connected', resolve);
    }
  });
  
  console.log('‚úÖ MongoDB connection confirmed, starting initialization...');
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –±–æ—Ç—ã –∏–∑ MongoDB
  try {
    const activeBots = await Bot.find({ isActive: true });
    console.log(`ü§ñ Loaded ${activeBots.length} active bots from MongoDB`);
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –±–æ—Ç—ã
    for (const bot of activeBots) {
      try {
        await startBot(bot);
        console.log(`‚úÖ Bot ${bot.id} started successfully`);
      } catch (error) {
        console.error(`‚ùå Failed to start bot ${bot.id}:`, error);
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –Ω–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        await Bot.updateOne({ id: bot.id }, { $set: { isActive: false } });
      }
    }
  } catch (error) {
    console.error('Error loading active bots:', error);
  }
}); 

app.get('/api/bots/:id/full', async (req, res) => {
  try {
    const botId = req.params.id;
    const bot = await Bot.findOne({ id: botId });
    if (!bot) {
      return res.status(404).json({ error: 'Bot not found' });
    }
    const users = await User.find({ botId });
    const quizStats = await QuizStats.find({ botId });
    const promoCodes = await PromoCode.find({ botId });
    const loyalties = await Loyalty.find({ botId });
    res.json({ bot, users, quizStats, promoCodes, loyalties });
  } catch (error) {
    res.status(500).json({ error: 'Failed to load full bot info', details: error.message });
  }
}); 