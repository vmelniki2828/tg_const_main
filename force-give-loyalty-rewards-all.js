#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –≤—ã–¥–∞—á–∏ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node force-give-loyalty-rewards-all.js <botId>
 */

const axios = require('axios');

async function forceGiveLoyaltyRewardsAll(botId) {
  try {
    console.log(`üéÅ –ú–∞—Å—Å–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –≤—ã–¥–∞—á–∞ –Ω–∞–≥—Ä–∞–¥ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞ ${botId}`);
    
    const response = await axios.post(`http://localhost:3001/api/force-give-loyalty-rewards-all/${botId}`);
    
    console.log('‚úÖ –ú–∞—Å—Å–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    console.log('üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
    console.log(`   - –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${response.data.summary.totalUsers}`);
    console.log(`   - –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${response.data.summary.processedUsers}`);
    console.log(`   - –ü–æ–ª—É—á–∏–ª–∏ –Ω–∞–≥—Ä–∞–¥—ã: ${response.data.summary.usersWithRewards}`);
    console.log(`   - –í—Å–µ–≥–æ –≤—ã–¥–∞–Ω–æ –Ω–∞–≥—Ä–∞–¥: ${response.data.summary.totalRewardsGiven}`);
    console.log(`   - –û—à–∏–±–æ–∫: ${response.data.summary.totalErrors}`);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å –Ω–∞–≥—Ä–∞–¥–∞–º–∏
    const usersWithRewards = response.data.statistics.userDetails.filter(user => user.status === 'rewards_given');
    
    if (usersWithRewards.length > 0) {
      console.log('\nüéÅ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –ø–æ–ª—É—á–∏–≤—à–∏–µ –Ω–∞–≥—Ä–∞–¥—ã:');
      usersWithRewards.forEach((user, index) => {
        console.log(`\n${index + 1}. ${user.firstName} (@${user.username}) - ID: ${user.userId}`);
        console.log(`   - –í—Ä–µ–º—è —É—á–∞—Å—Ç–∏—è: ${user.effectiveTimeMinutes} –º–∏–Ω—É—Ç`);
        console.log(`   - –ü—Ä–æ–π–¥–µ–Ω–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã: ${user.passedPeriods.join(', ')}`);
        console.log(`   - –ü–æ–ª—É—á–µ–Ω–æ –Ω–∞–≥—Ä–∞–¥: ${user.rewardsGiven.length}`);
        
        user.rewardsGiven.forEach(reward => {
          if (reward.promoCode) {
            console.log(`     ‚Ä¢ ${reward.periodName}: ${reward.promoCode}`);
          } else {
            console.log(`     ‚Ä¢ ${reward.periodName}: –Ω–µ—Ç –ø—Ä–æ–º–æ–∫–æ–¥–∞`);
          }
        });
      });
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –Ω–∞–≥—Ä–∞–¥
    const usersWithoutRewards = response.data.statistics.userDetails.filter(user => 
      user.status === 'no_rewards_needed' || user.status === 'skipped'
    );
    
    if (usersWithoutRewards.length > 0) {
      console.log('\n‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–µ–∑ –Ω–∞–≥—Ä–∞–¥:');
      usersWithoutRewards.forEach((user, index) => {
        const reason = user.status === 'skipped' ? 
          (user.reason === 'loyalty_not_started' ? '–Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏' : user.reason) :
          '–≤—Å–µ –Ω–∞–≥—Ä–∞–¥—ã —É–∂–µ –≤—ã–¥–∞–Ω—ã';
        console.log(`${index + 1}. ${user.firstName} (@${user.username}) - ${reason}`);
      });
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏
    const usersWithErrors = response.data.statistics.userDetails.filter(user => user.status === 'error');
    
    if (usersWithErrors.length > 0) {
      console.log('\n‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –æ—à–∏–±–∫–∞–º–∏:');
      usersWithErrors.forEach((user, index) => {
        console.log(`${index + 1}. ${user.firstName} (@${user.username}) - ${user.reason}`);
      });
    }
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º
    const periodStats = {};
    response.data.statistics.userDetails.forEach(user => {
      user.rewardsGiven.forEach(reward => {
        if (!periodStats[reward.period]) {
          periodStats[reward.period] = { count: 0, name: reward.periodName };
        }
        periodStats[reward.period].count++;
      });
    });
    
    if (Object.keys(periodStats).length > 0) {
      console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º:');
      Object.entries(periodStats).forEach(([period, stats]) => {
        console.log(`   - ${stats.name} (${period}): ${stats.count} –Ω–∞–≥—Ä–∞–¥`);
      });
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Å—Å–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ:', error.message);
    if (error.response) {
      console.error('üìÑ –î–µ—Ç–∞–ª–∏ –æ—Ç–≤–µ—Ç–∞:', error.response.data);
    }
  }
}

// –ü–æ–ª—É—á–∞–µ–º botId –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const botId = process.argv[2];

if (!botId) {
  console.error('‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–∫–∞–∑–∞–Ω botId');
  console.log('üìñ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node force-give-loyalty-rewards-all.js <botId>');
  console.log('üìñ –ü—Ä–∏–º–µ—Ä: node force-give-loyalty-rewards-all.js 1757891140598');
  process.exit(1);
}

console.log(`üöÄ –ó–∞–ø—É—Å–∫ –º–∞—Å—Å–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–≥—Ä–∞–¥ –¥–ª—è –±–æ—Ç–∞: ${botId}`);
forceGiveLoyaltyRewardsAll(botId);
