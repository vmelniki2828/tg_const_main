#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –≤—ã–¥–∞—á–∏ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node force-give-loyalty-rewards.js <botId> <userId>
 */

const axios = require('axios');

async function forceGiveLoyaltyRewards(botId, userId) {
  try {
    console.log(`üéÅ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –≤—ã–¥–∞—á–∞ –Ω–∞–≥—Ä–∞–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId} –≤ –±–æ—Ç–µ ${botId}`);
    
    const response = await axios.post(`http://localhost:3001/api/force-give-loyalty-rewards/${botId}/${userId}`);
    
    console.log('‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –≤—ã–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
    console.log(`   - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${response.data.user.firstName} (@${response.data.user.username})`);
    console.log(`   - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${response.data.user.userId}`);
    console.log(`   - –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏: ${new Date(response.data.user.loyaltyStartedAt).toLocaleString('ru-RU')}`);
    console.log(`   - –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ –≤—Ä–µ–º—è: ${response.data.user.effectiveTimeMinutes} –º–∏–Ω—É—Ç`);
    console.log(`   - –í—Å–µ–≥–æ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤: ${response.data.statistics.totalPassedPeriods}`);
    console.log(`   - –í—ã–¥–∞–Ω–æ –Ω–∞–≥—Ä–∞–¥: ${response.data.statistics.rewardsGiven}`);
    console.log(`   - –û—à–∏–±–æ–∫: ${response.data.statistics.errors}`);
    
    if (response.data.rewardsGiven.length > 0) {
      console.log('\nüéÅ –í—ã–¥–∞–Ω–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã:');
      response.data.rewardsGiven.forEach((reward, index) => {
        console.log(`\n${index + 1}. ${reward.periodName} (${reward.period})`);
        console.log(`   - –î–µ–π—Å—Ç–≤–∏–µ: ${reward.action}`);
        if (reward.promoCode) {
          console.log(`   - –ü—Ä–æ–º–æ–∫–æ–¥: ${reward.promoCode}`);
        } else {
          console.log(`   - –ü—Ä–æ–º–æ–∫–æ–¥: –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω`);
        }
      });
    }
    
    if (response.data.errors.length > 0) {
      console.log('\n‚ùå –û—à–∏–±–∫–∏:');
      response.data.errors.forEach((error, index) => {
        console.log(`\n${index + 1}. ${error.periodName} (${error.period})`);
        console.log(`   - –û—à–∏–±–∫–∞: ${error.error}`);
      });
    }
    
    if (response.data.rewardsGiven.length === 0 && response.data.errors.length === 0) {
      console.log('\nüéâ –í—Å–µ –Ω–∞–≥—Ä–∞–¥—ã —É–∂–µ –≤—ã–¥–∞–Ω—ã!');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –≤—ã–¥–∞—á–µ –Ω–∞–≥—Ä–∞–¥:', error.message);
    if (error.response) {
      console.error('üìÑ –î–µ—Ç–∞–ª–∏ –æ—Ç–≤–µ—Ç–∞:', error.response.data);
    }
  }
}

// –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const botId = process.argv[2];
const userId = process.argv[3];

if (!botId || !userId) {
  console.error('‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–∫–∞–∑–∞–Ω—ã botId –∏ userId');
  console.log('üìñ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node force-give-loyalty-rewards.js <botId> <userId>');
  console.log('üìñ –ü—Ä–∏–º–µ—Ä: node force-give-loyalty-rewards.js 1757891140598 953796574');
  process.exit(1);
}

console.log(`üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –≤—ã–¥–∞—á–∏ –Ω–∞–≥—Ä–∞–¥:`);
console.log(`   - –ë–æ—Ç: ${botId}`);
console.log(`   - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userId}`);
forceGiveLoyaltyRewards(botId, userId);
